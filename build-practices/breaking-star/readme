
: build by

podman build -t breaking-star -f Dockerfile -- .





: show readme

podman run --rm -- breaking-star helper
podman run --rm -- breaking-star helper | less




: list toys

podman run --rm -- breaking-star lister
podman run --rm -- breaking-star lister metas dateinner
podman run --rm -- breaking-star metas lister




: show toys define

podman run --rm -- breaking-star helper metas dateinner
podman run --rm -- breaking-star metas helper ask_user historisch







: use before installed

cat | podman run --rm -i -- breaking-star proptools t XXX=xxx ...
cat | podman run --rm -i -- breaking-star proptools t XXX=xxx ... | podman run --rm -i -- breaking-star proptools d -D " "
cat | podman run --rm -i -- breaking-star proptools d -D " " | podman run --rm -i -- breaking-star proptools t XXX=xxx ...







: install some toys into an env by installer, such as proptools and metas

eval "$(podman run --rm -- ghcr.io/yhm-amber/breaking-star:latest installer ghcr.io/yhm-amber/breaking-star:latest metas proptools)"
eval "$(podman run --rm -- breaking-star installer breaking-star metas proptools)"



: use if installed by installer

cat | proptools t XXX=xxx ...
cat | proptools t XXX=xxx ... | proptools d -D " "
cat | proptools d -D " " | proptools t XXX=xxx ...
metas helper ask_user





: install-out all into an env

eval "$(podman run --rm -- breaking-star cat src.sh)"



: use if install-outed

cat | (proptools t XXX=xxx ...)
cat | (proptools t XXX=xxx ...) | (proptools d -D " ")
cat | (proptools d -D " ") | (proptools t XXX=xxx ...)
(metas helper ask_user)







: other

还有别的需要就根据上头的提示自己举一反三吧。应该也够了。。。

上面的 installer 就只是把镜像调用的命令封装了一下而已。
我这里是用 podman 运行容器，你可能需要手动把 podman 改成 docker 或 nerdctl 。

上面的 install-out 其实就是把 src.sh 里的定义直接在当前上下文执行。
这样弄以后理论上命令的启动时间是最短的，因为没有了启动容器的耗时，虽然启动容器的耗时也没多少就是了。

注意！如果是在当前上下文直接使用我 src.sh 里的函数，最好像示例那样把每次使用都放在小括号里。
不放当然也行，但有可能让当前上下文变得脏乱。。。

上面的安装示例里面，你都可以先直接看看 eval 后面引号里的括号里的那个命令的执行结果。这个结果一般是一些代码。
当检查这些代码没问题后，这整个一行 eval 命令可以放到 .bashrc 之类的一些地方，这样就不用每次都只是临时安装了。

我希望代码是尽可能简洁且一致的，所以没有帮助文档。
可以提供帮助的信息就是代码的定义本身，我一般会在定义里写上它要达到什么功能。

不过， declare 出来的定义，它格式化得实在有些难看。。。
所以，想要阅读定义的话，我觉得还是看 src.sh 吧，虽然可能有点罗嗦。。


