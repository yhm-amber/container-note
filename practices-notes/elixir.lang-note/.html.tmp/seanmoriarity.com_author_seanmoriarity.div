<div><div id="page" class="hfeed site" path="/2021/04/08/axon-deep-learning-in-elixir/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section" style="background: url(&quot;https://seanmoriaritycom.files.wordpress.com/2021/04/1.1-axon-whitebg.png?w=1440&amp;h=600&amp;crop=1&quot;) no-repeat center; background-size: cover; background-attachment: scroll;">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-285" class="post-285 post type-post status-publish format-standard has-post-thumbnail hentry category-projects tag-axon tag-elixir tag-nx">
			<header class="entry-header">
			<h1 class="entry-title"><font>Axon: Deep Learning in&nbsp;Elixir</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/projects/" rel="category tag">projects</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published" datetime="2021-04-08T07:30:33-04:00">April 8, 2021</time><time class="updated" datetime="2021-04-08T07:46:01-04:00">April 8, 2021</time>			</span>

			<span class="word-count">9 Minutes</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<blockquote class="wp-block-quote"><p><font>ax·on/ˈakˌsän/</font><em>noun</em></p><p><font>the long threadlike part of a nerve cell along which impulses are conducted from the cell body to other cells.</font></p></blockquote>



<p><br><font>Today I am excited to publicly announce </font><a href="https://github.com/elixir-nx/axon">Axon</a><font>, a library for creating neural networks in Elixir. Axon is still pre-release; however, I believe it’s reached a point where it’s ready for experimentation and input from the open-source community. In this post I will cover Axon’s API, discuss some of the design decisions, and lay out future plans for the library.</font></p>



<h2 class="wp-block-heading"><font>Overview</font></h2>



<p><font>One of Axon’s main goals is to strike a balance between ease-of-use and flexibility. On one end, we hope programmers with zero experience in deep learning find Axon easy to use and approachable to beginners. On the other, we hope experienced practitioners and researchers find Axon to be a productive, flexible, and refreshing, functional take on deep learning frameworks.</font></p>



<p><font>Axon consists of the following components:</font></p>



<ol><li><font>Functional API – A low-level API of Elixir </font><code>defn</code><font> of which all other APIs build on.</font></li><li><font>Model Creation API – A high-level model creation API which manages model initialization and application.</font></li><li><font>Optimization API – An API for creating and using first-order optimization techniques.</font></li><li><font>Training API – An API for quickly training models.</font></li></ol>



<p><font>From the beginning, we’ve tried to create abstractions that enable easy integration while maintaining a level of separation between each component. You should be able to use any of the APIs without dependencies on others. By decoupling the APIs in this way, Axon gives you full control over each aspect of creating and training a neural network. </font></p>



<h2 class="wp-block-heading"><font>Functional API</font></h2>



<p><font>At the lowest-level, Axon consists of a number of modules with functional implementations of common methods in deep learning:</font></p>



<ul><li><code>Axon.Activations</code><font> –  Element-wise activation functions.</font></li><li><code>Axon.Initializers</code><font> – Model parameter initialization functions.</font></li><li><code>Axon.Layers</code><font> – Common deep learning layer implementations.</font></li><li><code>Axon.Losses</code><font> – Common loss functions.</font></li><li><code>Axon.Metrics</code><font> – Training metrics such as accuracy, absolute error, precision, etc.</font></li></ul>



<p><font>This API largely resembles </font><code>torch.nn.functional</code><font> from PyTorch or </font><code>tf.nn</code><font> in TensorFlow. The functional implementations are very bare, and don’t come with the same conveniences provided in higher level APIs. The lack of conveniences comes with the benefit of maximum flexibility and control over your models and model training.</font></p>



<p><font>All of the methods in the functional API are implemented as </font><code>Nx</code> <code>defn</code><font>. That means you can use </font><strong>any</strong> <code>Nx</code> <a href="https://seanmoriarity.com/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/">compiler or backend</a><font> to accelerate Axon. Additionally, you can arbitrarily compose methods in the Axon functional API with your own numerical definitions. Axon works entirely on </font><code>Nx</code><font> tensors, so any library built on top of </font><code>Nx</code><font> is likely to integrate well with Axon.</font></p>



<p><font>Because Axon’s high-level APIs build on top of the functional API, the same benefits apply. You can use any </font><code>Nx</code><font> compiler or backend to accelerate model training or inference, with the possibility for things like AOT compilation.  </font></p>



<h2 class="wp-block-heading"><font>Model Creation</font></h2>



<p><font>The goal of the model creation API is to eliminate most of the boilerplate associated with creating, initializing, and applying models. Additionally, we wanted to build and represent models in a way that’s easy to export to other formats such as ONNX or TensorFlow Lite. Axon addresses these issues using an </font><code>Axon</code><font> struct:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_498664" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defstruct [:id, :name, :output_shape, :parent, :op, :params, :opts]</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>The </font><code>Axon</code><font> struct represents a model’s computation graph. Each method in the Axon model creation API accepts an </font><code>Axon</code><font> struct and returns a new </font><code>Axon</code><font> struct, with </font><code>input</code><font> layers representing the “atomic” operations in model creation. An example model looks something like:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_74902" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">model =</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Axon</code><code class="erlang plain">.input({nil, 784})</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(128, activation: :relu)</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dropout(rate: 0.5)</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(10, activation: :softmax)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>With this approach, you can use regular Elixir functions to represent model building blocks, and compose them anyway you see fit:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_858813" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defmodule </code><code class="erlang constants">MyModel</code> <code class="erlang plain">do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">def residual(x, units) do</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">x</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(units, activation: :relu)</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.add(x)</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">def model() do</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">Axon</code><code class="erlang plain">.input({nil, 784})</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(128, activation: :relu)</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; residual(128)</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(10, activation: :softmax)</code></div><div class="line number13 index12 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number14 index13 alt1"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Because the underlying model is just an Elixir struct, model serialization is no harder than traversing the struct and converting </font><code>Axon</code><font> nodes into the equivalent in whatever other format you’d like. At the moment, we’re still working out the details of </font><a href="https://github.com/elixir-nx/axon/issues/26">model serialization</a><font>, and would love feedback on potential needs and use cases.</font></p>



<p><font>An added benefit of using a regular Elixir struct is easy customization of model inspection using the </font><code>Inspect</code><font> protocol:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_592632" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">model =</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Axon</code><code class="erlang plain">.input({nil, 784})</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(128)</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(10, activation: :softmax)</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="erlang constants">IO</code><code class="erlang plain">.inspect model</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Outputs:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_762613" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">-----------------------------------------------</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">Model</code></div><div class="line number3 index2 alt2"><code class="plain plain">===============================================</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;</code><code class="plain plain">Layer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shape&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Parameters</code></div><div class="line number5 index4 alt2"><code class="plain plain">===============================================</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;</code><code class="plain plain">input_1 (input)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {nil, 784}&nbsp;&nbsp; 0</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;</code><code class="plain plain">dense_2 (dense)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {nil, 128}&nbsp;&nbsp; 100480</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;</code><code class="plain plain">dense_3 (dense)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {nil, 10}&nbsp;&nbsp;&nbsp; 1290</code></div><div class="line number9 index8 alt2"><code class="plain spaces">&nbsp;</code><code class="plain plain">softmax_4 (softmax)&nbsp;&nbsp; {nil, 10}&nbsp;&nbsp;&nbsp; 0</code></div><div class="line number10 index9 alt1"><code class="plain plain">-----------------------------------------------</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Axon provides a few conveniences for working with models. First, we chose to take the philosophy that a model’s only concerns are initialization and application. That means the model shouldn’t be concerned at all with details like training. Axon provides the macros: </font><code>Axon.init/2</code><font> and </font><code>Axon.predict/4</code><font> for initializing and applying models:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_347756" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">model =</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Axon</code><code class="erlang plain">.input({nil, 784})</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(128, activation: :relu)</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dropout(rate: 0.5)</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(10, activation: :softmax)</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="erlang plain">params = </code><code class="erlang constants">Axon</code><code class="erlang plain">.init(model, compiler: </code><code class="erlang constants">EXLA</code><code class="erlang plain">)</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="erlang constants">Axon</code><code class="erlang plain">.predict(model, params, input, compiler: </code><code class="erlang constants">EXLA</code><code class="erlang plain">)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Both </font><code>Axon.init/2</code><font> and </font><code>Axon.predict/4</code><font> can also be used from anywhere – both inside </font><code>defn</code><font> and nested with regular Elixir code:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_186331" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defmodule </code><code class="erlang constants">MyModel</code> <code class="erlang plain">do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">def model() do</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">Axon</code><code class="erlang plain">.input({nil, 784})</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(128, activation: :relu)</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dropout(rate: 0.5)</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(10, activation: :softmax)</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">defn loss(params, inputs, targets) do</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">preds = </code><code class="erlang constants">Axon</code><code class="erlang plain">.predict(model(), params, inputs) # treated as </code><code class="erlang constants">Expr</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">Axon</code><code class="erlang plain">.</code><code class="erlang constants">Losses</code><code class="erlang plain">.categorical_cross_entropy(targets, preds)</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number13 index12 alt2"><code class="erlang keyword">end</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="erlang plain">params = </code><code class="erlang constants">Axon</code><code class="erlang plain">.init(</code><code class="erlang constants">MyModel</code><code class="erlang plain">.model(), compiler: </code><code class="erlang constants">EXLA</code><code class="erlang plain">) # </code><code class="erlang constants">JIT</code> <code class="erlang plain">compiled </code><code class="erlang keyword">and</code> <code class="erlang plain">executed</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>If you prefer, you can obtain the initialization and application methods yourself using </font><code>Axon.compile</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_144191" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">model =</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Axon</code><code class="erlang plain">.input({nil, 784})</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(128, activation: :relu)</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dropout(rate: 0.5)</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(10, activation: :softmax)</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="erlang plain">{init_fn, predict_fn} = </code><code class="erlang constants">Axon</code><code class="erlang plain">.compile(model)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You should note that in order to accelerate these functions, you’ll need to use </font><code>Nx.Defn.jit/3</code><font>.</font></p>



<p><font>The model API also makes it easy to apply existing numerical definitions and </font><code>Nx</code><font> code at any point with the </font><code>nx</code><font> layer:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_607557" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defmodule </code><code class="erlang constants">MyModel</code> <code class="erlang plain">do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">defn mish(x) do</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">x * </code><code class="erlang constants">Nx</code><code class="erlang plain">.tanh(</code><code class="erlang constants">Axon</code><code class="erlang plain">.</code><code class="erlang constants">Activations</code><code class="erlang plain">.softplus(x))</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">def model() do</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">Axon</code><code class="erlang plain">.input({nil, 784})</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(128)</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.nx(&amp;mish/1)</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.nx(fn x -&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.max(x, 0) </code><code class="erlang keyword">end</code><code class="erlang plain">)</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(10, activation: :softmax)</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number13 index12 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Axon currently has support for:</font></p>



<ul><li><font>Linear layers (</font><code>dense</code><font>)</font></li><li><font>Dropout layers (</font><code>dropout</code><font>, </font><code>feature_alpha_dropout</code><font>, </font><code>alpha_dropout</code><font>, </font><code>spatial_dropout</code><font>)</font></li><li><font>Convolutional Layers (</font><code>conv</code><font>, </font><code>depthwise_conv</code><font>, </font><code>separable_conv2d</code><font>, </font><code>separable_conv3d</code><font>)</font></li><li><font>Normalization Layers (</font><code>batch_norm</code><font>, </font><code>layer_norm</code><font>, </font><code>group_norm</code><font>, </font><code>instance_norm</code><font>)</font></li><li><font>Pooling Layers (</font><code>max_pool</code><font>, </font><code>avg_pool</code><font>, </font><code>lp_pool</code><font>, </font><code>adaptive_max_pool</code><font>, </font><code>adaptive_avg_pool</code><font>)</font></li><li><font>Activation Layers (every function in </font><code>Axon.Activations</code><font>)</font></li><li><font>Utilities/combinators (</font><code>flatten</code><font>, </font><code>add</code><font>, </font><code>multiply</code><font>, </font><code>subtract</code><font>, </font><code>concatenate</code><font>)</font></li></ul>



<p><font>with plans to support recurrent layers, attention layers, and many more. Our goal is to maintain an API that is productive, extensible, and on par with other modern deep learning frameworks. If there is functionality you need to see that’s not included on the roadmap, feel free to open an issue.</font></p>



<h2 class="wp-block-heading"><font>Model Optimization</font></h2>



<p><font>Axon’s model optimization API takes the same approach as that taken in </font><a href="https://github.com/deepmind/optax">DeepMind’s Optax</a><font>. The goal of the API is to provide low-level constructs for creating advanced optimizers, and then to provide high-level optimizers built on top of that API.</font></p>



<p><font>Axon considers optimizers as the tuple: </font><code>{init_fn/1, update_fn/2}</code><font>. </font><code>init_fn/1</code><font> accepts a model’s parameters and initializes the optimizer’s state. </font><code>update_fn/2</code><font> accepts “updates” (most commonly gradients in gradient-based optimization) and an optimizer state and returns transformed updates and a new optimizer state.</font></p>



<p><font>At the lowest level, Axon implements a number of update functions in </font><code>Axon.Updates</code><font>. Each update function acts as a combinator – accepting a tuple of </font><code>init_fn/1</code><font> and </font><code>update_fn/2</code><font> as it’s first argument and returning a tuple of modified </font><code>init_fn</code><font> and </font><code>update_fn</code><font>. This means you can arbitrarily compose updates to build complex optimizers. As an example, you can use the </font><code>Axon.Updates</code><font> API to implement the Adam optimizer like:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_46971" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">def adam(learning_rate, opts \\ []) do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Axon</code><code class="erlang plain">.</code><code class="erlang constants">Updates</code><code class="erlang plain">.scale_by_adam(opts)</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.</code><code class="erlang constants">Updates</code><code class="erlang plain">.scale(-learning_rate)</code></div><div class="line number4 index3 alt1"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>If you find the transformations in </font><code>Axon.Updates</code><font> are too high-level, you can implement custom transformations using </font><code>Axon.Updates.stateful/3</code><font> and </font><code>Axon.Updates.stateless/2</code><font>. </font><code>Axon.Updates.stateful/3</code><font> represents a stateful transformation:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_110523" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div><div class="line number23 index22 alt2"><font>23</font></div><div class="line number24 index23 alt1"><font>24</font></div><div class="line number25 index24 alt2"><font>25</font></div><div class="line number26 index25 alt1"><font>26</font></div><div class="line number27 index26 alt2"><font>27</font></div><div class="line number28 index27 alt1"><font>28</font></div><div class="line number29 index28 alt2"><font>29</font></div><div class="line number30 index29 alt1"><font>30</font></div><div class="line number31 index30 alt2"><font>31</font></div><div class="line number32 index31 alt1"><font>32</font></div><div class="line number33 index32 alt2"><font>33</font></div><div class="line number34 index33 alt1"><font>34</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">def scale_by_stddev(combinator \\ identity(), opts) do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">{initial, opts} = </code><code class="erlang constants">Keyword</code><code class="erlang plain">.pop(opts, :initial_scale, 0.0)</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">stateful(</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">combinator,</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&amp;init_scale_by_stddev(&amp;1, initial),</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&amp;apply_scale_by_stddev(&amp;1, &amp;2, &amp;3, opts)</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">)</code></div><div class="line number9 index8 alt2"><code class="erlang keyword">end</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="erlang plain">defnp init_scale_by_stddev(params, value) do</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">mu = zeros_like(params)</code></div><div class="line number13 index12 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">nu = fulls_like(params, value)</code></div><div class="line number14 index13 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">{mu, nu}</code></div><div class="line number15 index14 alt2"><code class="erlang keyword">end</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="erlang plain">defnp apply_scale_by_stddev(x, {mu, nu}, _params, opts \\ []) do</code></div><div class="line number18 index17 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">opts = keyword!(opts, decay: 0.9, eps: 1.0e-8)</code></div><div class="line number19 index18 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">decay = opts[:decay]</code></div><div class="line number20 index19 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">eps = opts[:eps]</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">mu = update_moment(x, mu, decay, 1)</code></div><div class="line number23 index22 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">nu = update_moment(x, nu, decay, 2)</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">x =</code></div><div class="line number26 index25 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">transform({x, mu, nu, eps}, fn {x, mu, nu, eps} -&gt;</code></div><div class="line number27 index26 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code><code class="erlang constants">Tuple</code><code class="erlang plain">.to_list(x), </code><code class="erlang constants">Tuple</code><code class="erlang plain">.to_list(mu), </code><code class="erlang constants">Tuple</code><code class="erlang plain">.to_list(nu)]</code></div><div class="line number28 index27 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.zip()</code></div><div class="line number29 index28 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.map(fn {g, z, t} -&gt; g * </code><code class="erlang constants">Nx</code><code class="erlang plain">.rsqrt(-</code><code class="erlang constants">Nx</code><code class="erlang plain">.power(z, 2) + t + eps) </code><code class="erlang keyword">end</code><code class="erlang plain">)</code></div><div class="line number30 index29 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">List</code><code class="erlang plain">.to_tuple()</code></div><div class="line number31 index30 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">end</code><code class="erlang plain">)</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">{x, {mu, nu}}</code></div><div class="line number34 index33 alt1"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><code>Axon.Updates.stateless/2</code><font> represents a stateless transformation:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_265757" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">def scale(combinator \\ identity(), step_size) do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">stateless(combinator, &amp;apply_scale(&amp;1, &amp;2, step_size))</code></div><div class="line number3 index2 alt2"><code class="erlang keyword">end</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="erlang plain">defnp apply_scale(x, _params, step) do</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">transform(</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{x, step},</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">fn {updates, step} -&gt;</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">updates</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Tuple</code><code class="erlang plain">.to_list()</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.map(&amp;</code><code class="erlang constants">Nx</code><code class="erlang plain">.multiply(&amp;1, step))</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">List</code><code class="erlang plain">.to_tuple()</code></div><div class="line number13 index12 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number14 index13 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">)</code></div><div class="line number15 index14 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You can then compose your custom updates arbitrarily with those in </font><code>Axon.Updates</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_732960" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">def my_optimizer(learning_rate, opts \\ []) do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Axon</code><code class="erlang plain">.</code><code class="erlang constants">Updates</code><code class="erlang plain">.scale_by_adam(opts)</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; scale_by_stddev()</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; scale(-learning_rate)</code></div><div class="line number5 index4 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Axon uses the updates API to build a number of high-level optimizers:</font></p>



<ul><li><font>Adabelief</font></li><li><font>Adagrad</font></li><li><font>Adam</font></li><li><font>Adamw</font></li><li><font>Fromage</font></li><li><font>Lamb</font></li><li><font>Noisy SGD</font></li><li><font>Radam</font></li><li><font>RMSProp</font></li><li><font>SGD</font></li><li><font>Yogi</font></li></ul>



<p><font>It’s important to note that optimization API does not directly depend on Axon models. You can use the API to optimize any differentiable objective function.</font></p>



<p><font>In the future, we plan to support integration with learning rate schedules and explore more advanced optimization approaches including differentially-private SGD and second order methods.</font></p>



<h2 class="wp-block-heading"><font>Training</font></h2>



<p><font>The purpose of the training API is to provide conveniences and common routines for implementing training loops. In Dougal MacLaurin’s (creator of AutoGrad alongside Matt Johnson and David Duvenaud)</font><a href="https://dougalmaclaurin.com/phd-thesis.pdf"> PhD Thesis</a><font>, he writes:</font></p>



<blockquote class="wp-block-quote"><p><font>The goal of Autograd is to make gradients effortless. If you can write a loss function, Autograd should be able to give you its gradient.</font></p></blockquote>



<p><font>He also describes the usefulness of obtaining gradients in optimizing the parameters of an objective function. Essentially, Autograd simplifies the task of writing a machine learning algorithm down to the task of writing a differentiable objective function. This is a philosophy we maintain in Axon’s training API. If you can write a parameterized, differentiable objective function, and pair that with data, you can make use of Axon’s training API.</font></p>



<p><font>The API is partly inspired by the excellent </font><a href="https://www.pytorchlightning.ai/">PyTorch Lightning</a><font> library. At the time of this writing, the Axon training API consists of 2 methods: </font><code>Axon.Training.step</code><font> and </font><code>Axon.Training.train</code><font>. In practice, you can use these methods to train an Axon model like this:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_249108" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">model =</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Axon</code><code class="erlang plain">.input({nil, 784})</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(128)</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.dense(10, activation: :softmax)</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="erlang plain">final_params =</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">model</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.</code><code class="erlang constants">Training</code><code class="erlang plain">.step(:categorical_cross_entropy, </code><code class="erlang constants">Axon</code><code class="erlang plain">.</code><code class="erlang constants">Optimizers</code><code class="erlang plain">.adamw(0.005))</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Axon</code><code class="erlang plain">.</code><code class="erlang constants">Training</code><code class="erlang plain">.train(inputs, targets, epochs: 10, compiler: </code><code class="erlang constants">EXLA</code><code class="erlang plain">)</code></div></div></td></tr></tbody></table></div></div></div>


<p><code>Axon.Training.step</code><font> represents a single training step. It returns a tuple: </font><code>{init_fn, step_fn}</code><font> which represent the training initialization function and training step function respectively. The form of </font><code>Axon.Training.step/3</code><font> in this example is actually just a convenience around </font><code>Axon.Training.step/2</code><font> which accepts two tuples:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_854382" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">step({init_model_fn, objective_fn}, {init_update_fn, update_fn}) :: {init_fn, step_fn}</code></div></div></td></tr></tbody></table></div></div></div>


<p><code>init_model_fn</code><font> is combined with </font><code>init_update_fn</code><font> into a single initialization function which initializes training state.</font></p>



<p><code>objective_fn</code><font> is a parameterized, differentiable objective function which accepts model parameters, inputs, and labels, and returns a loss. Recall that Axon optimizers are just tuples as well, so both </font><code>init_update_fn</code><font> and </font><code>update_fn</code><font> have the same form as an Axon optimizer. All of these methods are combined to produce a single step function which is applied on each batch during training.</font></p>



<p><code>Axon.Training.train</code><font> has the following form:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_340686" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">train({init_fn, step_fn}, inputs, targets, opts \\ []) :: model_state</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Both </font><code>inputs</code><font> and </font><code>targets</code><font> are an Enumerable containing batches of input and target tensors respectively. Note, the format of </font><code>inputs</code><font> and </font><code>targets</code><font> is likely to change in the future as we move towards a unified representation of datasets in the </font><code>Nx</code><font> ecosystem.</font></p>



<p><code>Axon.Training.train</code><font> implements a common training loop which initializes the training state and iterates through the training set for some given number of epochs. It returns the final training state for serialization and potential use in inference workloads.</font></p>



<p><font>Currently, the Axon training API is rather limited; however, there are plans to extend it. In the immediate future, we plan to support:</font></p>



<ul><li><a href="https://github.com/elixir-nx/axon/issues/22">Validation and Testing Integration</a></li><li><a href="https://github.com/elixir-nx/axon/issues/23">Logging to tools like TensorBoard</a></li><li><a href="https://github.com/elixir-nx/axon/issues/19">Inclusion of Train/Validate/Test Metrics</a></li><li><a href="https://github.com/elixir-nx/axon/issues/21">Per batch/epoch callbacks for things like early stopping and model checkpointing</a></li></ul>



<p><font>Additionally, we would love to explore more advanced things like distributed training. We are also seeking ways to improve the performance of our training loops by running them entirely on native accelerators.</font></p>



<h2 class="wp-block-heading"><font>Wrapping Up</font></h2>



<p><font>Axon is still very young with much work to do before it’s ready to release. You’ll likely encounter sharp edges, bugs, and confusing errors. We would love your help in making Axon better by experimenting with the API, reporting any issues you find, providing feedback on any of our open issues, or contributing to the project.</font></p>



<p><font>Finally, I would be remiss if I did not acknowledge some of the libraries that served as inspiration for Axon:</font></p>



<ul><li><a href="https://github.com/deepmind/dm-haiku">Haiku</a></li><li><a href="https://github.com/deepmind/optax">Optax</a></li><li><a href="https://github.com/google/jax">Jax</a></li><li><a href="https://github.com/google/flax">Flax</a></li><li><a href="https://github.com/google/trax">Trax</a></li><li><a href="https://thinc.ai/">Thinc.ai</a></li><li><a href="https://pytorch.org/">PyTorch</a><font>/</font><a href="https://www.pytorchlightning.ai/">PyTorch Lightning</a></li><li><a href="https://www.tensorflow.org/api_docs/python/tf/keras">TensorFlow Keras</a></li></ul>



<p></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-285" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-285" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-175065622-285-642fac5e689aa" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=285&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-285-642fac5e689aa&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-285-642fac5e689aa" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px; display: none;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-175065622-285-642fac5e689aa" src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=285&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-285-642fac5e689aa&amp;domain=seanmoriarity.com" height="55px" width="100%" frameborder="0" scrolling="no" title="Like or Reblog"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="421" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/?relatedposts_hit=1&amp;relatedposts_origin=285&amp;relatedposts_position=0" title="JIT/GPU accelerated deep learning for Elixir with Axon&amp;nbsp;v0.1" data-origin="285" data-position="0">JIT/GPU accelerated deep learning for Elixir with Axon&nbsp;v0.1</a></span><time class="jp-relatedposts-post-date" datetime="June 16, 2022" style="display: block;">June 16, 2022</time><span class="jp-relatedposts-post-context"><font>In "axon"</font></span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="386" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="/2022/02/07/nx-tip-of-the-week-12-nx-to_heatmap/?relatedposts_hit=1&amp;relatedposts_origin=285&amp;relatedposts_position=1" title="Nx Tip of the Week #12 &amp;#8211;&amp;nbsp;Nx.to_heatmap" data-origin="285" data-position="1">Nx Tip of the Week #12 –&nbsp;Nx.to_heatmap</a></span><time class="jp-relatedposts-post-date" datetime="February 7, 2022" style="display: block;">February 7, 2022</time><span class="jp-relatedposts-post-context"></span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="319" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/?relatedposts_hit=1&amp;relatedposts_origin=285&amp;relatedposts_position=2" title="Nx Tip of the Week #7 &amp;#8211; Using&amp;nbsp;Nx.Defn.jit" data-origin="285" data-position="2">Nx Tip of the Week #7 – Using&nbsp;Nx.Defn.jit</a></span><time class="jp-relatedposts-post-date" datetime="April 15, 2021" style="display: block;">April 15, 2021</time><span class="jp-relatedposts-post-context"><font>In "nx totw"</font></span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
		<ul class="post-tags light-text"><li><font>Tagged</font></li><li><a href="https://seanmoriarity.com/tag/axon/" rel="tag">axon</a></li><li><a href="https://seanmoriarity.com/tag/elixir/" rel="tag">elixir</a></li><li><a href="https://seanmoriarity.com/tag/nx/" rel="tag">nx</a></li></ul><!-- .post-tags -->	</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published" datetime="2021-04-08T07:30:33-04:00">April 8, 2021</time><time class="updated" datetime="2021-04-08T07:46:01-04:00">April 8, 2021</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Nx Tip of the Week #6 – Compiler or&nbsp;Backend?</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Nx Tip of the Week #7 – Using&nbsp;Nx.Defn.jit</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
			<h2 class="comments-title"><font>
			One thought on “</font><span>Axon: Deep Learning in&nbsp;Elixir</span><font>”		</font></h2><!-- .comments-title -->

		
		<ol class="comment-list">
					<li id="comment-176" class="pingback even thread-even depth-1 highlander-comment">
			<div class="comment-body"><font>
				Pingback: </font><a href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/" class="url" rel="ugc">JIT/GPU accelerated deep learning for Elixir with Axon v0.1 – Sean Moriarity</a> 			</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2021/04/08/axon-deep-learning-in-elixir/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="f5d293acf6"><input type="hidden" name="_wp_http_referer" value="/2021/04/08/axon-deep-learning-in-elixir/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-0" originals="25" scale="1.5">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-1" originals="25" scale="1.5">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-2" originals="25" scale="1.5">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="285" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="ea45509773"></p>
<input type="hidden" name="genseq" value="1680845918">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680845996524"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section" style="background: url(&quot;https://seanmoriaritycom.files.wordpress.com/2022/06/axon.png?w=1440&amp;h=600&amp;crop=1&quot;) no-repeat center; background-size: cover; background-attachment: scroll;">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-421" class="post-421 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-axon tag-deep-learning tag-elixir">
			<header class="entry-header">
			<h1 class="entry-title"><font>JIT/GPU accelerated deep learning for Elixir with Axon&nbsp;v0.1</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published updated" datetime="2022-06-16T07:50:08-04:00">June 16, 2022</time>			</span>

			<span class="word-count">7 Minutes</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><font>I am excited to announce the official v0.1.0 release of&nbsp;</font><a href="https://github.com/elixir-nx/axon">Axon</a><font>&nbsp;and&nbsp;</font><a href="https://github.com/elixir-nx/axon_onnx">AxonOnnx</a><font>. A lot has changed (and improved) since the initial&nbsp;</font><a href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/">public announcement of Axon</a><font>. In this post I will explore Axon and its internals, and give reasoning for some of the design decisions made along the way.</font></p>



<p><font>You can view the official documentation here:</font></p>



<ul><li><a href="https://hexdocs.pm/axon/Axon.html">Axon</a></li><li><a href="https://hexdocs.pm/axon_onnx/AxonOnnx.html">AxonOnnx</a></li></ul>



<h2 class="wp-block-heading"><font>What is Axon?</font></h2>



<p><font>At a high-level, Axon is a library for creating and training neural networks. Axon is implemented in pure Elixir and relies on&nbsp;</font><a href="https://github.com/elixir-nx/nx">Nx</a><font>&nbsp;to compile Neural Networks to the CPU/GPU just-in-time. It consists of a few components which are loosely tied together:</font></p>



<h3 class="wp-block-heading"><font>Functional API</font></h3>



<p><font>The functional API are “low-level” implementations of common neural network operations. It’s similar to&nbsp;</font><code>torch.functional</code><font>&nbsp;or&nbsp;</font><code>tf.nn</code><font>&nbsp;in the Python ecosystem. The functional API offers no conveniences—just implementations. These implementations are all written in&nbsp;</font><code>defn</code><font>, so they can be JIT compiled, or composed with Nx transformations like&nbsp;</font><code>grad</code><font>&nbsp;in other&nbsp;</font><code>defn</code><font>&nbsp;functions.</font></p>



<p><font>The Functional API consists of:</font></p>



<ul><li><a href="https://hexdocs.pm/axon/Axon.Activations.html">Axon.Activations</a></li><li><a href="https://hexdocs.pm/axon/Axon.Initializers.html">Axon.Initializers</a></li><li><a href="https://hexdocs.pm/axon/Axon.Layers.html">Axon.Layers</a></li><li><a href="https://hexdocs.pm/axon/Axon.Losses.html">Axon.Losses</a></li><li><a href="https://hexdocs.pm/axon/Axon.Metrics.html">Axon.Metrics</a></li><li><a href="https://hexdocs.pm/axon/Axon.Recurrent.html">Axon.Recurrent</a></li></ul>



<h3 class="wp-block-heading"><font>Model Creation API</font></h3>



<p><font>The model creation API is a high-level API for creating and executing neural networks. The API will be covered in-depth in this post, so I’ll omit the details here.</font></p>



<h3 class="wp-block-heading"><font>Optimization API</font></h3>



<p><font>The optimization API is built to mirror the beautiful&nbsp;</font><a href="https://github.com/deepmind/optax">Optax</a><font>&nbsp;library. Optax is literally my favorite library that’s not written in Elixir. The idea is to implement optimizers using composable higher-order functions. I highly recommend checking out the&nbsp;</font><a href="https://hexdocs.pm/axon/Axon.Updates.html">Axon.Updates</a><font>&nbsp;documentation as well as the Optax library.</font></p>



<h3 class="wp-block-heading"><font>Loop API</font></h3>



<p><font>The Loop API is an API for writing loops (like training and evaluation loops) in a functional style. Elixir is a functional language, which means we cannot take advantage of mutable state in the same way you would be able to in Python frameworks. To get around this,&nbsp;</font><code>Axon.Loop</code><font>&nbsp;constructs loops as reducers over data with some state. The API itself is inspired by the&nbsp;</font><a href="https://pytorch.org/ignite/index.html">PyTorch Ignite</a><font>&nbsp;library.</font></p>



<p><font>The Loop API is still a work-in-progress, so you should expect significant improvements in subsequent Axon releases.</font></p>



<h2 class="wp-block-heading"><font>What really is a Neural Network?</font></h2>



<p><font>There are really two interpretations of this question I’d like to explore:</font></p>



<ol><li><font>What is a neural network&nbsp;</font><em>mathematically</em><font>?</font></li><li><font>What is a neural network in the eyes of Axon?</font></li></ol>



<p><font>Mathematically a neural network is just a composition of linear and non-linear transformations with some learnable parameters. In Nx, you can implement a neural network relatively easily with&nbsp;</font><code>defn</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_531101" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defn feed_forward_network(x, w1, b1, w2, b2, w3, b3) do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">x</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">|&gt; Nx.dot(w1)</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">|&gt; Nx.add(b1)</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">|&gt; Nx.sigmoid()</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">|&gt; Nx.dot(w2)</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">|&gt; Nx.add(b2)</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">|&gt; Nx.sigmoid()</code></div><div class="line number9 index8 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">|&gt; Nx.dot(w3)</code></div><div class="line number10 index9 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">|&gt; Nx.add(b3)</code></div><div class="line number11 index10 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">|&gt; Nx.sigmoid()</code></div><div class="line number12 index11 alt1"><code class="plain plain">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>There’s really nothing more to it! Of course, implementing neural networks in Nx now introduces a lot of painful boilerplate. The goal of Axon is to abstract away the boilerplate, and make creating and training neural networks a breeze in Elixir.</font></p>



<p><font>So what is a neural network in the eyes of Axon? Axon sees a neural network as an Elixir struct:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_386910" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defstruct [</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">:id,</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">:name,</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">:output_shape,</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">:parent,</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">:parameters,</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">:args,</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">:op,</code></div><div class="line number9 index8 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">:policy,</code></div><div class="line number10 index9 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">:hooks,</code></div><div class="line number11 index10 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">:opts,</code></div><div class="line number12 index11 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">:op_name</code></div><div class="line number13 index12 alt2"><code class="plain plain">]</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Of particular importance in this struct are:&nbsp;</font><code>parent</code><font>,&nbsp;</font><code>parameters</code><font>, and&nbsp;</font><code>op</code><font>.&nbsp;</font><code>parent</code><font>&nbsp;is a list of parent networks which are also Axon structs. It’s a recursive data structure which represents a computation graph with some additional metadata relevant to specific neural network tasks.&nbsp;</font><code>parameters</code><font>&nbsp;represent a list of trainable parameters attached to this layer. They’re automatically initialized when the model is initialized, and will be part of the training process within Axon’s internal APIs.&nbsp;</font><code>op</code><font>&nbsp;is a function that’s applied on&nbsp;</font><code>parent</code><font>&nbsp;and&nbsp;</font><code>parameters</code><font>. In laymen’s terms, Axon views a neural network as just a function of other “neural networks” (Axon structs) and trainable parameters. In fact, you can “wrap” any function you want into a neural network with&nbsp;</font><code>Axon.layer</code><font>:</font></p>



<pre class="wp-block-preformatted">defn dense(input, weight, bias, _opts \\ []) do
  input
  |&gt; Nx.dot(weight)
  |&gt; Nx.add(bias)
end

input = Axon.input({nil, 32}, "features")
weight = Axon.param({32, 64}, "weight")
bias = Axon.param({64}, "bias")

Axon.layer(&amp;dense/4, [input, weight, bias])</pre>



<p><font>Notice I only had to define an&nbsp;</font><code>input</code><font>&nbsp;layer and two trainable parameters using Axon’s built-in function. Using&nbsp;</font><code>Axon.layer</code><font>&nbsp;should feel a lot like using Elixir’s&nbsp;</font><code>apply</code><font>&nbsp;— you’re just applying a function to some specialized inputs. All but a few of Axon’s built-in layers are implemented in essentially this same manner:</font></p>



<ol><li><font>Define an implementation function in&nbsp;</font><a href="https://github.com/elixir-nx/axon/blob/main/lib/axon/layers.ex">Axon.Layers</a></li><li><font>Wrap the implementation in a layer with a public interface in&nbsp;</font><a href="https://github.com/elixir-nx/axon/blob/main/lib/axon.ex">Axon</a></li></ol>



<h2 class="wp-block-heading"><font>It’s just a Graph</font></h2>



<p><font>The “magic” of Axon is its compiler, which knows how to convert Axon structs into meaningful initialization and prediction functions. Model execution comes in the form of two functions:&nbsp;</font><code>Axon.init/3</code><font>&nbsp;and&nbsp;</font><code>Axon.predict/4</code><font>.&nbsp;</font><code>Axon.init/3</code><font>&nbsp;returns a model’s initial parameters:</font></p>



<pre class="wp-block-preformatted">model = Axon.input({nil, 32}) |&gt; Axon.dense(64)

model_state = Axon.init(model)</pre>



<p><font>For prediction, you need both a model and a compatible model state:</font></p>



<pre class="wp-block-preformatted">model = Axon.input({nil, 32}) |&gt; Axon.dense(64)

model_state = Axon.init(model)
input = Nx.random_uniform({1, 32})

Axon.predict(model, model_state, input)</pre>



<p><font>Both&nbsp;</font><code>Axon.init/3</code><font>&nbsp;and&nbsp;</font><code>Axon.predict/4</code><font>&nbsp;take additional compilation options; however, it’s recommended you use global configuration rather than compilation options. For example, rather than:</font></p>



<pre class="wp-block-preformatted">Axon.predict(model, model_state, input, compiler: EXLA)</pre>



<p><font>You should use:</font></p>



<pre class="wp-block-preformatted">EXLA.set_as_nx_default([:tpu, :cuda, :rocm, :host])

Axon.predict(model, model_state, input)</pre>



<p><code>Axon.init/3</code><font>&nbsp;also optionally accepts initial parameters to initialize portions of a model from an initial state (e.g. if trying to fine-tune a model). This is where&nbsp;</font><code>Axon.namespace/2</code><font>&nbsp;comes in handy. You can “tag” a part of a model as belonging to a particular namespace, and initialize without needing to know anything about the underlying architecture:</font></p>



<pre class="wp-block-preformatted">{bert, bert_params} = get_bert_model()
bert = bert |&gt; Axon.namespace("bert")

model = bert |&gt; Axon.dense(1)

model_state = Axon.init(model, %{"bert" =&gt; bert_params})</pre>



<p><code>Axon.namespace/2</code><font>&nbsp;is one of the few layers with special meaning in Axon. There’s also&nbsp;</font><code>Axon.input/2</code><font>,&nbsp;</font><code>Axon.constant/3</code><font>, and&nbsp;</font><code>Axon.container/3</code><font>. Input layers are symbolic representations of model inputs. Each input is associated with a unique name used to reference it when passing names to a model. For example, if you have multiple inputs, you can give them semantic meanings:</font></p>



<pre class="wp-block-preformatted">text_features = Axon.input({nil, 32}, "text_features")
cat_features = Axon.input({nil, 32}, "cat_features")</pre>



<p><font>With named inputs, you don’t have to worry about passing things out of order, since you’ll always reference an input by it’s name:</font></p>



<pre class="wp-block-preformatted">model = Axon.add(text_features, cat_features)

Axon.predict(model, model_state, %{"text_features" =&gt; text_inp, "cat_features" =&gt; cat_inp})</pre>



<p><code>Axon.constant/3</code><font>&nbsp;allows you to introduce constant-values into the graph. Be warned that introducing large constants will have negative impacts on the performance of the model.</font></p>



<p><code>Axon.container/3</code><font>&nbsp;can accept any valid&nbsp;</font><a href="https://hexdocs.pm/nx/Nx.Container.html">Nx container</a><font>. This is particularly useful for giving semantic meaning to outputs:</font></p>



<pre class="wp-block-preformatted">model = Axon.container(%{
  last_hidden_state: last_hidden_state,
  pooler_output: pooler_output
})</pre>



<p><strong>Every other Axon built-in layer is treated in the same way as custom layers by the compiler.</strong><font>&nbsp;This means that (besides for the few “special layers”) there’s no difference between what you can do with a custom layer and what you can do with a built-in layer. They’re both handled&nbsp;</font><a href="https://github.com/elixir-nx/axon/blob/a859be766e52d89e1140060d1e52e79667bd6fa1/lib/axon/compiler.ex#L369">by the same clause in the Axon compiler</a><font>.</font></p>



<p><font>In the Axon interpretation of a neural network, every&nbsp;</font><em>execution</em><font>&nbsp;of a graph is seen as a&nbsp;</font><strong>specialized compilation of the graph</strong><font>. In other words, initialization and prediction are just two types of compilation. There’s nothing stopping you from implementing your own specialized compilation of an Axon graph in the same way. For example, an older version of Axon implemented a macro&nbsp;</font><code>Axon.penalty</code><font>&nbsp;which compiled a graph into a regularization function. Axon also implements the&nbsp;</font><code>Inspect</code><font>&nbsp;protocol—which itself can be seen as a symbolic compilation of the graph.</font></p>



<h2 class="wp-block-heading"><font>Maybe you don’t like my API…</font></h2>



<p><font>The Axon interpretation of a “model” is intentionally as flexible as possible. All you need to do is build a data structure. This means that if you’re not satisfied with Axon’s model creation API, you can create your own! As long as you finish with an Axon struct, your model will work with the rest of Axon’s components. The Axon struct is really the unifying data structure for every component of the Axon library. I would love to see some cool Neural Network DSLs pop-up which build off of the lower-level components Axon defines.</font></p>



<h2 class="wp-block-heading"><font>Converting to Other Formats</font></h2>



<p><font>Another benefit of the Axon data structure is portability. If you can traverse the Axon graph, you can lower or compile it into a meaningful function or representation, such as ONNX. This is exactly the functionality AxonOnnx provides—you can take a pre-trained model from popular frameworks like PyTorch and TensorFlow, convert them to ONNX, and then import them into Elixir with&nbsp;</font><code>AxonOnnx.import</code><font>. For example, you can take any of the ONNX supported models in&nbsp;</font><a href="https://huggingface.co/docs/transformers/serialization">HuggingFace Transformers</a><font>&nbsp;and import them in Axon with ease!</font></p>



<p><font>Just export the model you want:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_43466" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">$ python -m transformers.onnx --model=bert-base-cased models/</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>And load it with AxonOnnx:</font></p>



<pre class="wp-block-preformatted">{bert, bert_params} = AxonOnnx.import("path/to/bert.onnx")</pre>



<p><font>The ability to import and use external models is an absolute&nbsp;</font><em>must</em><font>&nbsp;for any Neural network library (especially given the pace of progress in deep learning). AxonOnnx enables Elixir programmers to utilize pre-trained models from the Python ecosystem without needing to implement or train them from scratch.</font></p>



<p><font>This also means you can integrate some pretty cool pre-trained models with established projects like Phoenix and LiveView. For example </font><a href="https://github.com/thehaigo/live_onnx">live_onnx</a><font>, implements a sample ML application using AxonOnnx and LiveView.</font></p>



<p><font>You should note that we are still actively working to enable support for all of ONNX’s operations. If you have a model you’d like to see supported, please feel free to open an issue or a PR </font><img draggable="false" role="img" class="emoji" alt="🙂" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/svg/1f642.svg" scale="0"></p>



<h2 class="wp-block-heading"><font>Future Work</font></h2>



<p><font>If you look at the&nbsp;</font><a href="https://github.com/elixir-nx/axon/issues">issues tracker</a><font>&nbsp;you’ll notice there’s still much work to be done; however, the core components of Axon are at a stable point. This means you can use Axon with a reasonable expectation of stability. Moving forward, you can expect the following from Axon:</font></p>



<ul><li><font>First-class transformer model support</font></li><li><font>More integration with&nbsp;</font><a href="https://livebook.dev/">Livebook</a></li><li><font>Mixed precision training</font></li><li><font>Multi-device training</font></li></ul>



<p><font>Additionally, I’d like to build out a large collection of Axon examples. If you are looking for a place to get started in the Nx ecosystem, please feel free to open a pull request which demonstrates Axon applied to a unique problem set. If you’re looking for inspiration, check out&nbsp;</font><a href="https://keras.io/examples/">Keras Examples</a><font>.</font></p>



<h2 class="wp-block-heading"><font>Acknowledgements</font></h2>



<p><font>I am very grateful to&nbsp;</font><a href="https://dockyard.com/">DockYard</a><font>&nbsp;and their support of the Elixir Machine Learning Ecosystem from the beginning. Additionally, Axon would not be where it is today without the hard work of all of the Nx contributors and the individuals Erlang Ecosystem Foundation ML WG. The Elixir community is nothing short of amazing, and I hope Axon can play a small part in seeing the community grow.</font></p>



<h2 class="wp-block-heading"><a href="https://gist.github.com/josevalim/8c1fcee737f28ca188ebfb020540536c#functional-api"></a></h2>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-421" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-421" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-175065622-421-642fc90e12ef8" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=421&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-421-642fc90e12ef8&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-421-642fc90e12ef8" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-175065622-421-642fc90e12ef8" src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=421&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-421-642fc90e12ef8&amp;domain=seanmoriarity.com" height="55px" width="100%" frameborder="0" scrolling="no" title="Like or Reblog"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="285" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/" title="Axon: Deep Learning in&amp;nbsp;Elixir" data-origin="421" data-position="0">Axon: Deep Learning in&nbsp;Elixir</a></span><time class="jp-relatedposts-post-date" datetime="April 8, 2021" style="display: block;">April 8, 2021</time><span class="jp-relatedposts-post-context"><font>In "projects"</font></span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="386" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2022/02/07/nx-tip-of-the-week-12-nx-to_heatmap/" title="Nx Tip of the Week #12 &amp;#8211;&amp;nbsp;Nx.to_heatmap" data-origin="421" data-position="1">Nx Tip of the Week #12 –&nbsp;Nx.to_heatmap</a></span><time class="jp-relatedposts-post-date" datetime="February 7, 2022" style="display: block;">February 7, 2022</time><span class="jp-relatedposts-post-context"></span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="319" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/" title="Nx Tip of the Week #7 &amp;#8211; Using&amp;nbsp;Nx.Defn.jit" data-origin="421" data-position="2">Nx Tip of the Week #7 – Using&nbsp;Nx.Defn.jit</a></span><time class="jp-relatedposts-post-date" datetime="April 15, 2021" style="display: block;">April 15, 2021</time><span class="jp-relatedposts-post-context"><font>In "nx totw"</font></span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
		<ul class="post-tags light-text"><li><font>Tagged</font></li><li><a href="https://seanmoriarity.com/tag/axon/" rel="tag">axon</a></li><li><a href="https://seanmoriarity.com/tag/deep-learning/" rel="tag">deep learning</a></li><li><a href="https://seanmoriarity.com/tag/elixir/" rel="tag">elixir</a></li></ul><!-- .post-tags -->	</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published updated" datetime="2022-06-16T07:50:08-04:00">June 16, 2022</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2022/02/21/nx-tip-of-the-week-14-slicing-and-indexing/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Nx Tip of the Week #14 – Slicing and&nbsp;Indexing</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2023/02/16/streaming-gpt-3-responses-with-elixir-and-liveview/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Streaming GPT-3 Responses with Elixir and&nbsp;LiveView</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
			<h2 class="comments-title"><font>
			One thought on “</font><span>JIT/GPU accelerated deep learning for Elixir with Axon&nbsp;v0.1</span><font>”		</font></h2><!-- .comments-title -->

		
		<ol class="comment-list">
					<li id="comment-177" class="pingback even thread-even depth-1 highlander-comment">
			<div class="comment-body"><font>
				Pingback: </font><a href="https://javilopezg.com/tech-roundup-146/" class="url" rel="ugc external nofollow">Tech roundup 146: a journal published by a bot - Javi López G.</a> 			</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="f5d293acf6"><input type="hidden" name="_wp_http_referer" value="/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=41&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" originals="25" src-orig="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-0">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-1">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="421" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="8e8eef972e"></p>
<input type="hidden" name="genseq" value="1680853262">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680853261685"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2023/02/16/streaming-gpt-3-responses-with-elixir-and-liveview/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-436" class="post-436 post type-post status-publish format-standard hentry category-uncategorized">
			<header class="entry-header">
			<h1 class="entry-title"><font>Streaming GPT-3 Responses with Elixir and&nbsp;LiveView</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published updated" datetime="2023-02-16T15:40:26-05:00">February 16, 2023</time>			</span>

			<span class="word-count">4 Minutes</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><font>I was recently messing around with the GPT-3 API and wanted to recreate the streaming generation effect that OpenAI has implemented with ChatGPT in a LiveView. I’m not sure if this the best way to do it, but it works!</font></p>



<h2 class="wp-block-heading"><font>Streaming GPT-3 API Responses</font></h2>



<p><font>If you’ve worked with the GPT-3 API in the past (especially the larger models), request latency can be a significant detriment to user experience. One way to overcome this is taking advantage of GPT-3’s ability to stream tokens in batches as data-only server-sent events.</font></p>



<p><font>After a bit of digging, I found this </font><a href="https://www.poeticoding.com/elixir-streams-to-process-large-http-responses-on-the-fly/">article</a><font> for using HTTPoison to stream large HTTP responses. Fortunately, this same paradigm works for streaming server-sent events from the OpenAI API. We can rework the logic in the linked article to convert OpenAI responses into streams of tokens:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_912236" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div><div class="line number23 index22 alt2"><font>23</font></div><div class="line number24 index23 alt1"><font>24</font></div><div class="line number25 index24 alt2"><font>25</font></div><div class="line number26 index25 alt1"><font>26</font></div><div class="line number27 index26 alt2"><font>27</font></div><div class="line number28 index27 alt1"><font>28</font></div><div class="line number29 index28 alt2"><font>29</font></div><div class="line number30 index29 alt1"><font>30</font></div><div class="line number31 index30 alt2"><font>31</font></div><div class="line number32 index31 alt1"><font>32</font></div><div class="line number33 index32 alt2"><font>33</font></div><div class="line number34 index33 alt1"><font>34</font></div><div class="line number35 index34 alt2"><font>35</font></div><div class="line number36 index35 alt1"><font>36</font></div><div class="line number37 index36 alt2"><font>37</font></div><div class="line number38 index37 alt1"><font>38</font></div><div class="line number39 index38 alt2"><font>39</font></div><div class="line number40 index39 alt1"><font>40</font></div><div class="line number41 index40 alt2"><font>41</font></div><div class="line number42 index41 alt1"><font>42</font></div><div class="line number43 index42 alt2"><font>43</font></div><div class="line number44 index43 alt1"><font>44</font></div><div class="line number45 index44 alt2"><font>45</font></div><div class="line number46 index45 alt1"><font>46</font></div><div class="line number47 index46 alt2"><font>47</font></div><div class="line number48 index47 alt1"><font>48</font></div><div class="line number49 index48 alt2"><font>49</font></div><div class="line number50 index49 alt1"><font>50</font></div><div class="line number51 index50 alt2"><font>51</font></div><div class="line number52 index51 alt1"><font>52</font></div><div class="line number53 index52 alt2"><font>53</font></div><div class="line number54 index53 alt1"><font>54</font></div><div class="line number55 index54 alt2"><font>55</font></div><div class="line number56 index55 alt1"><font>56</font></div><div class="line number57 index56 alt2"><font>57</font></div><div class="line number58 index57 alt1"><font>58</font></div><div class="line number59 index58 alt2"><font>59</font></div><div class="line number60 index59 alt1"><font>60</font></div><div class="line number61 index60 alt2"><font>61</font></div><div class="line number62 index61 alt1"><font>62</font></div><div class="line number63 index62 alt2"><font>63</font></div><div class="line number64 index63 alt1"><font>64</font></div><div class="line number65 index64 alt2"><font>65</font></div><div class="line number66 index65 alt1"><font>66</font></div><div class="line number67 index66 alt2"><font>67</font></div><div class="line number68 index67 alt1"><font>68</font></div><div class="line number69 index68 alt2"><font>69</font></div><div class="line number70 index69 alt1"><font>70</font></div><div class="line number71 index70 alt2"><font>71</font></div><div class="line number72 index71 alt1"><font>72</font></div><div class="line number73 index72 alt2"><font>73</font></div><div class="line number74 index73 alt1"><font>74</font></div><div class="line number75 index74 alt2"><font>75</font></div><div class="line number76 index75 alt1"><font>76</font></div><div class="line number77 index76 alt2"><font>77</font></div><div class="line number78 index77 alt1"><font>78</font></div><div class="line number79 index78 alt2"><font>79</font></div><div class="line number80 index79 alt1"><font>80</font></div><div class="line number81 index80 alt2"><font>81</font></div><div class="line number82 index81 alt1"><font>82</font></div><div class="line number83 index82 alt2"><font>83</font></div><div class="line number84 index83 alt1"><font>84</font></div><div class="line number85 index84 alt2"><font>85</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defmodule </code><code class="erlang constants">StreamingText</code><code class="erlang plain">.</code><code class="erlang constants">OpenAI</code> <code class="erlang plain">do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">require </code><code class="erlang constants">Logger</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">def stream(prompt) do</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">url = </code><code class="erlang string">"<a href="https://api.openai.com/v1/completions">https://api.openai.com/v1/completions</a>"</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">body = </code><code class="erlang constants">Jason</code><code class="erlang plain">.encode!(body(prompt, true))</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">headers = headers()</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">Stream</code><code class="erlang plain">.resource(</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">fn -&gt; </code><code class="erlang constants">HTTPoison</code><code class="erlang plain">.post!(url, body, headers, stream_to: self(), async: :once) </code><code class="erlang keyword">end</code><code class="erlang plain">,</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&amp;handle_async_response/1,</code></div><div class="line number13 index12 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&amp;close_async_response/1</code></div><div class="line number14 index13 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">)</code></div><div class="line number15 index14 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">defp close_async_response(resp) do</code></div><div class="line number18 index17 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">:hackney.stop_async(resp)&nbsp;&nbsp;&nbsp; </code></div><div class="line number19 index18 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">defp handle_async_response({:done, resp}) do</code></div><div class="line number22 index21 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{:halt, resp}</code></div><div class="line number23 index22 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">defp handle_async_response(</code><code class="erlang comments">%HTTPoison.AsyncResponse{id: id} = resp) do</code></div><div class="line number26 index25 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">receive</code> <code class="erlang plain">do</code></div><div class="line number27 index26 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang comments">%HTTPoison.AsyncStatus{id: ^id, code: code} -&gt;</code></div><div class="line number28 index27 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">Logger</code><code class="erlang plain">.info(</code><code class="erlang string">"openai,request,status,#{inspect(code)}"</code><code class="erlang plain">)</code></div><div class="line number29 index28 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">HTTPoison</code><code class="erlang plain">.stream_next(resp)</code></div><div class="line number30 index29 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{[], resp}</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang comments">%HTTPoison.AsyncHeaders{id: ^id, headers: headers} -&gt;</code></div><div class="line number33 index32 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">Logger</code><code class="erlang plain">.info(</code><code class="erlang string">"openai,request,headers,#{inspect(headers)}"</code><code class="erlang plain">)</code></div><div class="line number34 index33 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">HTTPoison</code><code class="erlang plain">.stream_next(resp)</code></div><div class="line number35 index34 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{[], resp}</code></div><div class="line number36 index35 alt1">&nbsp;</div><div class="line number37 index36 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang comments">%HTTPoison.AsyncChunk{id: ^id, chunk: chunk} -&gt;</code></div><div class="line number38 index37 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">HTTPoison</code><code class="erlang plain">.stream_next(resp)</code></div><div class="line number39 index38 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">parse_chunk(chunk, resp)</code></div><div class="line number40 index39 alt1">&nbsp;</div><div class="line number41 index40 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang comments">%HTTPoison.AsyncEnd{id: ^id} -&gt;</code></div><div class="line number42 index41 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{:halt, resp}</code></div><div class="line number43 index42 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number44 index43 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number45 index44 alt2">&nbsp;</div><div class="line number46 index45 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">defp parse_chunk(chunk, resp) do</code></div><div class="line number47 index46 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{chunk, done?} =</code></div><div class="line number48 index47 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">chunk</code></div><div class="line number49 index48 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">String</code><code class="erlang plain">.split(</code><code class="erlang string">"data:"</code><code class="erlang plain">)</code></div><div class="line number50 index49 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.map(&amp;</code><code class="erlang constants">String</code><code class="erlang plain">.trim/1)</code></div><div class="line number51 index50 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.reject(&amp;(&amp;1 == </code><code class="erlang string">""</code><code class="erlang plain">))</code></div><div class="line number52 index51 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.reduce({</code><code class="erlang string">""</code><code class="erlang plain">, false}, fn trimmed, {chunk, is_done?} -&gt;</code></div><div class="line number53 index52 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">case</code> <code class="erlang constants">Jason</code><code class="erlang plain">.decode(trimmed) do</code></div><div class="line number54 index53 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{:ok, </code><code class="erlang comments">%{"choices" =&gt; [%{"text" =&gt; text}]}} -&gt;</code></div><div class="line number55 index54 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{chunk &lt;&gt; text, is_done? </code><code class="erlang keyword">or</code> <code class="erlang plain">false}</code></div><div class="line number56 index55 alt1">&nbsp;</div><div class="line number57 index56 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{:error, </code><code class="erlang comments">%{data: "[DONE]"}} -&gt;</code></div><div class="line number58 index57 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{chunk, is_done? </code><code class="erlang keyword">or</code> <code class="erlang plain">true}</code></div><div class="line number59 index58 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number60 index59 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">end</code><code class="erlang plain">)</code></div><div class="line number61 index60 alt2">&nbsp;</div><div class="line number62 index61 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">if</code> <code class="erlang plain">done? do</code></div><div class="line number63 index62 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{[chunk], {:done, resp}}</code></div><div class="line number64 index63 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">else</code></div><div class="line number65 index64 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{[chunk], resp}</code></div><div class="line number66 index65 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number67 index66 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number68 index67 alt1">&nbsp;</div><div class="line number69 index68 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">defp headers() do</code></div><div class="line number70 index69 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number71 index70 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">Accept</code><code class="erlang plain">: </code><code class="erlang string">"application/json"</code><code class="erlang plain">,</code></div><div class="line number72 index71 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang string">"Content-Type"</code><code class="erlang plain">: </code><code class="erlang string">"application/json"</code><code class="erlang plain">,</code></div><div class="line number73 index72 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">Authorization</code><code class="erlang plain">: </code><code class="erlang string">"Bearer #{System.get_env("</code><code class="erlang constants">OPENAI_API_KEY</code><code class="erlang string">")}"</code></div><div class="line number74 index73 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number75 index74 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number76 index75 alt1">&nbsp;</div><div class="line number77 index76 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">defp body(prompt, streaming?) do</code></div><div class="line number78 index77 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang comments">%{</code></div><div class="line number79 index78 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">model: </code><code class="erlang string">"text-davinci-003"</code><code class="erlang plain">,</code></div><div class="line number80 index79 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">prompt: prompt,</code></div><div class="line number81 index80 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">stream: streaming?,</code></div><div class="line number82 index81 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">max_tokens: 1024</code></div><div class="line number83 index82 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">}</code></div><div class="line number84 index83 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number85 index84 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>This logic more-or-less follows from the article; however, we need some special logic for handling data returned from the API. Each event from the API is prefixed with a </font><code>data: &lt;data&gt;</code><font> where </font><code>&lt;data&gt;</code><font> can be </font><code>[DONE]</code><font> or JSON data. During my experiments, I noticed that at times the stream receives multiple messages at once, so just calling </font><code>Jason.decode!</code><font> on the response will break. </font><code>parse_chunk/2</code><font> splits responses on data and then handles both additional tokens and termination tokens.</font></p>



<h2 class="wp-block-heading"><font>Streaming Text in LiveView</font></h2>



<p><font>The </font><code>stream/1</code><font> function returns a stream from an HTTP request to the OpenAI API. We can use this stream in a LiveView to render the stream as the API returns tokens. Start by adding a new live route:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_782581" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">live </code><code class="erlang string">"/answer"</code><code class="erlang plain">, </code><code class="erlang constants">AnswerLive</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>In a new LiveView, add the following </font><code>mount</code><font> and </font><code>render</code><font> callbacks:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_250776" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div><div class="line number23 index22 alt2"><font>23</font></div><div class="line number24 index23 alt1"><font>24</font></div><div class="line number25 index24 alt2"><font>25</font></div><div class="line number26 index25 alt1"><font>26</font></div><div class="line number27 index26 alt2"><font>27</font></div><div class="line number28 index27 alt1"><font>28</font></div><div class="line number29 index28 alt2"><font>29</font></div><div class="line number30 index29 alt1"><font>30</font></div><div class="line number31 index30 alt2"><font>31</font></div><div class="line number32 index31 alt1"><font>32</font></div><div class="line number33 index32 alt2"><font>33</font></div><div class="line number34 index33 alt1"><font>34</font></div><div class="line number35 index34 alt2"><font>35</font></div><div class="line number36 index35 alt1"><font>36</font></div><div class="line number37 index36 alt2"><font>37</font></div><div class="line number38 index37 alt1"><font>38</font></div><div class="line number39 index38 alt2"><font>39</font></div><div class="line number40 index39 alt1"><font>40</font></div><div class="line number41 index40 alt2"><font>41</font></div><div class="line number42 index41 alt1"><font>42</font></div><div class="line number43 index42 alt2"><font>43</font></div><div class="line number44 index43 alt1"><font>44</font></div><div class="line number45 index44 alt2"><font>45</font></div><div class="line number46 index45 alt1"><font>46</font></div><div class="line number47 index46 alt2"><font>47</font></div><div class="line number48 index47 alt1"><font>48</font></div><div class="line number49 index48 alt2"><font>49</font></div><div class="line number50 index49 alt1"><font>50</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defmodule </code><code class="erlang constants">StreamingTextWeb</code><code class="erlang plain">.</code><code class="erlang constants">AnswerLive</code> <code class="erlang plain">do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">use </code><code class="erlang constants">StreamingTextWeb</code><code class="erlang plain">, :live_view</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">import</code> <code class="erlang constants">StreamingTextWeb</code><code class="erlang plain">.</code><code class="erlang constants">CoreComponents</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">@impl true</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">def mount(_session, _params, socket) do</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">socket =</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">socket</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; assign(:question, </code><code class="erlang string">""</code><code class="erlang plain">)</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; assign(:answer, </code><code class="erlang string">""</code><code class="erlang plain">)</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; assign(:state, :waiting_for_question)</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{:ok, socket}</code></div><div class="line number15 index14 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">@impl true</code></div><div class="line number18 index17 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">def render(assigns) do</code></div><div class="line number19 index18 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">~H</code><code class="erlang string">""</code><code class="erlang plain">"</code></div><div class="line number20 index19 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&lt;</code><code class="erlang keyword">div</code> <code class="erlang plain">class=</code><code class="erlang string">"flex flex-col max-w-4xl min-h-screen items-center"</code><code class="erlang plain">&gt;</code></div><div class="line number21 index20 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&lt;h1 class=</code><code class="erlang string">"text-2xl"</code><code class="erlang plain">&gt;</code><code class="erlang constants">Ask</code> <code class="erlang constants">Me</code> <code class="erlang constants">Anything</code><code class="erlang plain">&lt;/h1&gt;</code></div><div class="line number22 index21 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&lt;.simple_form</code></div><div class="line number23 index22 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">for={</code><code class="erlang comments">%{}}</code></div><div class="line number24 index23 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">as={:question}</code></div><div class="line number25 index24 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">:</code><code class="erlang keyword">let</code><code class="erlang plain">={f}</code></div><div class="line number26 index25 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">phx-submit=</code><code class="erlang string">"answer_question"</code></div><div class="line number27 index26 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">class=</code><code class="erlang string">"w-full"</code></div><div class="line number28 index27 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&gt;</code></div><div class="line number29 index28 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&lt;.input</code></div><div class="line number30 index29 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">disabled={@state != :waiting_for_question}</code></div><div class="line number31 index30 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">field={{f, :question}}</code></div><div class="line number32 index31 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">value={@question}</code></div><div class="line number33 index32 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">type=</code><code class="erlang string">"text"</code></div><div class="line number34 index33 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">/&gt;</code></div><div class="line number35 index34 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&lt;.button</code></div><div class="line number36 index35 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">type=</code><code class="erlang string">"submit"</code></div><div class="line number37 index36 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">disabled={@state != :waiting_for_question}</code></div><div class="line number38 index37 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">phx-disabled-with=</code><code class="erlang string">"Answering..."</code></div><div class="line number39 index38 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&gt;</code></div><div class="line number40 index39 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">Answer</code> <code class="erlang constants">Question</code></div><div class="line number41 index40 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&lt;/.button&gt;</code></div><div class="line number42 index41 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&lt;/.simple_form&gt;</code></div><div class="line number43 index42 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&lt;</code><code class="erlang keyword">div</code> <code class="erlang plain">class=</code><code class="erlang string">"mt-4 text-md"</code><code class="erlang plain">&gt;</code></div><div class="line number44 index43 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&lt;p&gt;&lt;span class=</code><code class="erlang string">"font-semibold"</code><code class="erlang plain">&gt;</code><code class="erlang constants">Question</code><code class="erlang plain">:&lt;/span&gt; &lt;</code><code class="erlang comments">%= @question %&gt;&lt;/p&gt;</code></div><div class="line number45 index44 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&lt;p&gt;&lt;span class=</code><code class="erlang string">"font-semibold"</code><code class="erlang plain">&gt;</code><code class="erlang constants">Answer</code><code class="erlang plain">:&lt;/span&gt;&lt;</code><code class="erlang comments">%= @answer %&gt;&lt;/p&gt;</code></div><div class="line number46 index45 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&lt;/</code><code class="erlang keyword">div</code><code class="erlang plain">&gt;</code></div><div class="line number47 index46 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&lt;/</code><code class="erlang keyword">div</code><code class="erlang plain">&gt;</code></div><div class="line number48 index47 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang string">""</code><code class="erlang plain">"</code></div><div class="line number49 index48 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number50 index49 alt1"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>This will create a simple form which we can use to submit queries to GPT-3 and stream responses back. Next, add the following event handler to handle form submission:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_962602" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">@impl true</code></div><div class="line number2 index1 alt1"><code class="erlang plain">def handle_event(</code><code class="erlang string">"answer_question"</code><code class="erlang plain">, </code><code class="erlang comments">%{"question" =&gt; %{"question" =&gt; question}}, socket) do</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">prompt = prompt(question)</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">stream = </code><code class="erlang constants">StreamingText</code><code class="erlang plain">.</code><code class="erlang constants">OpenAI</code><code class="erlang plain">.stream(prompt)</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">socket =</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">socket</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; assign(:question, question)</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; assign(:state, :answering_question)</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; assign(:response_task, stream_response(stream))</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">{:noreply, socket}</code></div><div class="line number13 index12 alt2"><code class="erlang keyword">end</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="erlang plain">defp prompt(question) do</code></div><div class="line number16 index15 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang string">""</code><code class="erlang plain">"</code></div><div class="line number17 index16 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Answer</code> <code class="erlang plain">the following question.</code></div><div class="line number18 index17 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Question</code><code class="erlang plain">: #{question}</code></div><div class="line number19 index18 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Answer</code><code class="erlang plain">:</code></div><div class="line number20 index19 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang string">""</code><code class="erlang plain">"</code></div><div class="line number21 index20 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>This will build a prompt, create a response stream, change the current state and invoke a </font><code>stream_response/1</code><font> function and assign the result to </font><code>:response_task</code><font>. Next, implement </font><code>stream_response/1</code><font> like this:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_883414" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defp stream_response(stream) do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">target = self()</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Task</code><code class="erlang plain">.</code><code class="erlang constants">Supervisor</code><code class="erlang plain">.async(</code><code class="erlang constants">StreamingText</code><code class="erlang plain">.</code><code class="erlang constants">TaskSupervisor</code><code class="erlang plain">, fn -&gt;</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">for chunk &lt;- stream, into: &lt;&lt;&gt;&gt; do</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">send(target, {:render_response_chunk, chunk})</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">chunk</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code><code class="erlang plain">)</code></div><div class="line number10 index9 alt1"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>This will spin up a new task to consume the OpenAI stream and send chunks to the LiveView process. You’ll need to start your task supervisor to your supervision tree:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_657925" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">children = [</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain"># </code><code class="erlang constants">Start</code> <code class="erlang plain">the </code><code class="erlang constants">Telemetry</code> <code class="erlang plain">supervisor</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">StreamingTextWeb</code><code class="erlang plain">.</code><code class="erlang constants">Telemetry</code><code class="erlang plain">,</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain"># </code><code class="erlang constants">Start</code> <code class="erlang plain">the </code><code class="erlang constants">Ecto</code> <code class="erlang plain">repository</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">StreamingText</code><code class="erlang plain">.</code><code class="erlang constants">Repo</code><code class="erlang plain">,</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain"># </code><code class="erlang constants">Start</code> <code class="erlang plain">the </code><code class="erlang constants">PubSub</code> <code class="erlang plain">system</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">{</code><code class="erlang constants">Phoenix</code><code class="erlang plain">.</code><code class="erlang constants">PubSub</code><code class="erlang plain">, name: </code><code class="erlang constants">StreamingText</code><code class="erlang plain">.</code><code class="erlang constants">PubSub</code><code class="erlang plain">},</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain"># </code><code class="erlang constants">Start</code> <code class="erlang constants">Finch</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">{</code><code class="erlang constants">Finch</code><code class="erlang plain">, name: </code><code class="erlang constants">StreamingText</code><code class="erlang plain">.</code><code class="erlang constants">Finch</code><code class="erlang plain">},</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">{</code><code class="erlang constants">Task</code><code class="erlang plain">.</code><code class="erlang constants">Supervisor</code><code class="erlang plain">, name: </code><code class="erlang constants">StreamingText</code><code class="erlang plain">.</code><code class="erlang constants">TaskSupervisor</code><code class="erlang plain">},</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain"># </code><code class="erlang constants">Start</code> <code class="erlang plain">the </code><code class="erlang constants">Endpoint</code> <code class="erlang plain">(http/https)</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">StreamingTextWeb</code><code class="erlang plain">.</code><code class="erlang constants">Endpoint</code></div><div class="line number13 index12 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain"># </code><code class="erlang constants">Start</code> <code class="erlang plain">a worker by calling: </code><code class="erlang constants">StreamingText</code><code class="erlang plain">.</code><code class="erlang constants">Worker</code><code class="erlang plain">.start_link(arg)</code></div><div class="line number14 index13 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain"># {</code><code class="erlang constants">StreamingText</code><code class="erlang plain">.</code><code class="erlang constants">Worker</code><code class="erlang plain">, arg}</code></div><div class="line number15 index14 alt2"><code class="erlang plain">]</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Next, you need to handle the </font><code>:render_response_chunk</code><font> messages:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_954915" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">@impl true</code></div><div class="line number2 index1 alt1"><code class="erlang plain">def handle_info({:render_response_chunk, chunk}, socket) do</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">answer = socket.assigns.answer &lt;&gt; chunk</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">{:noreply, assign(socket, :answer, answer)}</code></div><div class="line number5 index4 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>This will receive the </font><code>:render_response_chunk</code><font> messages and append the next chunk to the current answer, which will then re-render in the browser. Finally, you need to await on the result of the task in a separate handler:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_217120" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">def handle_info({ref, answer}, socket) </code><code class="erlang keyword">when</code> <code class="erlang plain">socket.assigns.response_task.ref == ref do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">socket =</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">socket</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; assign(:answer, answer)</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; assign(:state, :waiting_for_question)</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">{:noreply, socket}</code></div><div class="line number8 index7 alt1"><code class="erlang keyword">end</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="erlang plain">def handle_info(_message, socket) do</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">{:noreply, socket}</code></div><div class="line number12 index11 alt1"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>And that’s all you need. Now you can open the browser and try it out:</font></p>



<figure class="wp-block-image size-large"><img data-attachment-id="442" data-permalink="https://seanmoriarity.com/2023/02/16/streaming-gpt-3-responses-with-elixir-and-liveview/streaminggpt3/" data-orig-file="https://seanmoriaritycom.files.wordpress.com/2023/02/streaminggpt3.gif" data-orig-size="2794,1666" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="streaminggpt3" data-image-description="" data-image-caption="" data-medium-file="https://seanmoriaritycom.files.wordpress.com/2023/02/streaminggpt3.gif?w=300" data-large-file="https://seanmoriaritycom.files.wordpress.com/2023/02/streaminggpt3.gif?w=1024" src="https://seanmoriaritycom.files.wordpress.com/2023/02/streaminggpt3.gif?w=740" alt="" class="wp-image-442" width="740" height="441" srcset="https://seanmoriaritycom.files.wordpress.com/2023/02/streaminggpt3.gif?w=740&amp;zoom=2 1.5x" src-orig="https://seanmoriaritycom.files.wordpress.com/2023/02/streaminggpt3.gif?w=1024" scale="1.5"></figure>



<p><font>Success!</font></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-436" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2023/02/16/streaming-gpt-3-responses-with-elixir-and-liveview/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-436" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2023/02/16/streaming-gpt-3-responses-with-elixir-and-liveview/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-175065622-436-6430071a9acce" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=436&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-436-6430071a9acce&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-436-6430071a9acce" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-175065622-436-6430071a9acce" src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=436&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-436-6430071a9acce&amp;domain=seanmoriarity.com" height="55px" width="100%" frameborder="0" scrolling="no" title="Like or Reblog"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="421" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/" title="JIT/GPU accelerated deep learning for Elixir with Axon&amp;nbsp;v0.1" data-origin="436" data-position="0">JIT/GPU accelerated deep learning for Elixir with Axon&nbsp;v0.1</a></span><time class="jp-relatedposts-post-date" datetime="June 16, 2022" style="display: block;">June 16, 2022</time><span class="jp-relatedposts-post-context">In "axon"</span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="285" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/" title="Axon: Deep Learning in&amp;nbsp;Elixir" data-origin="436" data-position="1">Axon: Deep Learning in&nbsp;Elixir</a></span><time class="jp-relatedposts-post-date" datetime="April 8, 2021" style="display: block;">April 8, 2021</time><span class="jp-relatedposts-post-context">In "projects"</span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="319" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/" title="Nx Tip of the Week #7 &amp;#8211; Using&amp;nbsp;Nx.Defn.jit" data-origin="436" data-position="2">Nx Tip of the Week #7 – Using&nbsp;Nx.Defn.jit</a></span><time class="jp-relatedposts-post-date" datetime="April 15, 2021" style="display: block;">April 15, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
			</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published updated" datetime="2023-02-16T15:40:26-05:00">February 16, 2023</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> JIT/GPU accelerated deep learning for Elixir with Axon&nbsp;v0.1</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
			<h2 class="comments-title"><font>
			One thought on “</font><span>Streaming GPT-3 Responses with Elixir and&nbsp;LiveView</span><font>”		</font></h2><!-- .comments-title -->

		
		<ol class="comment-list">
					<li id="comment-334" class="comment byuser comment-author-straightupskincare even thread-even depth-1 highlander-comment">
			<article id="div-comment-334" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="https://1.gravatar.com/avatar/4195e07f5d0c67517ce56691586607c5?s=72&amp;d=identicon&amp;r=G" class="avatar avatar-48 grav-hashed grav-hijack" height="48" width="48" id="grav-4195e07f5d0c67517ce56691586607c5-0" originals="48" src-orig="https://1.gravatar.com/avatar/4195e07f5d0c67517ce56691586607c5?s=48&amp;d=identicon&amp;r=G" scale="1.5">						<b class="fn"><a href="http://straightupskincare.wordpress.com" class="url" rel="ugc external nofollow">skinbyrileyb</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://seanmoriarity.com/2023/02/16/streaming-gpt-3-responses-with-elixir-and-liveview/#comment-334"><time datetime="2023-02-16T22:01:34-05:00">February 16, 2023 at 10:01 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p><font>Nice</font></p>
<p id="comment-like-334" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://seanmoriarity.com/2023/02/16/streaming-gpt-3-responses-with-elixir-and-liveview/?like_comment=334&amp;_wpnonce=d6cdfcdf07" class="comment-like-link needs-login" rel="nofollow" data-blog="175065622"><span>Like</span></a><span id="comment-like-count-334" class="comment-like-feedback"><font>Like</font></span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://seanmoriarity.com/2023/02/16/streaming-gpt-3-responses-with-elixir-and-liveview/?replytocom=334#respond" data-commentid="334" data-postid="436" data-belowelement="div-comment-334" data-respondelement="respond" data-replyto="Reply to skinbyrileyb" aria-label="Reply to skinbyrileyb">Reply</a></div>			</article><!-- .comment-body -->
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2023/02/16/streaming-gpt-3-responses-with-elixir-and-liveview/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2023/02/16/streaming-gpt-3-responses-with-elixir-and-liveview/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-0" originals="25" scale="1.5">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-1" originals="25" scale="1.5">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-2" originals="25" scale="1.5">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="436" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="f18a9b3267"></p>
<input type="hidden" name="genseq" value="1680869146">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869145833"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/author/seanmoriarity/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			<header class="page-header">
				<h1 class="page-title"><font>Author: </font><span>seanmoriarity</span></h1>			</header><!-- .page-header -->

						
				
<article id="post-436" class="post-436 post type-post status-publish format-standard hentry category-uncategorized">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2023/02/16/streaming-gpt-3-responses-with-elixir-and-liveview/" rel="bookmark">Streaming GPT-3 Responses with Elixir and&nbsp;LiveView</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>I was recently messing around with the GPT-3 API and wanted to recreate the streaming generation effect that OpenAI has implemented with ChatGPT in a LiveView. I'm not sure if this the best way to do it, but it works! Streaming GPT-3 API Responses If you've worked with the GPT-3 API in the past (especially … </font><a href="https://seanmoriarity.com/2023/02/16/streaming-gpt-3-responses-with-elixir-and-liveview/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Streaming GPT-3 Responses with Elixir and&nbsp;LiveView</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2023/02/16/streaming-gpt-3-responses-with-elixir-and-liveview/#comments">1 Comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2023/02/16/streaming-gpt-3-responses-with-elixir-and-liveview/" rel="bookmark"><time class="entry-date published updated" datetime="2023-02-16T15:40:26-05:00">February 16, 2023</time></a>
							</span>

			<span class="word-count">4 Minutes</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

			
				
<article id="post-421" class="post-421 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-axon tag-deep-learning tag-elixir">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/" rel="bookmark">JIT/GPU accelerated deep learning for Elixir with Axon&nbsp;v0.1</a></h1>		</header><!-- .entry-header -->	<div class="post-image-link"><a rel="bookmark" href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/"><img width="1100" height="445" src="https://seanmoriaritycom.files.wordpress.com/2022/06/axon.png?w=1100" class="attachment-independent-publisher-2-full-width size-independent-publisher-2-full-width wp-post-image" alt="" decoding="async" loading="lazy" srcset="https://seanmoriaritycom.files.wordpress.com/2022/06/axon.png?w=1100 1100w, https://seanmoriaritycom.files.wordpress.com/2022/06/axon.png?w=2200 2200w, https://seanmoriaritycom.files.wordpress.com/2022/06/axon.png?w=150 150w, https://seanmoriaritycom.files.wordpress.com/2022/06/axon.png?w=300 300w, https://seanmoriaritycom.files.wordpress.com/2022/06/axon.png?w=768 768w, https://seanmoriaritycom.files.wordpress.com/2022/06/axon.png?w=1024 1024w" sizes="(max-width: 1100px) 100vw, 1100px" data-attachment-id="434" data-permalink="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/axon/" data-orig-file="https://seanmoriaritycom.files.wordpress.com/2022/06/axon.png" data-orig-size="2969,1200" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="axon" data-image-description="" data-image-caption="" data-medium-file="https://seanmoriaritycom.files.wordpress.com/2022/06/axon.png?w=300" data-large-file="https://seanmoriaritycom.files.wordpress.com/2022/06/axon.png?w=1024"></a></div><!-- .post-image-link -->
	<div class="entry-content">
		<p><font>I am excited to announce the official v0.1.0 release of&nbsp;Axon&nbsp;and&nbsp;AxonOnnx. A lot has changed (and improved) since the initial&nbsp;public announcement of Axon. In this post I will explore Axon and its internals, and give reasoning for some of the design decisions made along the way. You can view the official documentation here: AxonAxonOnnx What is … </font><a href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">JIT/GPU accelerated deep learning for Elixir with Axon&nbsp;v0.1</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/#comments">1 Comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/" rel="bookmark"><time class="entry-date published updated" datetime="2022-06-16T07:50:08-04:00">June 16, 2022</time></a>
							</span>

			<span class="word-count">7 Minutes</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

			
				
<article id="post-404" class="post-404 post type-post status-publish format-standard hentry category-uncategorized tag-elixir tag-nx tag-nx-totw">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2022/02/21/nx-tip-of-the-week-14-slicing-and-indexing/" rel="bookmark">Nx Tip of the Week #14 – Slicing and&nbsp;Indexing</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>Often times you want to slice and index into specific parts of a tensor. Nx offers a few different slicing and indexing routines which allow you to accomplish most of what you would want to do. Slicing can be a bit tricky given static shape requirements, but you usually can work around limitations. First, you … </font><a href="https://seanmoriarity.com/2022/02/21/nx-tip-of-the-week-14-slicing-and-indexing/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Nx Tip of the Week #14 – Slicing and&nbsp;Indexing</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2022/02/21/nx-tip-of-the-week-14-slicing-and-indexing/#respond">Leave a comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2022/02/21/nx-tip-of-the-week-14-slicing-and-indexing/" rel="bookmark"><time class="entry-date published updated" datetime="2022-02-21T07:59:03-05:00">February 21, 2022</time></a>
							</span>

			<span class="word-count">2 Minutes</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

			
				
<article id="post-394" class="post-394 post type-post status-publish format-standard hentry category-uncategorized">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2022/02/14/nx-tip-of-the-week-13-hooks/" rel="bookmark">Nx Tip of the Week #13 –&nbsp;Hooks</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>Part of the restrictiveness of defn is the inability to debug in the same way you would debug a normal Elixir function. I'm personally a big fan of plain old IO.inspect debugging. Because of how defn works, it's not possible to inspect intermediate tensor values in the same way you would inspect intermediate values in … </font><a href="https://seanmoriarity.com/2022/02/14/nx-tip-of-the-week-13-hooks/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Nx Tip of the Week #13 –&nbsp;Hooks</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2022/02/14/nx-tip-of-the-week-13-hooks/#respond">Leave a comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2022/02/14/nx-tip-of-the-week-13-hooks/" rel="bookmark"><time class="entry-date published" datetime="2022-02-14T07:00:00-05:00">February 14, 2022</time><time class="updated" datetime="2022-02-05T18:27:30-05:00">February 5, 2022</time></a>
							</span>

			<span class="word-count">1 Minute</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

			
				
<article id="post-386" class="post-386 post type-post status-publish format-standard hentry category-uncategorized">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2022/02/07/nx-tip-of-the-week-12-nx-to_heatmap/" rel="bookmark">Nx Tip of the Week #12 –&nbsp;Nx.to_heatmap</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>Sometimes you want to quickly visualize the contents of a tensor. For example, when working with the MNIST dataset, you might want to make sure you've sliced it up correctly. A quick way to visualize images across a single color channel is with Nx.to_heatmap: Nx.to_heatmap(img) When inspecting the result of Nx.to_heatmap, you'll get a nice … </font><a href="https://seanmoriarity.com/2022/02/07/nx-tip-of-the-week-12-nx-to_heatmap/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Nx Tip of the Week #12 –&nbsp;Nx.to_heatmap</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2022/02/07/nx-tip-of-the-week-12-nx-to_heatmap/#respond">Leave a comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2022/02/07/nx-tip-of-the-week-12-nx-to_heatmap/" rel="bookmark"><time class="entry-date published" datetime="2022-02-07T07:00:00-05:00">February 7, 2022</time><time class="updated" datetime="2022-02-05T18:04:47-05:00">February 5, 2022</time></a>
							</span>

			<span class="word-count">1 Minute</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

			
				
<article id="post-372" class="post-372 post type-post status-publish format-standard hentry category-uncategorized">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2022/01/31/nx-tip-of-the-week-11-while-loops/" rel="bookmark">Nx Tip of the Week #11 – While&nbsp;Loops</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>Some numeric algorithms require sequential operations. In TOTW #9, we talked about one operation you can use to avoid while-loops in specific situations. Unfortunately, you won't always be able to avoid a while-loop. Nx has a while construct which is implemented as an Elixir macro. The while construct takes an initial state, a condition, and … </font><a href="https://seanmoriarity.com/2022/01/31/nx-tip-of-the-week-11-while-loops/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Nx Tip of the Week #11 – While&nbsp;Loops</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2022/01/31/nx-tip-of-the-week-11-while-loops/#respond">Leave a comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2022/01/31/nx-tip-of-the-week-11-while-loops/" rel="bookmark"><time class="entry-date published" datetime="2022-01-31T07:00:00-05:00">January 31, 2022</time><time class="updated" datetime="2022-01-24T15:02:48-05:00">January 24, 2022</time></a>
							</span>

			<span class="word-count">2 Minutes</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

			
				
<article id="post-361" class="post-361 post type-post status-publish format-standard hentry category-uncategorized">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2022/01/24/nx-tip-of-the-week-10-using-nx-select/" rel="bookmark">Nx Tip of the Week #10 – Using&nbsp;Nx.select</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>Nx's API can seem a little more restrictive due to some of it's static shape requirements. For example, boolean indexing is not currently supported because it would be impossible to know the shape at runtime. For those who don't know boolean indexing selects values of an array based on some boolean mask. For example, let's … </font><a href="https://seanmoriarity.com/2022/01/24/nx-tip-of-the-week-10-using-nx-select/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Nx Tip of the Week #10 – Using&nbsp;Nx.select</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2022/01/24/nx-tip-of-the-week-10-using-nx-select/#respond">Leave a comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2022/01/24/nx-tip-of-the-week-10-using-nx-select/" rel="bookmark"><time class="entry-date published" datetime="2022-01-24T07:00:00-05:00">January 24, 2022</time><time class="updated" datetime="2022-01-18T07:11:14-05:00">January 18, 2022</time></a>
							</span>

			<span class="word-count">1 Minute</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

			
				
<article id="post-349" class="post-349 post type-post status-publish format-standard hentry category-uncategorized tag-elixir tag-nx tag-nx-totw">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2022/01/17/nx-tip-of-the-week-9-window-operations/" rel="bookmark">Nx Tip of the Week #9 – Window&nbsp;Functions</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>With the release of Nx 0.1.0, I thought I should continue these posts. My time is a limited so these will be a little more brief than before. Each week I'll highlight a small aspect of the Nx API with some code examples. When you first get started with an array programming library like Nx … </font><a href="https://seanmoriarity.com/2022/01/17/nx-tip-of-the-week-9-window-operations/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Nx Tip of the Week #9 – Window&nbsp;Functions</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2022/01/17/nx-tip-of-the-week-9-window-operations/#comments">1 Comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2022/01/17/nx-tip-of-the-week-9-window-operations/" rel="bookmark"><time class="entry-date published" datetime="2022-01-17T06:00:00-05:00">January 17, 2022</time><time class="updated" datetime="2022-01-16T20:21:58-05:00">January 16, 2022</time></a>
							</span>

			<span class="word-count">2 Minutes</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

			
				
<article id="post-328" class="post-328 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw-2">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2021/04/22/nx-tip-of-the-week-8-using-nx-defn-aot-3/" rel="bookmark">Nx Tip of the Week #8 – Using&nbsp;Nx.Defn.aot/3</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>Last week, we discussed the usage of Nx.Defn.jit/3 to JIT compile and run numerical definitions. Nx also supports ahead-of-time compilation using Nx.Defn.aot/3. In this post, we'll briefly look at how to use ahead-of-time compilation, and why you'd want to do it in the first place. Ahead-of-time compilation allows you to compile your numerical definitions into … </font><a href="https://seanmoriarity.com/2021/04/22/nx-tip-of-the-week-8-using-nx-defn-aot-3/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Nx Tip of the Week #8 – Using&nbsp;Nx.Defn.aot/3</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2021/04/22/nx-tip-of-the-week-8-using-nx-defn-aot-3/#respond">Leave a comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2021/04/22/nx-tip-of-the-week-8-using-nx-defn-aot-3/" rel="bookmark"><time class="entry-date published" datetime="2021-04-22T08:47:15-04:00">April 22, 2021</time><time class="updated" datetime="2021-04-22T08:47:47-04:00">April 22, 2021</time></a>
							</span>

			<span class="word-count">3 Minutes</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

			
				
<article id="post-319" class="post-319 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw-2">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/" rel="bookmark">Nx Tip of the Week #7 – Using&nbsp;Nx.Defn.jit</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>There are actually 2 ways in Nx to accelerate your numerical definitions: invoking calls to defn with a @defn_compiler attribute set, or calling Nx.Defn.jit/3. Let's take a look at these 2 methods in practice: defmodule JIT do import Nx.Defn @default_defn_compiler EXLA defn softmax(x) do max_val = Nx.reduce_max(x) Nx.exp(x - max_val) / Nx.sum(Nx.exp(x - max_val)) end … </font><a href="https://seanmoriarity.com/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Nx Tip of the Week #7 – Using&nbsp;Nx.Defn.jit</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/#respond">Leave a comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/" rel="bookmark"><time class="entry-date published updated" datetime="2021-04-15T08:21:27-04:00">April 15, 2021</time></a>
							</span>

			<span class="word-count">1 Minute</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

			
			
	<nav class="navigation posts-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Posts navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/author/seanmoriarity/page/2/">Older posts</a></div></div>
	</nav>
		
		<div class="infinite-wrap infinite-view-2" id="infinite-view-2" data-page-num="2" role="region" aria-label="Page: 2.">
<article id="post-285" class="post-285 post type-post status-publish format-standard has-post-thumbnail hentry category-projects tag-axon tag-elixir tag-nx">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/" rel="bookmark">Axon: Deep Learning in&nbsp;Elixir</a></h1>		</header><!-- .entry-header -->	<div class="post-image-link"><a rel="bookmark" href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/"><img width="1100" height="447" src="https://seanmoriaritycom.files.wordpress.com/2021/04/1.1-axon-whitebg.png?w=1100" class="attachment-independent-publisher-2-full-width size-independent-publisher-2-full-width wp-post-image" alt="" decoding="async" loading="lazy" srcset="https://seanmoriaritycom.files.wordpress.com/2021/04/1.1-axon-whitebg.png?w=1100 1100w, https://seanmoriaritycom.files.wordpress.com/2021/04/1.1-axon-whitebg.png?w=150 150w, https://seanmoriaritycom.files.wordpress.com/2021/04/1.1-axon-whitebg.png?w=300 300w, https://seanmoriaritycom.files.wordpress.com/2021/04/1.1-axon-whitebg.png?w=768 768w, https://seanmoriaritycom.files.wordpress.com/2021/04/1.1-axon-whitebg.png?w=1024 1024w, https://seanmoriaritycom.files.wordpress.com/2021/04/1.1-axon-whitebg.png 1980w" sizes="(max-width: 1100px) 100vw, 1100px" data-attachment-id="301" data-permalink="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/1-1-axon-whitebg/" data-orig-file="https://seanmoriaritycom.files.wordpress.com/2021/04/1.1-axon-whitebg.png" data-orig-size="1980,805" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="1.1-Axon-whitebg" data-image-description="" data-image-caption="" data-medium-file="https://seanmoriaritycom.files.wordpress.com/2021/04/1.1-axon-whitebg.png?w=300" data-large-file="https://seanmoriaritycom.files.wordpress.com/2021/04/1.1-axon-whitebg.png?w=1024"></a></div><!-- .post-image-link -->
	<div class="entry-content">
		<p><font>ax·on/ˈakˌsän/nounthe long threadlike part of a nerve cell along which impulses are conducted from the cell body to other cells. Today I am excited to publicly announce Axon, a library for creating neural networks in Elixir. Axon is still pre-release; however, I believe it's reached a point where it's ready for experimentation and input from … </font><a href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Axon: Deep Learning in&nbsp;Elixir</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/projects/" rel="category tag">projects</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/#comments">1 Comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/" rel="bookmark"><time class="entry-date published" datetime="2021-04-08T07:30:33-04:00">April 8, 2021</time><time class="updated" datetime="2021-04-08T07:46:01-04:00">April 8, 2021</time></a>
							</span>

			<span class="word-count">9 Minutes</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

<article id="post-279" class="post-279 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/" rel="bookmark">Nx Tip of the Week #6 – Compiler or&nbsp;Backend?</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>I've recently seen some confusion with respect to compilers and backends. This post is intended to clear up some of that confusion. TLDR: If performance matters, benchmark and decide. If you need flexibility or want to prototype quickly and not sacrifice speed, backends are a good choice. If you need AOT compilation or your programs … </font><a href="https://seanmoriarity.com/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Nx Tip of the Week #6 – Compiler or&nbsp;Backend?</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/#comments">1 Comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/" rel="bookmark"><time class="entry-date published updated" datetime="2021-03-25T07:45:48-04:00">March 25, 2021</time></a>
							</span>

			<span class="word-count">7 Minutes</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

<article id="post-262" class="post-262 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2021/03/18/nx-tip-of-the-week-5-named-tensors/" rel="bookmark">Nx Tip of the Week #5 – Named&nbsp;Tensors</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>Note: The original named tensors article, Tensor Considered Harmful, goes through these details in much more detail and explains much better than I can. I recommend reading that as well. One of my biggest frustrations when working with NumPy and TensorFlow comes when working with axes. Take for example, this TensorFlow implementation of the Mean … </font><a href="https://seanmoriarity.com/2021/03/18/nx-tip-of-the-week-5-named-tensors/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Nx Tip of the Week #5 – Named&nbsp;Tensors</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2021/03/18/nx-tip-of-the-week-5-named-tensors/#respond">Leave a comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2021/03/18/nx-tip-of-the-week-5-named-tensors/" rel="bookmark"><time class="entry-date published updated" datetime="2021-03-18T10:48:41-04:00">March 18, 2021</time></a>
							</span>

			<span class="word-count">3 Minutes</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

<article id="post-246" class="post-246 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2021/03/11/nx-tip-of-the-week-4-using-keywords/" rel="bookmark">Nx Tip of the Week #4 – Using&nbsp;Keywords</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>Numerical definitions can only accept tensors or numbers as positional arguments; however, you can get around this inflexibility using keyword lists. You can pass and use optional keyword arguments in your numerical definitions with the keyword! method. Let's take a look at some ways this might be useful. Parameter Initializers In many ML applications, you … </font><a href="https://seanmoriarity.com/2021/03/11/nx-tip-of-the-week-4-using-keywords/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Nx Tip of the Week #4 – Using&nbsp;Keywords</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2021/03/11/nx-tip-of-the-week-4-using-keywords/#respond">Leave a comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2021/03/11/nx-tip-of-the-week-4-using-keywords/" rel="bookmark"><time class="entry-date published updated" datetime="2021-03-11T10:16:11-05:00">March 11, 2021</time></a>
							</span>

			<span class="word-count">3 Minutes</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

<article id="post-220" class="post-220 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/" rel="bookmark">Nx Tip of the Week #3 – Many Ways to Create&nbsp;Arrays*</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>*tensors In Nx, the fundamental type is the Tensor. You can think of a tensor as a multi-dimensional array, like the numpy.ndarray. For Elixir programmers, it's easy to think of Nx.Tensor as a list, or a list-of-lists, or a list-of-lists-of-lists, ... and so on. This thought process is fine, but it might lead you to … </font><a href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Nx Tip of the Week #3 – Many Ways to Create&nbsp;Arrays*</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/#comments">2 Comments</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/" rel="bookmark"><time class="entry-date published" datetime="2021-03-04T10:17:04-05:00">March 4, 2021</time><time class="updated" datetime="2021-03-04T10:24:33-05:00">March 4, 2021</time></a>
							</span>

			<span class="word-count">5 Minutes</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

<article id="post-188" class="post-188 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw-2">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2021/02/24/nx-tip-of-the-week-2-tensor-manipulation-for-elixir-programmers/" rel="bookmark">Nx Tip of the Week #2 – Tensor Operations for Elixir&nbsp;Programmers</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>In Elixir, it's common to manipulate data using the Enum module. Enum provides a set of library functions for working with types that implement the Enumerable protocol. The Enum module is a productive interface for manipulating lists, maps, sets, etc. However, learning how to think about tensor manipulation using Nx can be a bit difficult … </font><a href="https://seanmoriarity.com/2021/02/24/nx-tip-of-the-week-2-tensor-manipulation-for-elixir-programmers/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Nx Tip of the Week #2 – Tensor Operations for Elixir&nbsp;Programmers</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2021/02/24/nx-tip-of-the-week-2-tensor-manipulation-for-elixir-programmers/#respond">Leave a comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2021/02/24/nx-tip-of-the-week-2-tensor-manipulation-for-elixir-programmers/" rel="bookmark"><time class="entry-date published" datetime="2021-02-24T18:07:08-05:00">February 24, 2021</time><time class="updated" datetime="2021-02-25T08:24:14-05:00">February 25, 2021</time></a>
							</span>

			<span class="word-count">4 Minutes</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

<article id="post-165" class="post-165 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2021/02/16/nx-tip-of-the-week-1-using-transforms/" rel="bookmark">Nx Tip of the Week #1 – Using&nbsp;transforms</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>Note: This is an idea I had after learning a significant amount from the abseil C++ Tips of the Week during my work on EXLA. I'll keep writing them as long as there's interest. If there's anything in particular you'd like to read about, feel free to let me know! Nx is an exciting new … </font><a href="https://seanmoriarity.com/2021/02/16/nx-tip-of-the-week-1-using-transforms/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Nx Tip of the Week #1 – Using&nbsp;transforms</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2021/02/16/nx-tip-of-the-week-1-using-transforms/#respond">Leave a comment</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2021/02/16/nx-tip-of-the-week-1-using-transforms/" rel="bookmark"><time class="entry-date published" datetime="2021-02-16T19:19:16-05:00">February 16, 2021</time><time class="updated" datetime="2021-02-18T15:03:32-05:00">February 18, 2021</time></a>
							</span>

			<span class="word-count">3 Minutes</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->

<article id="post-75" class="post-75 post type-post status-publish format-standard hentry category-paper tag-continual-learning tag-deep-learning tag-python tag-tensorflow tag-tensorflow-2-2">
			<header class="entry-header">
			<h1 class="entry-title"><a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/" rel="bookmark">Continual Learning with Elastic Weight Consolidation in TensorFlow&nbsp;2</a></h1>		</header><!-- .entry-header -->	
	<div class="entry-content">
		<p><font>Based on Overcoming catastrophic forgetting in neural networks. You can view the accompanying Jupyter Notebook here. The mammalian brain allows for the learning of tasks in a sequential order. That is, we are capable of learning new tasks without forgetting how to perform old ones. Research suggests that retention of task-specific skills relies primarily on … </font><a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/" class="more-link"><font>Continue reading </font><span class="screen-reader-text">Continual Learning with Elastic Weight Consolidation in TensorFlow&nbsp;2</span> <span class="meta-nav">→</span></a></p>	</div><!-- .entry-content -->

	<footer class="entry-footer">
		
				<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/paper/" rel="category tag">Paper</a>				</span><!-- .cat-links -->
			
			<span class="comments-link"><a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/#comments">6 Comments</a></span><!-- .comments-link -->
			<span class="published-on">
									<a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/" rel="bookmark"><time class="entry-date published" datetime="2020-10-18T15:35:37-04:00">October 18, 2020</time><time class="updated" datetime="2020-10-20T15:11:46-04:00">October 20, 2020</time></a>
							</span>

			<span class="word-count">15 Minutes</span>		</div><!-- .entry-meta -->
		</footer><!-- .entry-footer -->
</article><!-- #post-## -->
</div></main><!-- #main -->
	</div><!-- #primary -->


		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2021/02/16/nx-tip-of-the-week-1-using-transforms/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-165" class="post-165 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw">
			<header class="entry-header">
			<h1 class="entry-title"><font>Nx Tip of the Week #1 – Using&nbsp;transforms</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published" datetime="2021-02-16T19:19:16-05:00">February 16, 2021</time><time class="updated" datetime="2021-02-18T15:03:32-05:00">February 18, 2021</time>			</span>

			<span class="word-count">3 Minutes</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><em>Note: This is an idea I had after learning a significant amount from the <a href="https://abseil.io/tips/">abseil C++ Tips of the Week</a></em> <em>during my work on <a href="https://github.com/elixir-nx/nx">EXLA</a></em><font>. </font><em>I’ll keep writing them as long as there’s interest</em><font>. </font><em>If there’s anything in particular you’d like to read about, feel free to let me know!</em></p>



<p><code>Nx</code><font> is an exciting new project with the hopes of making mathematical computing practical within the Elixir ecosystem. Fundamentally, </font><code>Nx</code><font> is a </font><em>tensor manipulation</em><font> or </font><em>array programming</em><font> library similar to </font><a href="https://github.com/numpy/numpy">NumPy</a><font>, </font><a href="https://github.com/tensorflow/tensorflow">TensorFlow</a><font>, or </font><a href="https://github.com/pytorch/pytorch">PyTorch</a><font>. </font><code>Nx</code><font> introduces a new type of function definition, </font><code>defn</code><font>, that is a subset of the Elixir programming language tailored specifically to numerical computations. When numerical definitions are invoked, they’re transformed into </font><em>expressions</em><font> (internally </font><code>Nx.Defn.Expr</code><font>) which represent the AST or computation graph of the numerical definition. These expressions are manipulated by compilers (like </font><code>EXLA</code><font>) to produce executables that run natively on accelerators.</font></p>



<p><font>The subset of supported Elixir code within </font><code>defn</code><font> can, at times, feel restrictive; however, there are a number of ways to overcome these perceived limitations. One such example is </font><code>transform/2</code><font>. From the docs:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_105010" class="syntaxhighlighter nogutter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">transform(arg, fun)</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="plain plain">Defines a transform that executes the given `fun` with `arg`</code></div><div class="line number4 index3 alt1"><code class="plain plain">when building `defn` expressions.</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You can invoke </font><code>transform/2</code><font> from within </font><code>defn</code><font> to call out to any Elixir function. As an example, you can use </font><code>transform/2</code><font> to inspect the underlying expression in a numerical definition:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_898310" class="syntaxhighlighter nogutter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defn tanh_power(a, b) do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">res = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tanh(a) + </code><code class="erlang constants">Nx</code><code class="erlang plain">.power(b, 2)</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">transform(res, &amp;</code><code class="erlang constants">IO</code><code class="erlang plain">.inspect/1)</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">res</code></div><div class="line number5 index4 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Invoking </font><code>tanh_power/2</code><font> will print:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_831521" class="syntaxhighlighter nogutter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">#Nx.Defn.Expr&lt;</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">parameter a</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">parameter c</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">b = tanh [ a ] ()</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">d = power [ c, 2 ] ()</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">e = add [ b, d ] ()</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;</code><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><em>Note: the parens would normally contain missing type and shape information determined at the time of invocation.</em> <em>There’s also a macro, <code>inspect_expr</code>, that implements this transform available within <code>defn</code>.</em></p>



<p><font>Transforms prove particularly useful when doing type or shape checks. For example, you can use transforms to assert that input shapes are equal:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_298181" class="syntaxhighlighter nogutter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defn cross_entropy_loss(y_true, y_pred) do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">transform({</code><code class="erlang constants">Nx</code><code class="erlang plain">.shape(y_true), </code><code class="erlang constants">Nx</code><code class="erlang plain">.shape(y_pred)},</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">fn</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{s1, s2} </code><code class="erlang keyword">when</code> <code class="erlang plain">s1 == s2 -&gt; :ok</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{s1, s2} -&gt; raise </code><code class="erlang constants">ArgumentError</code><code class="erlang plain">, </code><code class="erlang string">"shapes do not equal"</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">)</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Nx</code><code class="erlang plain">.mean(</code><code class="erlang constants">Nx</code><code class="erlang plain">.log(y_true) * y_pred)</code></div><div class="line number9 index8 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You can take that one step further and package everything in a macro:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_182149" class="syntaxhighlighter nogutter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defmacro assert_equal_shapes(expr1, expr2) do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">quote do</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Defn</code><code class="erlang plain">.</code><code class="erlang constants">Kernel</code><code class="erlang plain">.transform(</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{</code><code class="erlang constants">Nx</code><code class="erlang plain">.shape(unquote(expr1)), </code><code class="erlang constants">Nx</code><code class="erlang plain">.shape(unquote(expr2))},</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&amp;assert_equal_shapes_impl/1</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">)</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number8 index7 alt1"><code class="erlang keyword">end</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="erlang plain">defp assert_equal_shapes_impl(s1, s2) </code><code class="erlang keyword">when</code> <code class="erlang plain">s1 == s2, do: :ok</code></div><div class="line number11 index10 alt2"><code class="erlang plain">defp assert_equal_shapes_impl(s1, s2) do</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">raise </code><code class="erlang constants">ArgumentError</code><code class="erlang plain">, </code><code class="erlang string">"expected shapes to be equal,"</code> <code class="erlang plain">&lt;&gt;</code></div><div class="line number13 index12 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang string">" got #{inspect(s1)} != #{inspect(s2)}"</code></div><div class="line number14 index13 alt1"><code class="erlang keyword">end</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="erlang plain">defn cross_entropy_loss(y_true, y_pred) do</code></div><div class="line number17 index16 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">assert_equal_shapes(y_true, y_pred)</code></div><div class="line number18 index17 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Nx</code><code class="erlang plain">.mean(</code><code class="erlang constants">Nx</code><code class="erlang plain">.log(y_true) * y_pred)</code></div><div class="line number19 index18 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>And you’ll get some nice shape validation on your functions:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_74418" class="syntaxhighlighter nogutter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; y_true = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[0, 1], [1, 0]], type: {:f, 32})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; y_pred = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[0.6811, 0.5565], [0.6551, 0.4551], [0.5422, 0.2648]], type: {:f, 32})</code></div><div class="line number3 index2 alt2"><code class="erlang plain">iex&gt; cross_entropy_loss(y_true,y_pred)</code></div><div class="line number4 index3 alt1"><code class="erlang plain">** (</code><code class="erlang constants">ArgumentError</code><code class="erlang plain">) expected shapes to be equal, got {2, 2} != {3, 2}</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You can even use values returned from transforms. For example, say you need to calculate the shape of a tensor created with </font><code>Nx.random_uniform</code><font> based on the shape of an input tensor:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_490552" class="syntaxhighlighter nogutter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defn dense_layer(input) do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">weight_shape = transform(</code><code class="erlang constants">Nx</code><code class="erlang plain">.shape(input),</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">fn {_batch_size, in_units} -&gt;</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{in_units, 32}</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">end</code><code class="erlang plain">)</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">weight = </code><code class="erlang constants">Nx</code><code class="erlang plain">.random_uniform(weight_shape, type: </code><code class="erlang constants">Nx</code><code class="erlang plain">.type(input))</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Nx</code><code class="erlang plain">.dot(input, weight)</code></div><div class="line number8 index7 alt1"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>When invoked:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_312574" class="syntaxhighlighter nogutter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; t1 = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[1.0, 2.0, 3.0]], type: {:f, 32})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; t2 = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[1.0, 2.0, 3.0, 4.0]], type: {:f, 32})</code></div><div class="line number3 index2 alt2"><code class="erlang plain">iex&gt; dense_layer(t1)</code></div><div class="line number4 index3 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[1][32]</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[...]</code></div><div class="line number7 index6 alt2"><code class="erlang plain">&gt;</code></div><div class="line number8 index7 alt1"><code class="erlang plain">iex&gt; dense_layer(t2)</code></div><div class="line number9 index8 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[1][32]</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[...]</code></div><div class="line number12 index11 alt1"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Notice how the dot product works for both inputs, even though their shapes are different!</font></p>



<p><font>As a final example illustrating the power of transforms, we’ll look at </font><code>grad</code><font>. </font><code>grad</code><font> is actually implemented as a transform:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_728088" class="syntaxhighlighter nogutter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defmacro grad(var_or_vars, expr) do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">var_or_vars =</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">case</code> <code class="erlang plain">var_or_vars do</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{:{}, meta, vars} -&gt; {:{}, meta, </code><code class="erlang constants">Enum</code><code class="erlang plain">.map(vars, &amp;grad_var!/1)}</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{left, right} -&gt; {grad_var!(left), grad_var!(right)}</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">var -&gt; grad_var!(var)</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">quote do</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Defn</code><code class="erlang plain">.</code><code class="erlang constants">Kernel</code><code class="erlang plain">.transform(</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{unquote(var_or_vars), unquote(expr)},</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">&amp;</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Defn</code><code class="erlang plain">.</code><code class="erlang constants">Grad</code><code class="erlang plain">.transform/1</code></div><div class="line number13 index12 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">)</code></div><div class="line number14 index13 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number15 index14 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Essentially, the </font><code>grad</code><font> transform takes an expression and some variables to differentiate. It then transforms the underlying expression with respect to those variables using </font><code>Nx.Defn.Grad.transform/1</code><font>. The gradient transform traverses the expression and recursively transforms expressions using some defined gradient transformation rules. The implementation is surprisingly simple, but the result is amazingly powerful.</font></p>



<p><font>I hope these few relatively simple examples illustrate the power of </font><code>transform/2</code><font>. If you have any issues with my explanation or find any problems with the code, feel free to let me know. Happy coding!</font></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-165" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2021/02/16/nx-tip-of-the-week-1-using-transforms/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-165" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2021/02/16/nx-tip-of-the-week-1-using-transforms/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-175065622-165-6430088f730ab" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=165&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-165-6430088f730ab&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-165-6430088f730ab" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-175065622-165-6430088f730ab" src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=165&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-165-6430088f730ab&amp;domain=seanmoriarity.com" height="55px" width="100%" frameborder="0" scrolling="no" title="Like or Reblog"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="319" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/" title="Nx Tip of the Week #7 &amp;#8211; Using&amp;nbsp;Nx.Defn.jit" data-origin="165" data-position="0">Nx Tip of the Week #7 – Using&nbsp;Nx.Defn.jit</a></span><time class="jp-relatedposts-post-date" datetime="April 15, 2021" style="display: block;">April 15, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="279" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/" title="Nx Tip of the Week #6 &amp;#8211; Compiler or&amp;nbsp;Backend?" data-origin="165" data-position="1">Nx Tip of the Week #6 – Compiler or&nbsp;Backend?</a></span><time class="jp-relatedposts-post-date" datetime="March 25, 2021" style="display: block;">March 25, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="328" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/04/22/nx-tip-of-the-week-8-using-nx-defn-aot-3/" title="Nx Tip of the Week #8 &amp;#8211; Using&amp;nbsp;Nx.Defn.aot/3" data-origin="165" data-position="2">Nx Tip of the Week #8 – Using&nbsp;Nx.Defn.aot/3</a></span><time class="jp-relatedposts-post-date" datetime="April 22, 2021" style="display: block;">April 22, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
		<ul class="post-tags light-text"><li><font>Tagged</font></li><li><a href="https://seanmoriarity.com/tag/elixir/" rel="tag">elixir</a></li><li><a href="https://seanmoriarity.com/tag/nx/" rel="tag">nx</a></li><li><a href="https://seanmoriarity.com/tag/nx-totw/" rel="tag">nx totw</a></li></ul><!-- .post-tags -->	</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published" datetime="2021-02-16T19:19:16-05:00">February 16, 2021</time><time class="updated" datetime="2021-02-18T15:03:32-05:00">February 18, 2021</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Continual Learning with Elastic Weight Consolidation in TensorFlow&nbsp;2</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2021/02/24/nx-tip-of-the-week-2-tensor-manipulation-for-elixir-programmers/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Nx Tip of the Week #2 – Tensor Operations for Elixir&nbsp;Programmers</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2021/02/16/nx-tip-of-the-week-1-using-transforms/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2021/02/16/nx-tip-of-the-week-1-using-transforms/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-0" originals="25" scale="1.5">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-1" originals="25" scale="1.5">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-2" originals="25" scale="1.5">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="165" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="7fbb40e92b"></p>
<input type="hidden" name="genseq" value="1680869519">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869518637"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2021/02/24/nx-tip-of-the-week-2-tensor-manipulation-for-elixir-programmers/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-188" class="post-188 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw-2">
			<header class="entry-header">
			<h1 class="entry-title"><font>Nx Tip of the Week #2 – Tensor Operations for Elixir&nbsp;Programmers</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published" datetime="2021-02-24T18:07:08-05:00">February 24, 2021</time><time class="updated" datetime="2021-02-25T08:24:14-05:00">February 25, 2021</time>			</span>

			<span class="word-count">4 Minutes</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><font>In Elixir, it’s common to manipulate data using the </font><code>Enum</code><font> module. </font><code>Enum</code><font> provides a set of library functions for working with types that implement the </font><code>Enumerable</code><font> protocol. The </font><code>Enum</code><font> module is a productive interface for manipulating lists, maps, sets, etc. However, learning how to think about tensor manipulation using </font><code>Nx</code><font> can be a bit difficult when you’re used to thinking about data manipulation using </font><code>Enum</code><font>.</font></p>



<h2 class="wp-block-heading"><font>Element-wise unary functions</font></h2>



<p><code>Nx</code><font> contains a number of element-wise unary functions that are </font><em>tensor</em> <em>aware</em><font>. If you were asked to implement a function that returns the exponential of every element in a list, you would probably do something like:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_598687" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = [1, 2, 3]</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.map(a, fn x -&gt; :math.exp(x) </code><code class="erlang keyword">end</code><code class="erlang plain">)</code></div><div class="line number3 index2 alt2"><code class="erlang plain">[2.718281828459045, 7.38905609893065, 20.085536923187668]</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>If you we’re asked to implement the same function in </font><code>Nx</code><font>, it’s easy to try and do something like:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_947907" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([1, 2, 3], type: {:s, 32}, names: [:data])</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.map(a, [type: {:f, 32}], fn x -&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.exp(x) </code><code class="erlang keyword">end</code><code class="erlang plain">)</code></div><div class="line number3 index2 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[data: 3]</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[2.718281828459045, 7.38905609893065, 20.085536923187668]</code></div><div class="line number6 index5 alt1"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><em>Note: You have to be explicit about the output type of <code>Nx.map/3</code> because it cannot infer the type of the output from the anonymous function.</em></p>



<p><font>While this implementation is correct, it’s verbose, and will be inefficient for most </font><code>Nx</code><font> compilers. Additionally, native </font><code>Nx</code><font> backends can’t implement functions like </font><code>Nx.map/3</code><font> because there’s no way to pass functions on the VM to a native interface. Fortunately, the element-wise unary functions like </font><code>Nx.exp/1</code><font> are </font><em>tensor aware</em><font>, which means they operate over the entire tensor:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_564911" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([1, 2, 3], type: {:f, 32}, names: [:data])</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.exp(a)</code></div><div class="line number3 index2 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[data: 3]</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[2.718281828459045, 7.38905609893065, 20.085536923187668]</code></div><div class="line number6 index5 alt1"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>This comes in handy when working with higher-dimensional tensors:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_607565" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div><div class="line number23 index22 alt2"><font>23</font></div><div class="line number24 index23 alt1"><font>24</font></div><div class="line number25 index24 alt2"><font>25</font></div><div class="line number26 index25 alt1"><font>26</font></div><div class="line number27 index26 alt2"><font>27</font></div><div class="line number28 index27 alt1"><font>28</font></div><div class="line number29 index28 alt2"><font>29</font></div><div class="line number30 index29 alt1"><font>30</font></div><div class="line number31 index30 alt2"><font>31</font></div><div class="line number32 index31 alt1"><font>32</font></div><div class="line number33 index32 alt2"><font>33</font></div><div class="line number34 index33 alt1"><font>34</font></div><div class="line number35 index34 alt2"><font>35</font></div><div class="line number36 index35 alt1"><font>36</font></div><div class="line number37 index36 alt2"><font>37</font></div><div class="line number38 index37 alt1"><font>38</font></div><div class="line number39 index38 alt2"><font>39</font></div><div class="line number40 index39 alt1"><font>40</font></div><div class="line number41 index40 alt2"><font>41</font></div><div class="line number42 index41 alt1"><font>42</font></div><div class="line number43 index42 alt2"><font>43</font></div><div class="line number44 index43 alt1"><font>44</font></div><div class="line number45 index44 alt2"><font>45</font></div><div class="line number46 index45 alt1"><font>46</font></div><div class="line number47 index46 alt2"><font>47</font></div><div class="line number48 index47 alt1"><font>48</font></div><div class="line number49 index48 alt2"><font>49</font></div><div class="line number50 index49 alt1"><font>50</font></div><div class="line number51 index50 alt2"><font>51</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = </code><code class="erlang constants">Nx</code><code class="erlang plain">.iota({2, 2, 1, 2, 1, 2}, type: {:f, 32})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.exp(a)</code></div><div class="line number3 index2 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[2][2][1][2][1][2]</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1.0, 2.718281828459045]</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">],</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number13 index12 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[7.38905609893065, 20.085536923187668]</code></div><div class="line number14 index13 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number15 index14 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number16 index15 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">],</code></div><div class="line number17 index16 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number18 index17 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number19 index18 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number20 index19 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[54.598150033144236, 148.4131591025766]</code></div><div class="line number21 index20 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">],</code></div><div class="line number22 index21 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number23 index22 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[403.4287934927351, 1096.6331584284585]</code></div><div class="line number24 index23 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number25 index24 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number26 index25 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number27 index26 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">],</code></div><div class="line number28 index27 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number29 index28 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number30 index29 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number31 index30 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number32 index31 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[2980.9579870417283, 8103.083927575384]</code></div><div class="line number33 index32 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">],</code></div><div class="line number34 index33 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number35 index34 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[22026.465794806718, 59874.14171519782]</code></div><div class="line number36 index35 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number37 index36 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number38 index37 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">],</code></div><div class="line number39 index38 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number40 index39 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number41 index40 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number42 index41 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[162754.79141900392, 442413.3920089205]</code></div><div class="line number43 index42 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">],</code></div><div class="line number44 index43 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number45 index44 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1202604.2841647768, 3269017.3724721107]</code></div><div class="line number46 index45 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number47 index46 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number48 index47 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number49 index48 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number50 index49 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number51 index50 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>An equivalent implementation using </font><code>Enum</code><font> and lists would be much more verbose. You should avoid usage of </font><code>Nx.map/3</code><font> in favor of the element-wise unary functions whenever possible.</font></p>



<h2 class="wp-block-heading"><font>Element-wise binary functions</font></h2>



<p><font>If you were asked to implement element-wise addition of two lists in Elixir, you would probably do something similar to:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_638821" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = [1, 2, 3]</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; b = [4, 5, 6]</code></div><div class="line number3 index2 alt2"><code class="erlang plain">iex&gt; a |&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.zip(b) |&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.map(fn {x, y} -&gt; x + y </code><code class="erlang keyword">end</code><code class="erlang plain">)</code></div><div class="line number4 index3 alt1"><code class="erlang plain">[5, 7, 9]</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>In </font><code>Nx</code><font>, there is no concept of </font><code>zip</code><font>, element-wise binary functions always pair corresponding elements in the tensor:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_492138" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([1, 2, 3], type: {:f, 32})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; b = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([4, 5, 6], type: {:f, 32})</code></div><div class="line number3 index2 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.add(a, b)</code></div><div class="line number4 index3 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[3]</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[5.0, 7.0, 9.0]</code></div><div class="line number7 index6 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Just like the previous example, this becomes clearly useful in higher dimensions:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_78832" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], type: {:f, 32})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; b = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[[2, 3, 4], [5, 6, 7], [8, 9, 10]]], type: {:f, 32})</code></div><div class="line number3 index2 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.add(a, b)</code></div><div class="line number4 index3 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[1][3][3]</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[3.0, 5.0, 7.0],</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[9.0, 11.0, 13.0],</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[15.0, 17.0, 19.0]</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number13 index12 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>What about broadcasting? While broadcasting can get complex, it’s easy enough to reason about in the scalar case. Imagine you want to multiply each element in a list by a scalar. With </font><code>Enum</code><font> you would do:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_992971" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; broadcast_scalar = fn x, list -&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.map(list, &amp; &amp;1*x) </code><code class="erlang keyword">end</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; broadcast_scalar.(5, [1, 2, 3]</code></div><div class="line number3 index2 alt2"><code class="erlang plain">[5, 10, 15]</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>The equivalent in </font><code>Nx</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_556758" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; broadcast_scalar = &amp;</code><code class="erlang constants">Nx</code><code class="erlang plain">.multiply(&amp;1, &amp;2)</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; broadcast_scalar(5, </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([1, 2, 3], type: {:f, 32})</code></div><div class="line number3 index2 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[3]</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[5.0, 10.0, 15.0]</code></div><div class="line number6 index5 alt1"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You can see why broadcasting is so easy in the scalar case – it just applies the element-wise function between the scalar and every item in the input tensor. In higher dimensions, broadcasting can get tricky. I suggest reading the </font><a href="https://github.com/elixir-nx/nx/blob/main/nx/lib/nx.ex#L47">broadcasting section</a><font> of the </font><code>Nx</code><font> documentation.</font></p>



<h2 class="wp-block-heading"><font>Aggregate Operators</font></h2>



<p><font>Aggregation with </font><code>Enum</code><font> is typically done using </font><code>Enum.reduce/3</code><font>. For example, to sum all of the elements in a list:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_856983" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = [1, 2, 3]</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.reduce(a, 0, fn x, acc -&gt; x + acc </code><code class="erlang keyword">end</code><code class="erlang plain">)</code></div><div class="line number3 index2 alt2"><code class="erlang plain">6</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>This task gets considerably more verbose with nested lists:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_915096" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.reduce(a, 0,</code></div><div class="line number3 index2 alt2"><code class="erlang plain">...&gt;&nbsp;&nbsp; fn x, acc -&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.reduce(x, 0,</code></div><div class="line number4 index3 alt1"><code class="erlang plain">...&gt;&nbsp;&nbsp;&nbsp;&nbsp; fn y, inner_acc -&gt;</code></div><div class="line number5 index4 alt2"><code class="erlang plain">...&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y + inner_acc</code></div><div class="line number6 index5 alt1"><code class="erlang plain">...&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="erlang keyword">end</code><code class="erlang plain">) + acc</code></div><div class="line number7 index6 alt2"><code class="erlang plain">...&gt;&nbsp;&nbsp; </code><code class="erlang keyword">end</code><code class="erlang plain">)</code></div><div class="line number8 index7 alt1"><code class="erlang plain">45</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>What if you only want the sum of each inner list? You can do:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_837974" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.reduce(a, [],</code></div><div class="line number3 index2 alt2"><code class="erlang plain">...&gt;&nbsp;&nbsp; fn x, acc -&gt; [</code><code class="erlang constants">Enum</code><code class="erlang plain">.reduce(x, 0,</code></div><div class="line number4 index3 alt1"><code class="erlang plain">...&gt;&nbsp;&nbsp;&nbsp;&nbsp; fn y, inner_acc -&gt;</code></div><div class="line number5 index4 alt2"><code class="erlang plain">...&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y + inner_acc</code></div><div class="line number6 index5 alt1"><code class="erlang plain">...&gt;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class="erlang keyword">end</code><code class="erlang plain">) | acc]</code></div><div class="line number7 index6 alt2"><code class="erlang plain">...&gt;&nbsp;&nbsp; </code><code class="erlang keyword">end</code><code class="erlang plain">) |&gt; </code><code class="erlang constants">Enum</code><code class="erlang plain">.reverse()</code></div><div class="line number8 index7 alt1"><code class="erlang plain">[6, 15, 24]</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>But what if you don’t know the level of nesting of the input list? What if you want to sum across columns instead of rows? This task can get considerably complex. Fortunately, it’s easy in </font><code>Nx</code><font>. </font><code>Nx</code><font> also has an </font><code>Nx.reduce</code><font> function; however, similar to </font><code>Nx.map</code><font>, you should prefer aggregate operations like Nx.</font><code>sum</code><font>, </font><code>Nx.product</code><font>, and </font><code>Nx.mean</code><font> to custom implementations. I will show one example using </font><code>Nx.reduce</code><font>, and then favor pre-written aggregate operations for the rest of the examples (yes I’m aware of </font><code>Enum.sum</code><font>, but it doesn’t make the above problem that much easier):</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_370506" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([1, 2, 3], type: {:f, 32}</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.reduce(a, 0, fn x, acc -&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.add(x, acc) </code><code class="erlang keyword">end</code><code class="erlang plain">)</code></div><div class="line number3 index2 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">6.0</code></div><div class="line number6 index5 alt1"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>What about with higher dimensions? </font><code>Nx</code><font> will take care of that for you:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_588500" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], type: {:f, 32})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.sum(a)</code></div><div class="line number3 index2 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">45.0</code></div><div class="line number6 index5 alt1"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>And what if I only want the sum along a specific axis?</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_684299" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], type: {:f, 32})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.sum(a, axes: [1])</code></div><div class="line number3 index2 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[3]</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[6.0, 15.0, 24.0]</code></div><div class="line number6 index5 alt1"><code class="erlang plain">&gt;</code></div><div class="line number7 index6 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.sum(a, axes: [0])</code></div><div class="line number8 index7 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[3]</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[12.0, 15.0, 18.0]</code></div><div class="line number11 index10 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Aggregate operations like </font><code>Nx.sum</code><font> reduce along one or more </font><code>axes</code><font>. For example, you can aggregate multiple axes:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_397475" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], type: {:f, 32})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.sum(a, axes: [0, 1])</code></div><div class="line number3 index2 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">45.0</code></div><div class="line number6 index5 alt1"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>If you don’t pass any </font><code>axes</code><font>, </font><code>Nx</code><font> will automatically aggregate over the entire tensor. How the aggregation will be performed can sometimes be difficult to reason about. Although, it’s a bit easier to see when using </font><em>named tensors</em><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_292694" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div><div class="line number23 index22 alt2"><font>23</font></div><div class="line number24 index23 alt1"><font>24</font></div><div class="line number25 index24 alt2"><font>25</font></div><div class="line number26 index25 alt1"><font>26</font></div><div class="line number27 index26 alt2"><font>27</font></div><div class="line number28 index27 alt1"><font>28</font></div><div class="line number29 index28 alt2"><font>29</font></div><div class="line number30 index29 alt1"><font>30</font></div><div class="line number31 index30 alt2"><font>31</font></div><div class="line number32 index31 alt1"><font>32</font></div><div class="line number33 index32 alt2"><font>33</font></div><div class="line number34 index33 alt1"><font>34</font></div><div class="line number35 index34 alt2"><font>35</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]],</code></div><div class="line number2 index1 alt1"><code class="erlang plain">...&gt;&nbsp;&nbsp; names: [:x, :y, :z], type: {:f, 32})</code></div><div class="line number3 index2 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[x: 1][y: 3][z: 3]</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1.0, 2.0, 3.0],</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[4.0, 5.0, 6.0],</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[7.0, 8.0, 9.0]</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number12 index11 alt1"><code class="erlang plain">&gt;</code></div><div class="line number13 index12 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.sum(a, axes: [:y])</code></div><div class="line number14 index13 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number15 index14 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">f32[x: 1][z: 3]</code></div><div class="line number16 index15 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number17 index16 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[12.0, 15.0, 18.0]</code></div><div class="line number18 index17 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number19 index18 alt2"><code class="erlang plain">&gt;</code></div><div class="line number20 index19 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.sum(a, axes: [:z])</code></div><div class="line number21 index20 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number22 index21 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[x: 1][y: 3]</code></div><div class="line number23 index22 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number24 index23 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[6.0, 15.0, 24.0]</code></div><div class="line number25 index24 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number26 index25 alt1"><code class="erlang plain">&gt;</code></div><div class="line number27 index26 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.sum(a, axes: [:x])</code></div><div class="line number28 index27 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number29 index28 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[y: 3][z: 3]</code></div><div class="line number30 index29 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number31 index30 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1.0, 2.0, 3.0],</code></div><div class="line number32 index31 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[4.0, 5.0, 6.0],</code></div><div class="line number33 index32 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[7.0, 8.0, 9.0]</code></div><div class="line number34 index33 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number35 index34 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Notice how in each case the axis that disappears is the one provided in </font><code>axes</code><font>. </font><code>axes</code><font> also supports negative indexing; however, you should generally prefer using named axes over integer axes wherever possible. We’ll cover named tensors in detail in a later post.</font></p>



<p><font>Hopefully this gets you primed for reasoning about manipulating tensors in </font><code>Nx</code><font>. Until next time, happy coding!</font></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-188" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2021/02/24/nx-tip-of-the-week-2-tensor-manipulation-for-elixir-programmers/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-188" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2021/02/24/nx-tip-of-the-week-2-tensor-manipulation-for-elixir-programmers/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-175065622-188-643008ae7dfc8" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=188&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-188-643008ae7dfc8&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-188-643008ae7dfc8" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-175065622-188-643008ae7dfc8" src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=188&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-188-643008ae7dfc8&amp;domain=seanmoriarity.com" height="55px" width="100%" frameborder="0" scrolling="no" title="Like or Reblog"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="220" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/" title="Nx Tip of the Week #3 &amp;#8211; Many Ways to Create&amp;nbsp;Arrays*" data-origin="188" data-position="0">Nx Tip of the Week #3 – Many Ways to Create&nbsp;Arrays*</a></span><time class="jp-relatedposts-post-date" datetime="March 4, 2021" style="display: block;">March 4, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="165" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/02/16/nx-tip-of-the-week-1-using-transforms/" title="Nx Tip of the Week #1 &amp;#8211; Using&amp;nbsp;transforms" data-origin="188" data-position="1">Nx Tip of the Week #1 – Using&nbsp;transforms</a></span><time class="jp-relatedposts-post-date" datetime="February 16, 2021" style="display: block;">February 16, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="246" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/03/11/nx-tip-of-the-week-4-using-keywords/" title="Nx Tip of the Week #4 &amp;#8211; Using&amp;nbsp;Keywords" data-origin="188" data-position="2">Nx Tip of the Week #4 – Using&nbsp;Keywords</a></span><time class="jp-relatedposts-post-date" datetime="March 11, 2021" style="display: block;">March 11, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
		<ul class="post-tags light-text"><li><font>Tagged</font></li><li><a href="https://seanmoriarity.com/tag/elixir/" rel="tag">elixir</a></li><li><a href="https://seanmoriarity.com/tag/nx/" rel="tag">nx</a></li><li><a href="https://seanmoriarity.com/tag/nx-totw-2/" rel="tag">nx-totw</a></li></ul><!-- .post-tags -->	</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published" datetime="2021-02-24T18:07:08-05:00">February 24, 2021</time><time class="updated" datetime="2021-02-25T08:24:14-05:00">February 25, 2021</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2021/02/16/nx-tip-of-the-week-1-using-transforms/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Nx Tip of the Week #1 – Using&nbsp;transforms</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Nx Tip of the Week #3 – Many Ways to Create&nbsp;Arrays*</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2021/02/24/nx-tip-of-the-week-2-tensor-manipulation-for-elixir-programmers/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2021/02/24/nx-tip-of-the-week-2-tensor-manipulation-for-elixir-programmers/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=41&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" originals="25" src-orig="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-0">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-1">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="188" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="0ea11d548e"></p>
<input type="hidden" name="genseq" value="1680869550">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869549657"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-220" class="post-220 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw">
			<header class="entry-header">
			<h1 class="entry-title"><font>Nx Tip of the Week #3 – Many Ways to Create&nbsp;Arrays*</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published" datetime="2021-03-04T10:17:04-05:00">March 4, 2021</time><time class="updated" datetime="2021-03-04T10:24:33-05:00">March 4, 2021</time>			</span>

			<span class="word-count">5 Minutes</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><em>*tensors</em></p>



<p><font>In </font><code>Nx</code><font>, the fundamental type is the </font><code>Tensor</code><font>. You can think of a tensor as a multi-dimensional array, like the </font><code><a href="https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html">numpy.ndarray</a></code><font>. For Elixir programmers, it’s easy to think of </font><code>Nx.Tensor</code><font> as a list, or a list-of-lists, or a list-of-lists-of-lists, … and so on. This thought process is fine, but it might lead you to write code that’s overly dependent on Elixir lists, and less dependent on native (and more efficient) tensor manipulation methods. This post will focus mainly on how to create tensors using the </font><code>Nx</code><font> API. For Elixir programmers, this should give you the tools to avoid writing unnecessary for-comprehensions and being overly dependent on lists.</font></p>



<h2 class="wp-block-heading"><font>From Numbers and Lists</font></h2>



<p><font>We’ll start with a method you’ll probably be most tempted to use, but one you should </font><em>usually</em><font> try to avoid. The default tensor creation method is </font><code>Nx.tensor/2</code><font>. You can use this method to create tensors from scalars, lists, and even other tensors:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_9812" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div><div class="line number23 index22 alt2"><font>23</font></div><div class="line number24 index23 alt1"><font>24</font></div><div class="line number25 index24 alt2"><font>25</font></div><div class="line number26 index25 alt1"><font>26</font></div><div class="line number27 index26 alt2"><font>27</font></div><div class="line number28 index27 alt1"><font>28</font></div><div class="line number29 index28 alt2"><font>29</font></div><div class="line number30 index29 alt1"><font>30</font></div><div class="line number31 index30 alt2"><font>31</font></div><div class="line number32 index31 alt1"><font>32</font></div><div class="line number33 index32 alt2"><font>33</font></div><div class="line number34 index33 alt1"><font>34</font></div><div class="line number35 index34 alt2"><font>35</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor(1)</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">1</code></div><div class="line number5 index4 alt2"><code class="erlang plain">&gt;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([1.0, 2.0, 3.0])</code></div><div class="line number8 index7 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[3]</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[1.0, 2.0, 3.0]</code></div><div class="line number11 index10 alt2"><code class="erlang plain">&gt;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[[[[[[[[[1,2]]]]]]]]]])</code></div><div class="line number14 index13 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number15 index14 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[1][1][1][1][1][1][1][1][1][2]</code></div><div class="line number16 index15 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number17 index16 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number18 index17 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number19 index18 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number20 index19 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number21 index20 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number22 index21 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number23 index22 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number24 index23 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number25 index24 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1, 2]</code></div><div class="line number26 index25 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number27 index26 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number28 index27 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number29 index28 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number30 index29 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number31 index30 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number32 index31 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number33 index32 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number34 index33 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number35 index34 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Notice </font><code>Nx.tensor/2</code><font> infers the type and calculates the ship of your input list or scalar. By default, </font><code>Nx.tensor/2</code><font> will create tensors with type </font><code>s64</code><font> when the inputs are all integer types and </font><code>f32</code><font> when the inputs are all float types. If it’s a mix, </font><code>Nx.tensor/2</code><font> will merge to a higher type:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_732399" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([1.0, 2])</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[2]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[1.0, 2.0]</code></div><div class="line number5 index4 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You can also specify the input type and dimension names:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_747133" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([1, 2, 3], type: {:bf, 16}, names: [:data])</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">bf16[data: 3]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[1.0, 2.0, 3.0]</code></div><div class="line number5 index4 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>As well as the backend:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_292359" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([1, 2, 3], backend: </code><code class="erlang constants">Torchx</code><code class="erlang plain">.</code><code class="erlang constants">Backend</code><code class="erlang plain">)</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[3]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[1, 2, 3]</code></div><div class="line number5 index4 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Using </font><code>Nx.tensor/2</code><font> is convenient, but is generally less efficient than other methods. </font><code>Nx.Tensor</code><font> generally represents tensor data as binaries, so </font><code>Nx.tensor/2</code><font> needs to iterate through the entire list and rewrite it to a binary. You should avoid this, if possible.</font></p>



<h2 class="wp-block-heading"><font>From Binaries</font></h2>



<p><font>Instead of creating tensors from lists, you should try to create tensors from binaries. As I said before, tensor data is generally stored in a binary. This is because binaries are just C-byte arrays, so native manipulation is usually more efficient than with other data types. Often times, you will receive data, such as images, as bytes (see </font><a href="https://github.com/elixir-nx/nx/blob/main/exla/examples/mnist.exs#L84">MNIST</a><font>), so you’ll want to initialize a tensor directly from the input bytes. You can do this using </font><code>Nx.from_binary/2</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_166094" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.from_binary(&lt;&lt;0::64-signed-native&gt;&gt;, {:s, 64})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[1]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[0]</code></div><div class="line number5 index4 alt2"><code class="erlang plain">&gt;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.from_binary(&lt;&lt;0::32-float-native&gt;&gt;, {:f, 32})</code></div><div class="line number8 index7 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[1]</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[0.0]</code></div><div class="line number11 index10 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><em>Note: You’ll likely want to brush up on binary pattern matching, creation, and manipulation as you work with <code>Nx</code>.</em></p>



<p><font>Notice </font><code>Nx.from_binary/2</code><font> requires the input type and infers the shape as a flat list. It’s not really possible to infer the type directly from the input type. You can cast the type to pretty much anything, but this will likely lead to unexpected results:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_896474" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div><div class="line number23 index22 alt2"><font>23</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.from_binary(&lt;&lt;1::64-float-native&gt;&gt;, {:f, 64})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[1]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[1.0]</code></div><div class="line number5 index4 alt2"><code class="erlang plain">&gt;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.from_binary(&lt;&lt;1::64-float-native&gt;&gt;, {:f, 32})</code></div><div class="line number8 index7 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[2]</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[0.0, 1.875]</code></div><div class="line number11 index10 alt2"><code class="erlang plain">&gt;</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.from_binary(&lt;&lt;1::64-float-native&gt;&gt;, {:s, 64})</code></div><div class="line number14 index13 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number15 index14 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[1]</code></div><div class="line number16 index15 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[4607182418800017408]</code></div><div class="line number17 index16 alt2"><code class="erlang plain">&gt;</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.from_binary(&lt;&lt;1::64-float-native&gt;&gt;, {:u, 8})</code></div><div class="line number20 index19 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number21 index20 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">u8[8]</code></div><div class="line number22 index21 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[0, 0, 0, 0, 0, 0, 240, 63]</code></div><div class="line number23 index22 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Both the shape and values change based on the input type! This can lead to some unexpected bugs, you’ll need to ensure your input types line up to avoid unexpected behavior. Notice </font><code>Nx.from_binary/2</code><font> always creates flat lists. If you have an input that you need to be multi-dimensional, you’ll want to use </font><code>Nx.reshape/2</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_746310" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; t = </code><code class="erlang constants">Nx</code><code class="erlang plain">.from_binary(&lt;&lt;1::64-float-native&gt;&gt;, type: {:f, 64})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.reshape(t, {1, 1, 1, 1})</code></div><div class="line number3 index2 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f64[1][1][1][1]</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1]</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number12 index11 alt1"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Initially, you might be concerned about efficiency, but </font><code>Nx.reshape/2</code><font> is actually just a meta operation. The implementation doesn’t move the underlying bytes at all, it just changes the shape property of the input tensor! A drawback of this approach is that you need to know the shape of your input data ahead of time. But, when you know the input shape and type, and you’re able to get raw bytes of data, you should prefer </font><code>Nx.from_binary/2</code><font> over </font><code>Nx.tensor/2</code><font>.</font></p>



<h2 class="wp-block-heading"><font>Broadcasting</font></h2>



<p><font>If you’re familiar with NumPy, PyTorch or TensorFlow, you might initially be concerned that </font><code>Nx</code><font> is missing something akin to </font><code>np.full</code><font> or </font><code>np.full_like</code><font>. Fortunately, you can achieve the same thing with </font><code>Nx.broadcast/2</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_110425" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; zeros = </code><code class="erlang constants">Nx</code><code class="erlang plain">.broadcast(0, {2, 5})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[2][5]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0, 0, 0, 0, 0],</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0, 0, 0, 0, 0]</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number8 index7 alt1"><code class="erlang plain">&gt;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="erlang plain">iex&gt; ones_like_zeros = </code><code class="erlang constants">Nx</code><code class="erlang plain">.broadcast(1, zeros)</code></div><div class="line number11 index10 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[2][5]</code></div><div class="line number13 index12 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number14 index13 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1, 1, 1, 1, 1],</code></div><div class="line number15 index14 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1, 1, 1, 1, 1]</code></div><div class="line number16 index15 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number17 index16 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Thanks to scalar broadcasting, you can create full tensors from shapes and other tensors! If you want to dictate the output type, you should wrap the scalar in a call to </font><code>Nx.tensor/2</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_269192" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.broadcast(</code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor(0, type: {:bf, 16}), {2, 2})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">bf16[2][2]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0.0, 0.0],</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0.0, 0.0]</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number8 index7 alt1"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<h2 class="wp-block-heading"><font>Counting Up</font></h2>



<p><font>Another useful tensor creation method is </font><code>Nx.iota/2</code><font>. </font><code>Nx.iota/2</code><font> is like </font><code><a href="https://numpy.org/doc/stable/reference/generated/numpy.arange.html">np.arange</a></code><font> – it counts up along a given axis:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_810790" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.iota({2, 5}, axis: 1)</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[2][5]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0, 1, 2, 3, 4],</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0, 1, 2, 3, 4]</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number8 index7 alt1"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>If no axis is given, it will count up the entire tensor:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_648578" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.iota({2, 5})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[2][5]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0, 1, 2, 3, 4],</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[5, 6, 7, 8, 9]</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number8 index7 alt1"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>As with most tensor creation methods, you can specify a type and names:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_899123" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.iota({1}, type: {:bf, 16}, names: [:data]</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">bf16[data: 1]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[0]</code></div><div class="line number5 index4 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You can also pass another tensor as a shape:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_519290" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = </code><code class="erlang constants">Nx</code><code class="erlang plain">.broadcast(0, {2, 5})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.iota(a)</code></div><div class="line number3 index2 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[2][5]</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0, 1, 2, 3, 4],</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[5, 6, 7, 8, 9]</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number9 index8 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>If you want to evenly space the tensor, you can achieve that with multiplication:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_321848" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.multiply(</code><code class="erlang constants">Nx</code><code class="erlang plain">.iota({2, 5}, axis: 1), 3)</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[2][5]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0, 3, 6, 9, 12],</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0, 3, 6, 9, 12]</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number8 index7 alt1"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><code>Nx.iota/2</code><font> can also be useful in creating other tensor creation methods, like </font><code>eye</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_257249" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.equal(</code><code class="erlang constants">Nx</code><code class="erlang plain">.iota({3, 3}, axis: 0), </code><code class="erlang constants">Nx</code><code class="erlang plain">.iota({3, 3}, axis: 1))</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">u8[3][3]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1, 0, 0],</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0, 1, 0],</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0, 0, 1]</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number9 index8 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You’ll notice you can build a number of creation methods simply out of primitives like </font><code>Nx.iota/2</code><font>! </font></p>



<h2 class="wp-block-heading"><font>Random Numbers</font></h2>



<p><code>Nx</code><font> currently has two primitives for generating random numbers: </font><code>Nx.random_uniform</code><font> and </font><code>Nx.random_normal</code><font>. As with other creation methods, you can pass types, names, shapes, and tensors to create new randomly generated tensors:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_854972" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div><div class="line number23 index22 alt2"><font>23</font></div><div class="line number24 index23 alt1"><font>24</font></div><div class="line number25 index24 alt2"><font>25</font></div><div class="line number26 index25 alt1"><font>26</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = </code><code class="erlang constants">Nx</code><code class="erlang plain">.random_uniform({2, 2})</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[2][2]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0.02345350757241249, 0.7847864031791687],</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0.11917673051357269, 0.040481213480234146]</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number8 index7 alt1"><code class="erlang plain">&gt;</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.random_normal(a)</code></div><div class="line number11 index10 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[2][2]</code></div><div class="line number13 index12 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number14 index13 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[-0.8182370662689209, -0.21420666575431824],</code></div><div class="line number15 index14 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[-0.8946113586425781, 0.5302359461784363]</code></div><div class="line number16 index15 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number17 index16 alt2"><code class="erlang plain">&gt;</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.random_uniform({2, 2}, 0, 5, type: {:u, 32})</code></div><div class="line number20 index19 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number21 index20 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">u32[2][2]</code></div><div class="line number22 index21 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number23 index22 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[3, 2],</code></div><div class="line number24 index23 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1, 2]</code></div><div class="line number25 index24 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number26 index25 alt1"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Both </font><code>Nx.random_uniform</code><font> and </font><code>Nx.random_normal</code><font> optionally take 2 additional arguments. For </font><code>Nx.random_uniform</code><font>, these arguments are </font><code>min</code><font> and </font><code>max</code><font> of the random interval </font><code>[min, max)</code><font>. For </font><code>Nx.random_normal</code><font>, these arguments are the </font><code>mean</code><font> and </font><code>scale</code><font> of the distribution.</font></p>



<p><code>Nx.random_x</code><font> methods prove useful when creating other random-like methods. For example, you can create a random mask using </font><code>Nx.random_uniform</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_616802" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; probability = 0.5</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.select(</code><code class="erlang constants">Nx</code><code class="erlang plain">.less_equal(</code><code class="erlang constants">Nx</code><code class="erlang plain">.random_uniform({5, 5}), probability),</code></div><div class="line number3 index2 alt2"><code class="erlang plain">...&gt; 0,</code></div><div class="line number4 index3 alt1"><code class="erlang plain">...&gt; 1)</code></div><div class="line number5 index4 alt2"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[5][5]</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1, 0, 0, 0, 0],</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0, 1, 0, 1, 1],</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1, 1, 0, 0, 1],</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1, 1, 1, 1, 0],</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[0, 1, 1, 1, 0]</code></div><div class="line number13 index12 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number14 index13 alt1"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<h2 class="wp-block-heading"><font>Templates</font></h2>



<p><code>Nx</code><font> also has a template creation method that defines a template for an expected future value. This is useful for things like ahead-of-time compilation. You can create templates using </font><code>Nx.template/3</code><font>, but you won’t be able to use the resulting tensor anywhere:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_556615" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; t = </code><code class="erlang constants">Nx</code><code class="erlang plain">.template({4, 4, 4}, {:f, 32}, names: [:x, :y, :z])</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">f32[x: 4][y: 4][z: 4]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">TemplateBackend</code></div><div class="line number5 index4 alt2"><code class="erlang plain">&gt;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.add(t, 1)</code></div><div class="line number8 index7 alt1"><code class="erlang plain">** (</code><code class="erlang constants">RuntimeError</code><code class="erlang plain">) cannot perform operations on a </code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">TemplateBackend</code> <code class="erlang plain">tensor</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Hopefully this gives you a primer on ways to create tensors in </font><code>Nx</code><font>. If you have any questions or issues, let me know! </font></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-220" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-220" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-175065622-220-643008f1a5583" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=220&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-220-643008f1a5583&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-220-643008f1a5583" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-175065622-220-643008f1a5583" src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=220&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-220-643008f1a5583&amp;domain=seanmoriarity.com" height="55px" width="100%" frameborder="0" scrolling="no" title="Like or Reblog"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="188" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/02/24/nx-tip-of-the-week-2-tensor-manipulation-for-elixir-programmers/" title="Nx Tip of the Week #2 &amp;#8211; Tensor Operations for Elixir&amp;nbsp;Programmers" data-origin="220" data-position="0">Nx Tip of the Week #2 – Tensor Operations for Elixir&nbsp;Programmers</a></span><time class="jp-relatedposts-post-date" datetime="February 24, 2021" style="display: block;">February 24, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="404" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2022/02/21/nx-tip-of-the-week-14-slicing-and-indexing/" title="Nx Tip of the Week #14 &amp;#8211; Slicing and&amp;nbsp;Indexing" data-origin="220" data-position="1">Nx Tip of the Week #14 – Slicing and&nbsp;Indexing</a></span><time class="jp-relatedposts-post-date" datetime="February 21, 2022" style="display: block;">February 21, 2022</time><span class="jp-relatedposts-post-context">In "elixir"</span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="246" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/03/11/nx-tip-of-the-week-4-using-keywords/" title="Nx Tip of the Week #4 &amp;#8211; Using&amp;nbsp;Keywords" data-origin="220" data-position="2">Nx Tip of the Week #4 – Using&nbsp;Keywords</a></span><time class="jp-relatedposts-post-date" datetime="March 11, 2021" style="display: block;">March 11, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
		<ul class="post-tags light-text"><li><font>Tagged</font></li><li><a href="https://seanmoriarity.com/tag/elixir/" rel="tag">elixir</a></li><li><a href="https://seanmoriarity.com/tag/nx/" rel="tag">nx</a></li><li><a href="https://seanmoriarity.com/tag/nx-totw/" rel="tag">nx totw</a></li></ul><!-- .post-tags -->	</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published" datetime="2021-03-04T10:17:04-05:00">March 4, 2021</time><time class="updated" datetime="2021-03-04T10:24:33-05:00">March 4, 2021</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2021/02/24/nx-tip-of-the-week-2-tensor-manipulation-for-elixir-programmers/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Nx Tip of the Week #2 – Tensor Operations for Elixir&nbsp;Programmers</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2021/03/11/nx-tip-of-the-week-4-using-keywords/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Nx Tip of the Week #4 – Using&nbsp;Keywords</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
			<h2 class="comments-title"><font>
			2 thoughts on “</font><span>Nx Tip of the Week #3 – Many Ways to Create&nbsp;Arrays*</span><font>”		</font></h2><!-- .comments-title -->

		
		<ol class="comment-list">
					<li id="comment-11" class="comment even thread-even depth-1 parent highlander-comment">
			<article id="div-comment-11" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="https://1.gravatar.com/avatar/4a1ba62971e109fc38bd3c7961d41d04?s=72&amp;d=identicon&amp;r=G" class="avatar avatar-48 grav-hashed grav-hijack" height="48" width="48" id="grav-4a1ba62971e109fc38bd3c7961d41d04-0" originals="48" src-orig="https://1.gravatar.com/avatar/4a1ba62971e109fc38bd3c7961d41d04?s=48&amp;d=identicon&amp;r=G" scale="1.5">						<b class="fn"><a href="http://gravatar.com/sbmaximov" class="url" rel="ugc external nofollow">smaximov</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/#comment-11"><time datetime="2021-03-25T09:47:13-04:00">March 25, 2021 at 9:47 am</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p><font>Thank you for this series, it’s an interesting read!</font></p>
<p><font>&gt; Notice Nx.tensor/2 infers the type and calculates the ship of your input list or scalar</font></p>
<p><font>Did you mean “calculates the shape of your input list or scalar”?</font></p>
<p id="comment-like-11" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/?like_comment=11&amp;_wpnonce=c8691f517e" class="comment-like-link needs-login" rel="nofollow" data-blog="175065622"><span>Like</span></a><span id="comment-like-count-11" class="comment-like-feedback"><font>Like</font></span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/?replytocom=11#respond" data-commentid="11" data-postid="220" data-belowelement="div-comment-11" data-respondelement="respond" data-replyto="Reply to smaximov" aria-label="Reply to smaximov">Reply</a></div>			</article><!-- .comment-body -->
		<ol class="children">
		<li id="comment-13" class="comment byuser comment-author-seanmoriarity bypostauthor odd alt depth-2 highlander-comment">
			<article id="div-comment-13" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="https://1.gravatar.com/avatar/14d50099144bff80d0634fbd4cafb248?s=72&amp;d=identicon&amp;r=G" class="avatar avatar-48 grav-hashed grav-hijack" height="48" width="48" id="grav-14d50099144bff80d0634fbd4cafb248-0" originals="48" src-orig="https://1.gravatar.com/avatar/14d50099144bff80d0634fbd4cafb248?s=48&amp;d=identicon&amp;r=G" scale="1.5">						<b class="fn">seanmoriarity</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/#comment-13"><time datetime="2021-03-31T13:56:33-04:00">March 31, 2021 at 1:56 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p><font>Yes, thanks for pointing this out!</font></p>
<p id="comment-like-13" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/?like_comment=13&amp;_wpnonce=a85fcc7c22" class="comment-like-link needs-login" rel="nofollow" data-blog="175065622"><span>Like</span></a><span id="comment-like-count-13" class="comment-like-feedback"><font>Like</font></span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/?replytocom=13#respond" data-commentid="13" data-postid="220" data-belowelement="div-comment-13" data-respondelement="respond" data-replyto="Reply to seanmoriarity" aria-label="Reply to seanmoriarity">Reply</a></div>			</article><!-- .comment-body -->
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=41&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" originals="25" src-orig="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-0">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-1">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="220" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="82c86735fd"></p>
<input type="hidden" name="genseq" value="1680869617">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869616974"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2021/03/11/nx-tip-of-the-week-4-using-keywords/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-246" class="post-246 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw">
			<header class="entry-header">
			<h1 class="entry-title"><font>Nx Tip of the Week #4 – Using&nbsp;Keywords</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published updated" datetime="2021-03-11T10:16:11-05:00">March 11, 2021</time>			</span>

			<span class="word-count">3 Minutes</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><font>Numerical definitions can only accept tensors or numbers as positional arguments; however, you can get around this inflexibility using keyword lists. You can pass and use optional keyword arguments in your numerical definitions with the </font><code>keyword!</code><font> method. Let’s take a look at some ways this might be useful.</font></p>



<h2 class="wp-block-heading"><font>Parameter Initializers</font></h2>



<p><font>In many ML applications, you often start with an initial set of model parameters. Your initial parameters are a starting point for your model and can have a severe impact on whether or not your model converges. The importance of parameter initialization motivates the use of initialization functions outside of the standard </font><code>random_uniform</code><font> or </font><code>random_normal</code><font> distributions. For example, it’s common to initialize the biases of layers in a neural network to a uniform tensor of zeros:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_805260" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">iex&gt; biases = Nx.broadcast(0.0, {2, 2})</code></div><div class="line number2 index1 alt1"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">f32[2][2]</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">[</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[0.0, 0.0],</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[0.0, 0.0]</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">]</code></div><div class="line number8 index7 alt1"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>But what if you want to generalize this to an initialization function to reuse? Unfortunately, you can’t do:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_794657" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defn zeros(shape) do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">Nx.broadcast(0.0, shape)</code></div><div class="line number3 index2 alt2"><code class="plain plain">end</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="plain plain">iex&gt; zeros({2, 2})</code></div><div class="line number6 index5 alt1"><code class="plain plain">** (ArgumentError) defn functions expects either numbers or tensors as arguments. If you want to pass Elixir values, they need to be sent as options and tagged as default arguments. Got: {2, 2}</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You can get around this using optional keyword lists:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_938879" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defn zeros(opts \\ []) do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">opts = keyword!(opts, [:shape])</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">Nx.broadcast(0.0, opts[:shape])</code></div><div class="line number4 index3 alt1"><code class="plain plain">end</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="plain plain">iex&gt; zeros(shape: {2, 2})</code></div><div class="line number7 index6 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">f32[2][2]</code></div><div class="line number9 index8 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">[</code></div><div class="line number10 index9 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[0.0, 0.0],</code></div><div class="line number11 index10 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[0.0, 0.0]</code></div><div class="line number12 index11 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">]</code></div><div class="line number13 index12 alt2"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Notice: you must tag keyword lists with a default argument </font><code>[]</code><font> and extract or assign values using the </font><code>keyword!</code><font> method. </font><code>keyword!</code><font> validates the arguments in the passed keyword list, and optionally assigns defaults:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_781607" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defn zeros(opts \\ []) do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">opts = keyword!(opts, [:shape, type: {:f, 32})</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">Nx.broadcast(Nx.tensor(0, type: opts[:type]), opts[:shape])</code></div><div class="line number4 index3 alt1"><code class="plain plain">end</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="plain plain">iex&gt; zeros(shape: {2, 2})</code></div><div class="line number7 index6 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">f32[2][2]</code></div><div class="line number9 index8 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">[</code></div><div class="line number10 index9 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[0.0, 0.0],</code></div><div class="line number11 index10 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[0.0, 0.0]</code></div><div class="line number12 index11 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">]</code></div><div class="line number13 index12 alt2"><code class="plain plain">&gt;</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="plain plain">iex&gt; zeros(shape: {2, 2}, type: {:bf, 16})</code></div><div class="line number16 index15 alt1"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number17 index16 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">bf16[2][2]</code></div><div class="line number18 index17 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">[</code></div><div class="line number19 index18 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[0.0, 0.0],</code></div><div class="line number20 index19 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[0.0, 0.0]</code></div><div class="line number21 index20 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">]</code></div><div class="line number22 index21 alt1"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<h2 class="wp-block-heading"><font>Passing Flags</font></h2>



<p><font>Sometimes, you want to pass and use booleans or atoms to take certain code paths. You can achieve this using transforms and keywords:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_78617" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div><div class="line number23 index22 alt2"><font>23</font></div><div class="line number24 index23 alt1"><font>24</font></div><div class="line number25 index24 alt2"><font>25</font></div><div class="line number26 index25 alt1"><font>26</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defn my_function(x, opts \\ []) do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">opts = keyword!(opts, [mode: :sin])</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">transform({x, opts[:mode]},</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">fn</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">{x, :sin} -&gt; Nx.sin(x)</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">{x, :cos} -&gt; Nx.cos(x)</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">{x, :tan} -&gt; Nx.tan(x)</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">end</code></div><div class="line number9 index8 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">)</code></div><div class="line number10 index9 alt1"><code class="plain plain">end</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="plain plain">iex&gt; Test.my_function(1, mode: :sin)</code></div><div class="line number13 index12 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number14 index13 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">f32</code></div><div class="line number15 index14 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">0.8414709568023682</code></div><div class="line number16 index15 alt1"><code class="plain plain">&gt;</code></div><div class="line number17 index16 alt2"><code class="plain plain">iex&gt; Test.my_function(1, mode: :cos)</code></div><div class="line number18 index17 alt1"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number19 index18 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">f32</code></div><div class="line number20 index19 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">0.5403022766113281</code></div><div class="line number21 index20 alt2"><code class="plain plain">&gt;</code></div><div class="line number22 index21 alt1"><code class="plain plain">iex&gt; Test.my_function(1, mode: :tan)</code></div><div class="line number23 index22 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number24 index23 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">f32</code></div><div class="line number25 index24 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">1.5574077367782593</code></div><div class="line number26 index25 alt1"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>With booleans, you can use a macro to use your options with if-statements:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_220649" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div><div class="line number23 index22 alt2"><font>23</font></div><div class="line number24 index23 alt1"><font>24</font></div><div class="line number25 index24 alt2"><font>25</font></div><div class="line number26 index25 alt1"><font>26</font></div><div class="line number27 index26 alt2"><font>27</font></div><div class="line number28 index27 alt1"><font>28</font></div><div class="line number29 index28 alt2"><font>29</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defmacro to_predicate(term) do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">quote do</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">Nx.Defn.Kernel.transform(</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">unquote(term),</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">fn term -&gt; if term, do: 1, else: 0 end</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">)</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">end</code></div><div class="line number8 index7 alt1"><code class="plain plain">end</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="plain plain">defn my_function(x, opts \\ []) do</code></div><div class="line number11 index10 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">opts = keyword!(opts, [add_one?: true])</code></div><div class="line number12 index11 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">if to_predicate(opts[:add_one?]) do</code></div><div class="line number13 index12 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">x + 1</code></div><div class="line number14 index13 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">else</code></div><div class="line number15 index14 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">x</code></div><div class="line number16 index15 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">end</code></div><div class="line number17 index16 alt2"><code class="plain plain">end</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="plain plain">iex&gt; my_function(1, add_one?: true)</code></div><div class="line number20 index19 alt1"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number21 index20 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">s64</code></div><div class="line number22 index21 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">2</code></div><div class="line number23 index22 alt2"><code class="plain plain">&gt;</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="plain plain">iex&gt; my_function(1, add_one?: false)</code></div><div class="line number26 index25 alt1"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number27 index26 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">s64</code></div><div class="line number28 index27 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">1</code></div><div class="line number29 index28 alt2"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>The macro converts </font><code>true</code><font> and </font><code>false</code><font> to </font><code>1</code><font> and </font><code>0</code><font> respectively. Note that </font><code>defn</code><font> treats scalar </font><code>1</code><font> as true and scalar </font><code>0</code><font> as false (notably different from Elixir). Based on what </font><code>add_one?</code><font> is set to, your function at compile-time would look something like:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_577115" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defn my_function(x) do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">if 1 do</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">x + 1</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">else</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">x</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">end</code></div><div class="line number7 index6 alt2"><code class="plain plain">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Notice the constant </font><code>1</code><font> is inlined – most tensor compilers would see this and completely optimize the if-statement away. You get the readability without a performance hit. However, there are some things to consider when using keywords.</font></p>



<h2 class="wp-block-heading"><font>Performance Considerations</font></h2>



<p><font>From the example above, you should notice that based on the value of </font><code>add_one?</code><font>, you’re actually compiling two different programs. With booleans, this isn’t a big deal – at most you’d get hit with one extra recompilation. Numerical definitions are JIT compiled and cached based on argument shapes (at least with the EXLA compiler) to avoid unnecessary recompilations. Compilation can be expensive, so you’d like to reuse compiled computations as much as possible.</font></p>



<p><font>When using keywords, if you have a value that’s constantly changing, you will force recompilation with the new value every time. For example:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_118253" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defn my_function(opts \\ []) do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">opts = keyword!(opts, [:value])</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">opts[:value]</code></div><div class="line number4 index3 alt1"><code class="plain plain">end</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="plain plain">iex&gt; my_function(value: 0.1)</code></div><div class="line number7 index6 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">f32</code></div><div class="line number9 index8 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">0.1</code></div><div class="line number10 index9 alt1"><code class="plain plain">&gt;</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="plain plain">iex&gt; my_function(value: 0.2)</code></div><div class="line number13 index12 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number14 index13 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">f32</code></div><div class="line number15 index14 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">0.2</code></div><div class="line number16 index15 alt1"><code class="plain plain">&gt;</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="plain plain">iex&gt; my_function(value: 0.3)</code></div><div class="line number19 index18 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number20 index19 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">f32</code></div><div class="line number21 index20 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">0.3</code></div><div class="line number22 index21 alt1"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Actually compiles and uses 3 different functions! In the above example, this isn’t really that bad as compilation isn’t that expensive. However, you’ll often want to use keywords to pass hyper parameters such as learning rates or decay rates. If you want to change these rates at any point in the training process, you’ll force a recompilation of the computation – based on a somewhat minor part of the function.  In these cases, you should consider explicitly passing values as parameters and not using keywords.</font></p>



<p><font>I hope this gives you some ways to work around argument limitations in numerical definitions.</font></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-246" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2021/03/11/nx-tip-of-the-week-4-using-keywords/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-246" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2021/03/11/nx-tip-of-the-week-4-using-keywords/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-175065622-246-643009203a01e" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=246&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-246-643009203a01e&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-246-643009203a01e" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-175065622-246-643009203a01e" src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=246&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-246-643009203a01e&amp;domain=seanmoriarity.com" height="55px" width="100%" frameborder="0" scrolling="no" title="Like or Reblog"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="165" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/02/16/nx-tip-of-the-week-1-using-transforms/" title="Nx Tip of the Week #1 &amp;#8211; Using&amp;nbsp;transforms" data-origin="246" data-position="0">Nx Tip of the Week #1 – Using&nbsp;transforms</a></span><time class="jp-relatedposts-post-date" datetime="February 16, 2021" style="display: block;">February 16, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="279" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/" title="Nx Tip of the Week #6 &amp;#8211; Compiler or&amp;nbsp;Backend?" data-origin="246" data-position="1">Nx Tip of the Week #6 – Compiler or&nbsp;Backend?</a></span><time class="jp-relatedposts-post-date" datetime="March 25, 2021" style="display: block;">March 25, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="349" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2022/01/17/nx-tip-of-the-week-9-window-operations/" title="Nx Tip of the Week #9 &amp;#8211; Window&amp;nbsp;Functions" data-origin="246" data-position="2">Nx Tip of the Week #9 – Window&nbsp;Functions</a></span><time class="jp-relatedposts-post-date" datetime="January 17, 2022" style="display: block;">January 17, 2022</time><span class="jp-relatedposts-post-context">In "elixir"</span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
		<ul class="post-tags light-text"><li><font>Tagged</font></li><li><a href="https://seanmoriarity.com/tag/elixir/" rel="tag">elixir</a></li><li><a href="https://seanmoriarity.com/tag/nx/" rel="tag">nx</a></li><li><a href="https://seanmoriarity.com/tag/nx-totw/" rel="tag">nx totw</a></li></ul><!-- .post-tags -->	</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published updated" datetime="2021-03-11T10:16:11-05:00">March 11, 2021</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Nx Tip of the Week #3 – Many Ways to Create&nbsp;Arrays*</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2021/03/18/nx-tip-of-the-week-5-named-tensors/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Nx Tip of the Week #5 – Named&nbsp;Tensors</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2021/03/11/nx-tip-of-the-week-4-using-keywords/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2021/03/11/nx-tip-of-the-week-4-using-keywords/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=41&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" originals="25" src-orig="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-0">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-1">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="246" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="ed379f1de8"></p>
<input type="hidden" name="genseq" value="1680869664">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869663423"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2021/03/18/nx-tip-of-the-week-5-named-tensors/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-262" class="post-262 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw">
			<header class="entry-header">
			<h1 class="entry-title"><font>Nx Tip of the Week #5 – Named&nbsp;Tensors</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published updated" datetime="2021-03-18T10:48:41-04:00">March 18, 2021</time>			</span>

			<span class="word-count">3 Minutes</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><em>Note: The original named tensors article, <a href="http://nlp.seas.harvard.edu/NamedTensor">Tensor Considered Harmful</a>, goes through these details in much more detail and explains much better than I can. I recommend reading that as well.</em></p>



<p><font>One of my biggest frustrations when working with NumPy and TensorFlow comes when working with axes. Take for example, this TensorFlow implementation of the Mean Squared Error formula:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_533872" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python plain">mse </code><code class="python keyword">=</code> <code class="python keyword">lambda</code> <code class="python plain">x, y: tf.math.reduce_mean(tf.math.square(x </code><code class="python keyword">-</code> <code class="python plain">y), axis</code><code class="python keyword">=</code><code class="python keyword">-</code><code class="python value">1</code><code class="python plain">)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>While this is a relatively simple function, I often find myself struggling to reason immediately about what </font><code>axis=-1</code><font> is really doing. The intent of the code isn’t immediately clear. Enter</font><em> named tensors</em><font>.</font></p>



<p><code>N</code><font>x gives you the ability to name the dimensions of your tensors upon creation:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_346784" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[1, 2, 3]], names: [:batch, :data])</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[batch: 1][data: 3]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1, 2, 3]</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number7 index6 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Attaching names to dimensions makes your code more immediately understandable. For example, the same MSE implementation in </font><code>Nx</code><font> can look like:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_637639" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; mse = fn x, y -&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.mean(</code><code class="erlang constants">Nx</code><code class="erlang plain">.power(x - y, 2), axes: [:data])</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>It’s immediately clear that your goal is to take the mean of the squared difference along the </font><code>:data</code><font> dimension. Additionally, it allows you to enforce some restrictions on the format of data coming in to your functions. The above function will fail if there is no </font><code>:data</code><font> dimension in the passed tensors.</font></p>



<p><font>Named tensors make other operations easier to reason about as well. Imagine you want to flip an image horizontally. There are two common image data formats: channels first and channels last. Given this, normally you would have to write a method that either explicitly enforces one format, or accepts the format and handles it accordingly. With named tensors, you can simply access the correct dimension using it’s name:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_336180" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defn flip_left_right(x) do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">x |&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.reverse(axes: [:width])</code></div><div class="line number3 index2 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Whether the image comes in with names: </font><code>[:batch, :channels, :height, :width]</code><font> or </font><code>[:batch, :height, :width, :channels]</code><font>, your method will always work because </font><code>Nx</code><font> normalizes axes with respect to the names of the given tensor.</font></p>



<p><font>Imagine now you want to enforce the data format of your image is always channels first. You can do this by transposing using names:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_580511" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defn channels_first(x) do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">x |&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.transpose(axes: [:batch, :channels, :height, :width])</code></div><div class="line number3 index2 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Once again, no matter the format of the image, your method will always succeed. Additionally, it provides a sort of automatic check on the dimensions of the input. You wouldn’t expect the above method to work on anything but images.</font></p>



<h2 class="wp-block-heading"><font>Broadcasting</font></h2>



<p><font>Named tensors also provide some safety with respect to broadcasting. Imagine you have two tensors:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_874411" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; t1 = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[1, 2, 3]], names: [:batch, :data]</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[batch: 1][data: 3]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1, 2, 3]</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number7 index6 alt2"><code class="erlang plain">&gt;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="erlang plain">iex&gt; t2 = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[1, 2, 3]], names: [:x, :y]</code></div><div class="line number10 index9 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[x: 1][y: 3]</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number13 index12 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1, 2, 3]</code></div><div class="line number14 index13 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number15 index14 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You’ll notice the shapes of these two tensors are compatible – that is if you tried to add, subtract, multiply, etc. them together, it would succeed. But, does that really make sense? How does the </font><code>:batch</code><font> dimension really line up with </font><code>:x</code><font>? Semantically, it doesn’t make sense. If you were to try to add these tensors together, it would fail:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_212637" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.add(t1, t2)</code></div><div class="line number2 index1 alt1"><code class="erlang plain">** (</code><code class="erlang constants">ArgumentError</code><code class="erlang plain">) cannot merge names :data, :y</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">(nx 0.1.0-dev) lib/nx/shape.</code><code class="erlang functions">ex:1001</code><code class="erlang plain">: </code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Shape</code><code class="erlang plain">.merge_names!/2</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">(nx 0.1.0-dev) lib/nx/shape.</code><code class="erlang functions">ex:220</code><code class="erlang plain">: </code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Shape</code><code class="erlang plain">.binary_broadcast/6</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">(nx 0.1.0-dev) lib/nx/shape.</code><code class="erlang functions">ex:200</code><code class="erlang plain">: </code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Shape</code><code class="erlang plain">.binary_broadcast/4</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">(nx 0.1.0-dev) lib/nx.</code><code class="erlang functions">ex:2424</code><code class="erlang plain">: </code><code class="erlang constants">Nx</code><code class="erlang plain">.element_wise_bin_op/4</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>In order to perform binary operations on named tensors, the names must align. This means they must either match, or one of the names must be </font><code>nil</code><font> (considered a wild card name). When broadcasting between named and unnamed dimensions, the resulting tensor merges names:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_180898" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div><div class="line number23 index22 alt2"><font>23</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; t1 = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[1, 2, 3]], names: [:batch, nil])</code></div><div class="line number2 index1 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[batch: 1][3]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1, 2, 3],</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number7 index6 alt2"><code class="erlang plain">&gt;</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="erlang plain">iex&gt; t2 = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[1, 2, 3]], names: [nil, :data])</code></div><div class="line number10 index9 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[1][data: 3]</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number13 index12 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1, 2, 3]</code></div><div class="line number14 index13 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number15 index14 alt2"><code class="erlang plain">&gt;</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.add(t1, t2)</code></div><div class="line number18 index17 alt1"><code class="erlang plain">#</code><code class="erlang constants">Nx</code><code class="erlang plain">.</code><code class="erlang constants">Tensor</code><code class="erlang plain">&lt;</code></div><div class="line number19 index18 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">s64[batch: 1][data: 3]</code></div><div class="line number20 index19 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">[</code></div><div class="line number21 index20 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">[1, 2, 3]</code></div><div class="line number22 index21 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">]</code></div><div class="line number23 index22 alt2"><code class="erlang plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Most operations have specific name rules that validate the operation can be performed correctly on the given tensors.</font></p>



<p><font>Named tensors are relatively new, but are already gaining traction in other frameworks like </font><a href="https://pytorch.org/">PyTorch</a><font>, </font><a href="http://xarray.pydata.org/en/stable/">xarray</a><font>, and </font><a href="http://einops.rocks/">einops</a><font>.  Named tensors within </font><code>Nx</code><font> have definitely not been fully explored. I highly recommend reading the original Named tensors proposal, and exploring named tensors in other libraries for inspiration on what is possible within </font><code>Nx.</code></p>



<p></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-262" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2021/03/18/nx-tip-of-the-week-5-named-tensors/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-262" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2021/03/18/nx-tip-of-the-week-5-named-tensors/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded" id="like-post-wrapper-175065622-262-643009373d8b3" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=262&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-262-643009373d8b3&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-262-643009373d8b3" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="349" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2022/01/17/nx-tip-of-the-week-9-window-operations/" title="Nx Tip of the Week #9 &amp;#8211; Window&amp;nbsp;Functions" data-origin="262" data-position="0">Nx Tip of the Week #9 – Window&nbsp;Functions</a></span><time class="jp-relatedposts-post-date" datetime="January 17, 2022" style="display: block;">January 17, 2022</time><span class="jp-relatedposts-post-context">In "elixir"</span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="220" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/03/04/nx-tip-of-the-week-3-many-ways-to-create-arrays/" title="Nx Tip of the Week #3 &amp;#8211; Many Ways to Create&amp;nbsp;Arrays*" data-origin="262" data-position="1">Nx Tip of the Week #3 – Many Ways to Create&nbsp;Arrays*</a></span><time class="jp-relatedposts-post-date" datetime="March 4, 2021" style="display: block;">March 4, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="188" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/02/24/nx-tip-of-the-week-2-tensor-manipulation-for-elixir-programmers/" title="Nx Tip of the Week #2 &amp;#8211; Tensor Operations for Elixir&amp;nbsp;Programmers" data-origin="262" data-position="2">Nx Tip of the Week #2 – Tensor Operations for Elixir&nbsp;Programmers</a></span><time class="jp-relatedposts-post-date" datetime="February 24, 2021" style="display: block;">February 24, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
		<ul class="post-tags light-text"><li><font>Tagged</font></li><li><a href="https://seanmoriarity.com/tag/elixir/" rel="tag">elixir</a></li><li><a href="https://seanmoriarity.com/tag/nx/" rel="tag">nx</a></li><li><a href="https://seanmoriarity.com/tag/nx-totw/" rel="tag">nx totw</a></li></ul><!-- .post-tags -->	</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published updated" datetime="2021-03-18T10:48:41-04:00">March 18, 2021</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2021/03/11/nx-tip-of-the-week-4-using-keywords/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Nx Tip of the Week #4 – Using&nbsp;Keywords</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Nx Tip of the Week #6 – Compiler or&nbsp;Backend?</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2021/03/18/nx-tip-of-the-week-5-named-tensors/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2021/03/18/nx-tip-of-the-week-5-named-tensors/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=41&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" originals="25" src-orig="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-0">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-1">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="262" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="b0d9d65ccd"></p>
<input type="hidden" name="genseq" value="1680869687">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869686423"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-279" class="post-279 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw">
			<header class="entry-header">
			<h1 class="entry-title"><font>Nx Tip of the Week #6 – Compiler or&nbsp;Backend?</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published updated" datetime="2021-03-25T07:45:48-04:00">March 25, 2021</time>			</span>

			<span class="word-count">7 Minutes</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><em>I’ve recently seen some confusion with respect to compilers and backends. This post is intended to clear up some of that confusion.</em> <em>TLDR: If performance matters, benchmark and decide. If you need flexibility or want to prototype quickly and not sacrifice speed, backends are a good choice. If you need AOT compilation or your programs are very computationally intensive, compilers work better. Library writers should always write library functions in <code>defn</code> to leave this choice to the user.</em></p>



<p><font>The </font><code>Nx</code><font> library is a standalone Elixir project that defines the main API for working with tensors; however, </font><code>Nx</code><font> is very much a “batteries-excluded” library. The power of </font><code>Nx</code><font> is in it’s flexibility. While the library contains pure Elixir implementations of every function in the main API, </font><code>Nx</code><font> is designed to integrate with </font><em>compilers</em><font> and </font><em>backends</em><font> with highly-optimized, native tensor manipulation routines. It’s important to understand the distinction between an </font><code>Nx</code><font> compiler and an </font><code>Nx</code><font> backend. At the time of this writing, </font><a href="https://github.com/elixir-nx/nx/tree/main/exla">EXLA</a><font> is the only available compiler, and </font><a href="https://github.com/elixir-nx/nx/tree/main/torchx">Torchx</a><font> is the only available backend. We will frame the difference with respect to these 2 implementations; however, these differences will likely hold true for other backends and compilers as well.</font></p>



<p><font>For those familiar with paradigms in other frameworks such as TensorFlow and PyTorch, the distinction between compilers and backends is similar to the distinction between graph mode and eager execution. Let’s try to understand this distinction with a simple example – </font><em>softmax</em><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_618414" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">@defn_compiler </code><code class="erlang constants">EXLA</code></div><div class="line number2 index1 alt1"><code class="erlang plain">defn softmax_compiler(x) do</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">max_val = </code><code class="erlang constants">Nx</code><code class="erlang plain">.reduce_max(x)</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Nx</code><code class="erlang plain">.exp(x - max_val) / </code><code class="erlang constants">Nx</code><code class="erlang plain">.sum(</code><code class="erlang constants">Nx</code><code class="erlang plain">.exp(x - max_val))</code></div><div class="line number5 index4 alt2"><code class="erlang keyword">end</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="erlang plain">def softmax_backend(x) do</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Nx</code><code class="erlang plain">.default_backend(</code><code class="erlang constants">Torchx</code><code class="erlang plain">)</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">max_val = </code><code class="erlang constants">Nx</code><code class="erlang plain">.reduce_max(x)</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Nx</code><code class="erlang plain">.exp(x - max_val) / </code><code class="erlang constants">Nx</code><code class="erlang plain">.sum(</code><code class="erlang constants">Nx</code><code class="erlang plain">.exp(x - max_val))</code></div><div class="line number11 index10 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Softmax is a function that accepts a list of numbers, and returns an equally sized list of probabilities – scaled according to their magnitude relative to other numbers in the list. You can see the implementation for softmax is quite simple. One thing to note in the implementation above is the presence of </font><code>max_val</code><font> – which acts as guard against the common numerical stability issues of </font><em>underflow</em><font> and </font><em>overflow</em><font>. </font><code>max_val</code><font> has no impact on the result of the softmax function, but instead ensures intermediate values don’t grow too large or too small to fit in a finite-sized floating point or integer representation of the value.</font></p>



<p><font>You’ll notice the implementations above are subtly different in two ways:</font></p>



<ol><li><font>The first function uses </font><code>defn</code><font> – designating this method is a numerical definition and should be treated as such. The second function is a regular Elixir function.</font></li><li><font>The first function adds the attribute </font><code>@defn_compiler EXLA</code><font> – telling Elixir to compile and run this definition with the EXLA compiler. The second function uses a call to </font><code>Nx.default_backend(Torchx)</code><font> – telling Elixir to dispatch </font><code>Nx</code><font> calls to their </font><code>Torchx</code><font> implementation.</font></li></ol>



<p><font>If you compile and run this example, you should notice that, aside from minor differences in precision, each function arrives at approximately the same result. So how exactly are the subtle differences in implementation actually manifesting themselves at runtime? And why would you want to prefer a compiler over a backend or vice-versa? To understand, we’ll need to discuss what’s happening under the hood.</font></p>



<p><font>Implementations of the </font><code>Nx</code><font> API in the </font><code>Nx</code><font> module are actually meta-implementations that dispatch to third-party implementations of the same function at runtime. These meta-implementations act like contracts for functions in the </font><code>Nx</code><font> API – normalizing arguments and types, checking shape compatibility, and calculating output shapes before dispatching to an actual implementation. So, you can arbitrarily switch backends and somewhat guarantee your </font><code>Nx</code><font> implementations will remain unchanged (in reality there are some cases where implementation specific details may affect you, but they are documented).</font></p>



<p><font>In the </font><code>Torchx</code><font> softmax implementation above, </font><code>Nx</code><font> will dispatch to the </font><code>Torchx</code><font> NIF implementations of </font><code>max</code><font>, </font><code>exp</code><font>, </font><code>sum</code><font>, </font><code>subtract</code><font>, and </font><code>divide</code><font> – returning control to the VM between each call and realizing the result of each intermediate computation before completing the next. Because it’s a regular Elixir function, you can arbitrarily mix </font><code>Nx</code><font> code with Elixir code:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_807481" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">def softmax_backend(x) do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Nx</code><code class="erlang plain">.default_backend(</code><code class="erlang constants">Torchx</code><code class="erlang plain">)</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">max_val = </code><code class="erlang constants">Nx</code><code class="erlang plain">.max(x) |&gt; </code><code class="erlang constants">IO</code><code class="erlang plain">.inspect</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">{:ok, exp_x} =</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">case</code> <code class="erlang plain">:ok do</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">:ok -&gt; {:ok, </code><code class="erlang constants">Nx</code><code class="erlang plain">.exp(x - max_val)}</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">_ -&gt; {:error, </code><code class="erlang string">"BAD"</code><code class="erlang plain">}</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">if</code> <code class="erlang plain">true do</code></div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">exp_x / </code><code class="erlang constants">Nx</code><code class="erlang plain">.sum(exp_x)</code></div><div class="line number13 index12 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">else</code></div><div class="line number14 index13 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{:error, </code><code class="erlang string">"BAD"</code><code class="erlang plain">}</code></div><div class="line number15 index14 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number16 index15 alt1"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>This has the obvious benefit of flexibility – </font><code>defn</code><font> is a much more restrictive subset of the language (although it can be trivially extended). However, this flexibility comes at a performance cost. As I mentioned before, backends return control to the Elixir program between subsequent calls to </font><code>Nx</code><font> functions. With numerically intensive programs that rely on a lot of calls to </font><code>Nx</code><font> functions – this dispatching adds up and can often manifest itself in significant performance and memory bottlenecks. So how does this differ from the compiler implementation?</font></p>



<p><code>defn</code><font> adds another layer of indirection to the program execution. While calls to </font><code>Nx</code><font> outside of </font><code>defn</code><font> dispatch to backends which evaluate the result of the computation, calls to </font><code>Nx</code><font> within </font><code>defn</code><font> dispatch to an </font><code>Expr</code><font> backend – which builds a call graph or evaluation trace of the definition. Internally, the expression looks something like:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_595728" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">f32</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">Nx.Defn.Expr</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">parameter a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s64</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">b = reduce_max [ a, axes: nil, keep_axes: false ]&nbsp; s64</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">c = subtract [ a, b ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s64</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">d = exp [ c ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f32</code></div><div class="line number9 index8 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">e = subtract [ a, b ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s64</code></div><div class="line number10 index9 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">f = exp [ e ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f32</code></div><div class="line number11 index10 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">g = sum [ f, axes: nil, keep_axes: false ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f32</code></div><div class="line number12 index11 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">h = divide [ d, g ]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f32</code></div><div class="line number13 index12 alt2"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You can think of this expression as a kind of numerical assembly code which defines the low-level instructions for your program. When you invoke </font><code>softmax_compiler</code><font> Elixir sends this expression to a compiler, in this example the EXLA compiler, which just-in-time compiles a specialized program based on your input shape, type, and operations. This program is then cached, so subsequent calls to the same function with the same input shapes and types don’t need to recompile the original program. Notably, rather than dispatching and returning between calls to </font><code>max</code><font>, </font><code>sum</code><font>, </font><code>exp</code><font>, </font><code>divide</code><font> and </font><code>subtract</code><font>, JIT compiled programs are treated as single units of execution. So calls to </font><code>softmax_compiler</code><font> invoke a single specialized executable for your numerical definition. In other words, calls to </font><code>max</code><font>, </font><code>sum</code><font>, </font><code>exp</code><font>, </font><code>divide</code><font>, and </font><code>subtract</code><font> are fused into a single call.</font></p>



<p><font>Staging the computation in this way opens up the door to (potentially significant) performance and memory optimizations – you can learn more about these optimizations by researching XLA or other tensor compilers. However, these enhancements are not free. One thing you’ll notice when working with numerical definitions is that the first invocation of a </font><code>defn</code><font> is much slower than subsequent calls. That’s because the first invocation needs to do the work of compiling the program – depending on the size of the computation, this may require lots of time relative to program execution. Subsequent calls are cached; however, if you change the shape or type of your inputs, the numerical definition needs to compile a new version of your program specific to the input shape and type. If your input shapes or types are constantly changing, your bottleneck will almost certainly be compilation time.</font></p>



<p><font>An additional pitfall of the compiled approach is the strictness of the syntax within </font><code>defn</code><font>. All inputs must be tensors (unless using keywords), you must match on tuple inputs, and you can use a limited subset of Elixir. Although you can overcome most limitations with transforms, it requires some overhead, and may be confusing.</font></p>



<p><font>As opposed to the pitfalls and syntactic limitations of </font><code>defn</code><font>, you can only use </font><code>grad</code><font> from within </font><code>defn</code><font>. This is because </font><code>Nx</code><font> differentiation directly manipulates </font><code>defn</code><font> expressions. Does this mean you cannot use </font><code>grad</code><font> at all with backends like </font><code>Torchx</code><font>? Fortunately, no. The default “compiler” is essentially an expression interpreter – </font><code>Nx.Defn.Evaluator</code><font>. You can use </font><code>grad</code><font> and other future transforms and still use a backend like </font><code>Torchx</code><font>; however, the additional overhead will certainly lead to bottlenecks.</font></p>



<p><font>So when should you use a compiler like </font><code>EXLA</code><font> or a backend like </font><code>Torchx</code><font>? Like most things, it’s situation dependent. Backends like </font><code>Torchx</code><font> offer flexibility, and facilitate rapid prototyping, with pleasing performance gains over pure Elixir implementations. Compilers like </font><code>EXLA</code><font> unlock even more potential performance and memory optimizations, and open the door to things like ahead-of-time compilation. Generally, if you need the flexibility of intermixing </font><code>Nx</code><font> code with your regular Elixir code, using a backend is probably the more convenient option. Additionally, some </font><code>Nx</code><font> programs are so small or are such that they won’t benefit from performance gains from compilers.</font></p>



<p><font>When dealing with compute intensive, purely numerical programs, compilers are usually the better option. For example, you’ll likely realize better performance when training deep neural networks using a compiler over a backend. If performance is your priority, benchmarking will almost certainly lead you to the right decision. There are certainly instances where a compiler will actually hurt your performance, especially if your programs require excessive recompilations or are not well-suited for tensor-based implementations.</font></p>



<p><font>All of this is not to say compilers and backends are mutually exclusive. You may decide it’s easy to rapidly experiment with a backend like </font><code>Torchx</code><font>, and then slowly migrate to a compiler solution for the performance benefits.</font></p>



<p><font>On a final note, I will add a caveat for library developers who want to build packages on top of </font><code>Nx</code><font>. If you are a library developer building packages with </font><code>Nx</code><font>, you should almost exclusively work inside numerical definitions. This is to ensure you leave the choice of compiler/backend to the user. As a library developer, you can create packages with numerical definitions that are unconcerned with the backend or compiler implementation details. This allows users to experiment with what works best for their use-case. If you write your library largely with regular Elixir functions, users won’t be able to use your methods inside numerical definitions, and you take the compilation option completely out of their hands.</font></p>



<p><font>I hope this clears up some confusion about the difference between an </font><code>Nx</code> <em>backend</em><font> and </font><em>compiler</em><font>, and helps you make the right decision.</font></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-279" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-279" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-175065622-279-64300949cf869" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=279&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-279-64300949cf869&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-279-64300949cf869" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-175065622-279-64300949cf869" src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=279&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-279-64300949cf869&amp;domain=seanmoriarity.com" height="55px" width="100%" frameborder="0" scrolling="no" title="Like or Reblog"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="319" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/" title="Nx Tip of the Week #7 &amp;#8211; Using&amp;nbsp;Nx.Defn.jit" data-origin="279" data-position="0">Nx Tip of the Week #7 – Using&nbsp;Nx.Defn.jit</a></span><time class="jp-relatedposts-post-date" datetime="April 15, 2021" style="display: block;">April 15, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="285" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/" title="Axon: Deep Learning in&amp;nbsp;Elixir" data-origin="279" data-position="1">Axon: Deep Learning in&nbsp;Elixir</a></span><time class="jp-relatedposts-post-date" datetime="April 8, 2021" style="display: block;">April 8, 2021</time><span class="jp-relatedposts-post-context">In "projects"</span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="421" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/" title="JIT/GPU accelerated deep learning for Elixir with Axon&amp;nbsp;v0.1" data-origin="279" data-position="2">JIT/GPU accelerated deep learning for Elixir with Axon&nbsp;v0.1</a></span><time class="jp-relatedposts-post-date" datetime="June 16, 2022" style="display: block;">June 16, 2022</time><span class="jp-relatedposts-post-context">In "axon"</span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
		<ul class="post-tags light-text"><li><font>Tagged</font></li><li><a href="https://seanmoriarity.com/tag/elixir/" rel="tag">elixir</a></li><li><a href="https://seanmoriarity.com/tag/nx/" rel="tag">nx</a></li><li><a href="https://seanmoriarity.com/tag/nx-totw/" rel="tag">nx totw</a></li></ul><!-- .post-tags -->	</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published updated" datetime="2021-03-25T07:45:48-04:00">March 25, 2021</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2021/03/18/nx-tip-of-the-week-5-named-tensors/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Nx Tip of the Week #5 – Named&nbsp;Tensors</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Axon: Deep Learning in&nbsp;Elixir</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
			<h2 class="comments-title"><font>
			One thought on “</font><span>Nx Tip of the Week #6 – Compiler or&nbsp;Backend?</span><font>”		</font></h2><!-- .comments-title -->

		
		<ol class="comment-list">
					<li id="comment-15" class="pingback even thread-even depth-1 highlander-comment">
			<div class="comment-body"><font>
				Pingback: </font><a href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/" class="url" rel="ugc">Axon: Deep Learning in Elixir – Sean Moriarity</a> 			</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=41&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" originals="25" src-orig="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-0">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-1">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="279" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="99c29ae5c3"></p>
<input type="hidden" name="genseq" value="1680869705">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869705026"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-319" class="post-319 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw-2">
			<header class="entry-header">
			<h1 class="entry-title"><font>Nx Tip of the Week #7 – Using&nbsp;Nx.Defn.jit</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published updated" datetime="2021-04-15T08:21:27-04:00">April 15, 2021</time>			</span>

			<span class="word-count">1 Minute</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><font>There are actually 2 ways in </font><code>Nx</code><font> to accelerate your numerical definitions: invoking calls to </font><code>defn</code><font> with a </font><code>@defn_compiler</code><font> attribute set, or calling </font><code>Nx.Defn.jit/3</code><font>. Let’s take a look at these 2 methods in practice:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_811285" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defmodule JIT do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">import Nx.Defn</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">@default_defn_compiler EXLA</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">defn softmax(x) do</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">max_val = Nx.reduce_max(x)</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">Nx.exp(x - max_val) / Nx.sum(Nx.exp(x - max_val))</code></div><div class="line number9 index8 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">end</code></div><div class="line number10 index9 alt1"><code class="plain plain">end</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="plain plain">IO.inspect Nx.Defn.jit(&amp;JIT.softmax/1, [Nx.random_uniform({5})], compiler: EXLA)</code></div><div class="line number13 index12 alt2"><code class="plain plain">IO.inspect JIT.softmax(Nx.random_uniform({5}))</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Calling both </font><code>Nx.Defn.jit/3</code><font> and invoking the </font><code>softmax/1</code><font> numerical definition will result in your program being compiled and run with </font><code>EXLA</code><font>, so why would you use one over the other?</font></p>



<p><font>While it’s generally up to you, I’ve found using </font><code>Nx.Defn.jit/3</code><font> is very useful when integrating numerical definitions with regular Elixir code. As an example, </font><code>Axon</code><font> consists of a “low-level” functional API made of entirely numerical definitions. These low-level functions are then glued together by high-level APIs that are more user friendly. </font><code>Axon.Training</code><font> makes use of </font><code>Nx.Defn.jit/3</code><font> to glue things like optimizer initialization and model initialization together and to “dynamically” define training step functions from loss functions and models. </font></p>



<p><font>Here’s an example snippet that generates a step function from an objective function and an update function:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_372181" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">step_fn = fn model_state, input, target -&gt;</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">{params, update_state} = model_state</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">{batch_loss, gradients} =</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">Nx.Defn.Kernel.value_and_grad(params, &amp;objective_fn.(&amp;1, input, target))</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">{updates, new_update_state} = update_fn.(gradients, update_state, params)</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">{{Axon.Updates.apply_updates(params, updates), new_update_state}, batch_loss}</code></div><div class="line number9 index8 alt2"><code class="plain plain">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You can then use </font><code>Nx.Defn.jit/3</code><font> to apply </font><code>step_fn</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_966425" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">{model_state, batch_loss} = Nx.Defn.jit(step_fn, [model_state, inp, tar], jit_opts)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Using </font><code>Nx.Defn.jit/3</code><font> can be very useful when writing higher-level APIs that serve as “glue” or integration of base functionality.</font></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-319" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-319" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-175065622-319-64300966dafba" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=319&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-319-64300966dafba&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-319-64300966dafba" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px; display: none;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-175065622-319-64300966dafba" src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=319&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-319-64300966dafba&amp;domain=seanmoriarity.com" height="55px" width="100%" frameborder="0" scrolling="no" title="Like or Reblog"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="328" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/04/22/nx-tip-of-the-week-8-using-nx-defn-aot-3/" title="Nx Tip of the Week #8 &amp;#8211; Using&amp;nbsp;Nx.Defn.aot/3" data-origin="319" data-position="0">Nx Tip of the Week #8 – Using&nbsp;Nx.Defn.aot/3</a></span><time class="jp-relatedposts-post-date" datetime="April 22, 2021" style="display: block;">April 22, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="279" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/" title="Nx Tip of the Week #6 &amp;#8211; Compiler or&amp;nbsp;Backend?" data-origin="319" data-position="1">Nx Tip of the Week #6 – Compiler or&nbsp;Backend?</a></span><time class="jp-relatedposts-post-date" datetime="March 25, 2021" style="display: block;">March 25, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="394" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2022/02/14/nx-tip-of-the-week-13-hooks/" title="Nx Tip of the Week #13 &amp;#8211;&amp;nbsp;Hooks" data-origin="319" data-position="2">Nx Tip of the Week #13 –&nbsp;Hooks</a></span><time class="jp-relatedposts-post-date" datetime="February 14, 2022" style="display: block;">February 14, 2022</time><span class="jp-relatedposts-post-context"></span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
		<ul class="post-tags light-text"><li><font>Tagged</font></li><li><a href="https://seanmoriarity.com/tag/elixir/" rel="tag">elixir</a></li><li><a href="https://seanmoriarity.com/tag/nx/" rel="tag">nx</a></li><li><a href="https://seanmoriarity.com/tag/nx-totw-2/" rel="tag">nx-totw</a></li></ul><!-- .post-tags -->	</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published updated" datetime="2021-04-15T08:21:27-04:00">April 15, 2021</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Axon: Deep Learning in&nbsp;Elixir</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2021/04/22/nx-tip-of-the-week-8-using-nx-defn-aot-3/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Nx Tip of the Week #8 – Using&nbsp;Nx.Defn.aot/3</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=41&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" originals="25" src-orig="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-0">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-1">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="319" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="e5ef355f87"></p>
<input type="hidden" name="genseq" value="1680869734">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869734073"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2021/04/22/nx-tip-of-the-week-8-using-nx-defn-aot-3/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-328" class="post-328 post type-post status-publish format-standard hentry category-nx-totw tag-elixir tag-nx tag-nx-totw-2">
			<header class="entry-header">
			<h1 class="entry-title"><font>Nx Tip of the Week #8 – Using&nbsp;Nx.Defn.aot/3</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/tag/nx-totw/" rel="category tag">nx totw</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published" datetime="2021-04-22T08:47:15-04:00">April 22, 2021</time><time class="updated" datetime="2021-04-22T08:47:47-04:00">April 22, 2021</time>			</span>

			<span class="word-count">3 Minutes</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><font>Last week, we discussed the usage of </font><code>Nx.Defn.jit/3</code><font> to JIT compile and run numerical definitions. </font><code>Nx</code><font> also supports ahead-of-time compilation using </font><code>Nx.Defn.aot/3</code><font>. In this post, we’ll briefly look at how to use ahead-of-time compilation, and why you’d want to do it in the first place.</font></p>



<p><font>Ahead-of-time compilation allows you to compile your numerical definitions into compact NIFs and execute them without needing the entire EXLA compiler and runtime. </font><code>Nx.Defn.aot/3</code><font> defines a module to interact with the NIF for you, so most of the work is out of your hands. Consider the following Softmax example:</font></p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: erlang; title: ; notranslate" title="">defmodule MyDefn do
  import Nx.Defn
  defn softmax(x) do
    max_val = Nx.reduce_max(x)
    Nx.exp(x - max_val) / Nx.sum(Nx.exp(x - max_val))
  end
end
</pre></div>


<p><font>You can ahead-of-time compile and export this function into a separate module:</font></p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: erlang; title: ; notranslate" title="">Nx.Defn.aot(MyModule, [{:softmax, &amp;MyDefn.softmax/1, [Nx.template({100}, {:f, 32})]}], compiler: EXLA)
</pre></div>


<p><font>Here you need to specify the name of the export module, the desired name of your function in an export module, the actual function to AOT compile, and the expected input types and shapes. You can AOT compile as many functions as you’d like into a single module. This will generate both a NIF and a module </font><code>MyModule</code><font> to interact with the NIF, and then load the module into the runtime. You can then invoke your ahead-of-time compiled function:</font></p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: erlang; title: ; notranslate" title="">MyModule.softmax(Nx.random_uniform({100}))

#Nx.Tensor&lt;
  f32[100]
  [...]
&gt;
</pre></div>


<p><font>In practice, you’d likely want to export the module and NIF for use in a separate project. Fortunately, you can do that with </font><code>Nx.Defn.export_aot/4</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: erlang; title: ; notranslate" title="">Nx.Defn.export_aot("priv", MyModule, [{:softmax, &amp;MyDefn.softmax/1, [Nx.template({100}, {:f, 32})]}], compiler: EXLA)
</pre></div>


<p><font>If you compile and run this, you’ll notice a shared object and a compiled module in the </font><code>priv</code><font> directory of your project. You can then import and use these in a separate project:</font></p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: erlang; title: ; notranslate" title="">if File.exists?("priv/MyModule.nx.aot") do
  defmodule MyModule do
    Nx.Defn.import_aot("priv", __MODULE__)
  end
else
  IO.warn "Skipping MyModule because aot definition was not found"
end
</pre></div>


<p><font>It’s even possible to AOT compile entire neural networks with trained parameters:</font></p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: erlang; title: ; notranslate" title="">IO.puts("AOT-compiling a trained neural network that predicts a batch")
Nx.Defn.aot(
  MNIST.Trained,
  [{:predict, &amp;MNIST.predict(final_params, &amp;1), [Nx.template({30, 784}, {:f, 32})]}],
  compiler: EXLA
)

IO.puts("The result of the first batch against the AOT-compiled one")
IO.inspect MNIST.Trained.predict(hd(train_images))
</pre></div>


<p><font>It’s also possible to cross-compile AOT modules; however, most of the cross-compilation needs to be done manually.</font></p>



<p><font>But how does AOT compilation compare to JIT compilation? From a performance perspective, AOT compilation is competitive: </font></p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; title: ; notranslate" title="">Name                      ips        average  deviation         median         99th %
xla jit-cpu f32        265.86        3.76 ms    ±10.38%        3.71 ms        4.89 ms
xla aot-cpu f32        158.22        6.32 ms    ±25.74%        6.27 ms        9.35 ms
elixir f32               2.95      338.55 ms     ±2.89%      336.93 ms      362.43 ms

Comparison: 
xla jit-cpu f32        265.86
xla aot-cpu f32        158.22 - 1.68x slower +2.56 ms
elixir f32               2.95 - 90.01x slower +334.79 ms

</pre></div>


<p><font>You’ll notice AOT compilation is only slightly slower than JIT compilation, and still much faster than pure Elixir.</font></p>



<p><font>The footprint of an AOT compiled NIF is incredibly small compared to the footprint of the EXLA NIF. On my machine, the EXLA shared object compiled with CUDA is 612MB. The AOT compiled NIF in the example above is 392KB – that’s an incredible reduction. Most of the AOT compiled NIF size can be attributed to statically linking a compiled function runtime, so additional AOT compiled functions should have a much smaller footprint.</font></p>



<p><font>There are, of course, tradeoffs to using AOT compiled functions. First, you need to know the type and shape of your inputs ahead-of-time. Depending on your needs, this can be a pretty serious limitation. Second, AOT compilation is only supported for CPUs, so you can’t take advantage of GPU or TPU acceleration.</font></p>



<p><font>Overall, AOT compilation can be an excellent choice for deploying a model – especially at the edge. You can experiment on a more powerful machine before exporting the smaller compiled module to an edge device. I hope this gives you the tools you need to experiment with AOT compilation. </font></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-328" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2021/04/22/nx-tip-of-the-week-8-using-nx-defn-aot-3/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-328" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2021/04/22/nx-tip-of-the-week-8-using-nx-defn-aot-3/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded" id="like-post-wrapper-175065622-328-6430098303938" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=328&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-328-6430098303938&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-328-6430098303938" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="319" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/" title="Nx Tip of the Week #7 &amp;#8211; Using&amp;nbsp;Nx.Defn.jit" data-origin="328" data-position="0">Nx Tip of the Week #7 – Using&nbsp;Nx.Defn.jit</a></span><time class="jp-relatedposts-post-date" datetime="April 15, 2021" style="display: block;">April 15, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="279" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/" title="Nx Tip of the Week #6 &amp;#8211; Compiler or&amp;nbsp;Backend?" data-origin="328" data-position="1">Nx Tip of the Week #6 – Compiler or&nbsp;Backend?</a></span><time class="jp-relatedposts-post-date" datetime="March 25, 2021" style="display: block;">March 25, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="246" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/03/11/nx-tip-of-the-week-4-using-keywords/" title="Nx Tip of the Week #4 &amp;#8211; Using&amp;nbsp;Keywords" data-origin="328" data-position="2">Nx Tip of the Week #4 – Using&nbsp;Keywords</a></span><time class="jp-relatedposts-post-date" datetime="March 11, 2021" style="display: block;">March 11, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
		<ul class="post-tags light-text"><li><font>Tagged</font></li><li><a href="https://seanmoriarity.com/tag/elixir/" rel="tag">elixir</a></li><li><a href="https://seanmoriarity.com/tag/nx/" rel="tag">nx</a></li><li><a href="https://seanmoriarity.com/tag/nx-totw-2/" rel="tag">nx-totw</a></li></ul><!-- .post-tags -->	</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published" datetime="2021-04-22T08:47:15-04:00">April 22, 2021</time><time class="updated" datetime="2021-04-22T08:47:47-04:00">April 22, 2021</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Nx Tip of the Week #7 – Using&nbsp;Nx.Defn.jit</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2022/01/17/nx-tip-of-the-week-9-window-operations/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Nx Tip of the Week #9 – Window&nbsp;Functions</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2021/04/22/nx-tip-of-the-week-8-using-nx-defn-aot-3/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2021/04/22/nx-tip-of-the-week-8-using-nx-defn-aot-3/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=41&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" originals="25" src-orig="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-0">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-1">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="328" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="4d39c2a5c8"></p>
<input type="hidden" name="genseq" value="1680869763">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869762212"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2022/01/17/nx-tip-of-the-week-9-window-operations/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-349" class="post-349 post type-post status-publish format-standard hentry category-uncategorized tag-elixir tag-nx tag-nx-totw">
			<header class="entry-header">
			<h1 class="entry-title"><font>Nx Tip of the Week #9 – Window&nbsp;Functions</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published" datetime="2022-01-17T06:00:00-05:00">January 17, 2022</time><time class="updated" datetime="2022-01-16T20:21:58-05:00">January 16, 2022</time>			</span>

			<span class="word-count">2 Minutes</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><em>With the release of Nx 0.1.0, I thought I should continue these posts. My time is a limited so these will be a little more brief than before. Each week I’ll highlight a small aspect of the Nx API with some code examples. </em></p>



<p><font>When you first get started with an array programming library like Nx (or NumPy, JAX, TensorFlow, etc.), it can be difficult to get out of the habit of writing loops or recursive functions to iterate over parts of a tensor. Some of the Nx code I’ve seen used in other projects tend to make excessive use of Nx’s </font><code>while</code><font> construct. In some situations this is unavoidable (such as with Recurrent Neural Networks); however, if you can re-work an algorithm to not use a </font><code>while</code><font> then you will be much better off. I will cover </font><code>while</code><font> in a later post – you should just know that the body of a </font><code>while</code><font> loop will always be executed sequentially and will roundtrip data back to the CPU even when running on GPU.</font></p>



<p><font>One type of operation I typically see people rely on while-loops for is performing a look-back or look-ahead. When I say look-back or look-ahead, I’m referring to an operation which relies on information from a tensor at position </font><code>i</code><font> and </font><code>i + 1</code><font>. or </font><code>i - 1</code><font>. A common class of functions which require a look-back or a look-ahead are cumulative functions. For example, a </font><em>cumulative sum</em><font> computes a running sum at each position </font><code>i</code><font> in a tensor. If you have a tensor which represents revenue over </font><code>N</code><font> months, then the value at position </font><code>i</code><font> would represent aggregate revenue of all of the months up to month </font><code>i</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_22649" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">iex&gt; revenue_by_month = Nx.tensor([100, 200, 100, 50, 150])</code></div><div class="line number2 index1 alt1"><code class="plain plain">iex&gt; cumsum(revenue_by_month)</code></div><div class="line number3 index2 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">s64[5]</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">[100, 300, 400, 450, 600]</code></div><div class="line number6 index5 alt1"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You can probably see how it’s easy to want to implement this with a </font><code>while</code><font> loop by iterating over a tensor and indexing at </font><code>i</code><font> and </font><code>i - 1</code><font>. But, an alternative way to compute this is with a </font><code>window_sum</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_605852" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div><div class="line number23 index22 alt2"><font>23</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defn cumsum(tensor, opts \\ []) do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">opts = keyword!(opts, axis: 0)</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">axis = opts[:axis]</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">{padding_config, strides, window_shape} =</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">transform({tensor, axis}, fn {tensor, axis} -&gt;</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">n = elem(</code><code class="erlang constants">Nx</code><code class="erlang plain">.shape(tensor), axis)</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">padding_config =</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">for i &lt;- 0..(</code><code class="erlang constants">Nx</code><code class="erlang plain">.rank(tensor) - 1) do</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">if</code> <code class="erlang plain">i == axis, do: {n - 1, 0}, else: {0, 0}</code></div><div class="line number10 index9 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">strides = </code><code class="erlang constants">List</code><code class="erlang plain">.duplicate(1, </code><code class="erlang constants">Nx</code><code class="erlang plain">.rank(tensor))</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">window_shape =</code></div><div class="line number15 index14 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang constants">List</code><code class="erlang plain">.duplicate(1, </code><code class="erlang constants">Nx</code><code class="erlang plain">.rank(tensor))</code></div><div class="line number16 index15 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; </code><code class="erlang constants">List</code><code class="erlang plain">.to_tuple()</code></div><div class="line number17 index16 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">|&gt; put_elem(axis, n)</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{padding_config, strides, window_shape}</code></div><div class="line number20 index19 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">end</code><code class="erlang plain">)</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang constants">Nx</code><code class="erlang plain">.window_sum(tensor, window_shape, strides: strides, padding: padding_config)</code></div><div class="line number23 index22 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Nx offers a collection of window functions which compute aggregations over sliding windows in a Tensor: </font><code>Nx.window_sum/3</code><font>, </font><code>Nx.window_mean/3</code><font>, </font><code>Nx.window_max/3</code><font>, </font><code>Nx.window_min/3</code><font>, and </font><code>Nx.window_reduce/4</code><font>. Axon uses window functions to implement pooling, but they’re also very useful when you need to compute functions which rely on look-backs or look-aheads. The approach for computing a cumulative sum pads the input with </font><code>N - 1</code><font> values (</font><code>N</code><font> being the size of the aggregate axis), and then slides over the entire Tensor with a stride of 1 and a window of size </font><code>N</code><font>. If you have an operation which requires a similar pattern, you should consider using a window function.</font></p>



<p><font>As the window you need to look at grows larger, using a window aggregate function can help you reason about the operation you’re performing a little better, and avoid hard-to-debug index and off-by-one errors.</font></p>



<p><font>See the documentation for window functions </font><a href="https://hexdocs.pm/nx/Nx.html#functions-window">here</a><font>.</font></p>



<p></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-349" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2022/01/17/nx-tip-of-the-week-9-window-operations/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-349" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2022/01/17/nx-tip-of-the-week-9-window-operations/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded" id="like-post-wrapper-175065622-349-6430099a4241c" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=349&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-349-6430099a4241c&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-349-6430099a4241c" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="421" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/" title="JIT/GPU accelerated deep learning for Elixir with Axon&amp;nbsp;v0.1" data-origin="349" data-position="0">JIT/GPU accelerated deep learning for Elixir with Axon&nbsp;v0.1</a></span><time class="jp-relatedposts-post-date" datetime="June 16, 2022" style="display: block;">June 16, 2022</time><span class="jp-relatedposts-post-context">In "axon"</span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="372" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2022/01/31/nx-tip-of-the-week-11-while-loops/" title="Nx Tip of the Week #11 &amp;#8211; While&amp;nbsp;Loops" data-origin="349" data-position="1">Nx Tip of the Week #11 – While&nbsp;Loops</a></span><time class="jp-relatedposts-post-date" datetime="January 31, 2022" style="display: block;">January 31, 2022</time><span class="jp-relatedposts-post-context"></span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="285" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/" title="Axon: Deep Learning in&amp;nbsp;Elixir" data-origin="349" data-position="2">Axon: Deep Learning in&nbsp;Elixir</a></span><time class="jp-relatedposts-post-date" datetime="April 8, 2021" style="display: block;">April 8, 2021</time><span class="jp-relatedposts-post-context">In "projects"</span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
		<ul class="post-tags light-text"><li><font>Tagged</font></li><li><a href="https://seanmoriarity.com/tag/elixir/" rel="tag">elixir</a></li><li><a href="https://seanmoriarity.com/tag/nx/" rel="tag">nx</a></li><li><a href="https://seanmoriarity.com/tag/nx-totw/" rel="tag">nx totw</a></li></ul><!-- .post-tags -->	</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published" datetime="2022-01-17T06:00:00-05:00">January 17, 2022</time><time class="updated" datetime="2022-01-16T20:21:58-05:00">January 16, 2022</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2021/04/22/nx-tip-of-the-week-8-using-nx-defn-aot-3/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Nx Tip of the Week #8 – Using&nbsp;Nx.Defn.aot/3</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2022/01/24/nx-tip-of-the-week-10-using-nx-select/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Nx Tip of the Week #10 – Using&nbsp;Nx.select</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
			<h2 class="comments-title"><font>
			One thought on “</font><span>Nx Tip of the Week #9 – Window&nbsp;Functions</span><font>”		</font></h2><!-- .comments-title -->

		
		<ol class="comment-list">
					<li id="comment-144" class="pingback even thread-even depth-1 highlander-comment">
			<div class="comment-body"><font>
				Pingback: </font><a href="https://seanmoriarity.com/2022/01/31/nx-tip-of-the-week-11-while-loops/" class="url" rel="ugc">Nx Tip of the Week #11 – While Loops – Sean Moriarity</a> 			</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2022/01/17/nx-tip-of-the-week-9-window-operations/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2022/01/17/nx-tip-of-the-week-9-window-operations/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=41&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" originals="25" src-orig="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-0">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-1">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="349" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="826062474f"></p>
<input type="hidden" name="genseq" value="1680869786">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869785469"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2022/01/24/nx-tip-of-the-week-10-using-nx-select/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-361" class="post-361 post type-post status-publish format-standard hentry category-uncategorized">
			<header class="entry-header">
			<h1 class="entry-title"><font>Nx Tip of the Week #10 – Using&nbsp;Nx.select</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published" datetime="2022-01-24T07:00:00-05:00">January 24, 2022</time><time class="updated" datetime="2022-01-18T07:11:14-05:00">January 18, 2022</time>			</span>

			<span class="word-count">1 Minute</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><code>Nx</code><font>‘s API can seem a little more restrictive due to some of it’s static shape requirements. For example, </font><em>boolean indexing</em><font> is not currently supported because it would be impossible to know the shape at runtime. For those who don’t know boolean indexing selects values of an array based on some boolean mask. For example, let’s say I wanted to compute the sum of all non-negative values in an array – in NumPy I can do:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_442356" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python plain">&gt;&gt;&gt; a </code><code class="python keyword">=</code> <code class="python plain">np.array([[</code><code class="python keyword">-</code><code class="python value">1</code><code class="python plain">, </code><code class="python value">2</code><code class="python plain">, </code><code class="python keyword">-</code><code class="python value">3</code><code class="python plain">], [</code><code class="python value">4</code><code class="python plain">, </code><code class="python keyword">-</code><code class="python value">5</code><code class="python plain">, </code><code class="python value">6</code><code class="python plain">]])</code></div><div class="line number2 index1 alt1"><code class="python plain">&gt;&gt;&gt; non_negative_a </code><code class="python keyword">=</code> <code class="python plain">a[a &gt; </code><code class="python value">0</code><code class="python plain">] </code><code class="python comments"># np.array([2, 4, 6]</code></div><div class="line number3 index2 alt2"><code class="python plain">&gt;&gt;&gt; np.</code><code class="python functions">sum</code><code class="python plain">(non_negative_a)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>This same operation is not supported because the output shape is dependent on the runtime result </font><code>a &gt; 0</code><font>. There are some techniques we can potentially explore to make it work (e.g. dynamic shape support – compiling programs with bounded shapes), but for the time being, let’s consider an alternative.</font></p>



<p><font>More often than not, you can solve a problem that you think requires boolean indexing with </font><code>Nx.select</code><font>. </font><code>Nx.select</code><font> builds a tensor from 3 tensors:</font></p>



<ul><li><font>A mask</font></li><li><font>A true tensor</font></li><li><font>A false tensor</font></li></ul>



<p><code>Nx.select</code><font> will choose values from the true tensor when corresponding values in the mask are true and values from the false tensor when they are not. By carefully choosing which tensors we use to construct our result tensor, we can usually replace boolean indexing. For the problem outlined above, you know ahead of time you want the final result to be the sum, so your false tensor can be all </font><code>0</code><font> values because this won’t have any effect on the sum:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_580622" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">iex&gt; a = </code><code class="erlang constants">Nx</code><code class="erlang plain">.tensor([[-1, 2, -3], [4, -5, 6]])</code></div><div class="line number2 index1 alt1"><code class="erlang plain">iex&gt; non_negative_a = </code><code class="erlang constants">Nx</code><code class="erlang plain">.select(</code><code class="erlang constants">Nx</code><code class="erlang plain">.greater(a, 0), a, 0)</code></div><div class="line number3 index2 alt2"><code class="erlang plain">iex&gt; </code><code class="erlang constants">Nx</code><code class="erlang plain">.sum(non_negative_a)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>By carefully choosing the </font><code>on_false</code><font> tensor, you’ve guaranteed it’s values will have no impact on your final result – effectively achieving the same thing as with boolean indexing.</font></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-361" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2022/01/24/nx-tip-of-the-week-10-using-nx-select/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-361" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2022/01/24/nx-tip-of-the-week-10-using-nx-select/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-175065622-361-643009ae9aff7" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=361&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-361-643009ae9aff7&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-361-643009ae9aff7" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px; display: none;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-175065622-361-643009ae9aff7" src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=361&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-361-643009ae9aff7&amp;domain=seanmoriarity.com" height="55px" width="100%" frameborder="0" scrolling="no" title="Like or Reblog"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="246" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/03/11/nx-tip-of-the-week-4-using-keywords/" title="Nx Tip of the Week #4 &amp;#8211; Using&amp;nbsp;Keywords" data-origin="361" data-position="0">Nx Tip of the Week #4 – Using&nbsp;Keywords</a></span><time class="jp-relatedposts-post-date" datetime="March 11, 2021" style="display: block;">March 11, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="404" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2022/02/21/nx-tip-of-the-week-14-slicing-and-indexing/" title="Nx Tip of the Week #14 &amp;#8211; Slicing and&amp;nbsp;Indexing" data-origin="361" data-position="1">Nx Tip of the Week #14 – Slicing and&nbsp;Indexing</a></span><time class="jp-relatedposts-post-date" datetime="February 21, 2022" style="display: block;">February 21, 2022</time><span class="jp-relatedposts-post-context">In "elixir"</span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="165" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/02/16/nx-tip-of-the-week-1-using-transforms/" title="Nx Tip of the Week #1 &amp;#8211; Using&amp;nbsp;transforms" data-origin="361" data-position="2">Nx Tip of the Week #1 – Using&nbsp;transforms</a></span><time class="jp-relatedposts-post-date" datetime="February 16, 2021" style="display: block;">February 16, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
			</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published" datetime="2022-01-24T07:00:00-05:00">January 24, 2022</time><time class="updated" datetime="2022-01-18T07:11:14-05:00">January 18, 2022</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2022/01/17/nx-tip-of-the-week-9-window-operations/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Nx Tip of the Week #9 – Window&nbsp;Functions</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2022/01/31/nx-tip-of-the-week-11-while-loops/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Nx Tip of the Week #11 – While&nbsp;Loops</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2022/01/24/nx-tip-of-the-week-10-using-nx-select/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2022/01/24/nx-tip-of-the-week-10-using-nx-select/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=41&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" originals="25" src-orig="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-0">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-1">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="361" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="4adfee2f73"></p>
<input type="hidden" name="genseq" value="1680869806">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869805914"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2022/01/31/nx-tip-of-the-week-11-while-loops/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-372" class="post-372 post type-post status-publish format-standard hentry category-uncategorized">
			<header class="entry-header">
			<h1 class="entry-title"><font>Nx Tip of the Week #11 – While&nbsp;Loops</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published" datetime="2022-01-31T07:00:00-05:00">January 31, 2022</time><time class="updated" datetime="2022-01-24T15:02:48-05:00">January 24, 2022</time>			</span>

			<span class="word-count">2 Minutes</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><font>Some numeric algorithms require sequential operations. In </font><a href="https://seanmoriarity.com/2022/01/17/nx-tip-of-the-week-9-window-operations/">TOTW #9</a><font>, we talked about one operation you can use to avoid while-loops in specific situations. Unfortunately, you won’t always be able to avoid a while-loop. </font><code>Nx</code><font> has a </font><code>while</code><font> construct which is implemented as an Elixir macro. The </font><code>while</code><font> construct takes an initial state, a condition, and a body which returns a shape which is the same as the initial state. It’s essentially a </font><code>reduce_while</code><font>, which aggregates state while some condition is satisfied:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_901667" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defn count_to_ten() do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">while i = 0, i &lt; 10, do: i + 1</code></div><div class="line number3 index2 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>

<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_814523" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">iex&gt; count_to_ten()</code></div><div class="line number2 index1 alt1"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">s64</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">10</code></div><div class="line number5 index4 alt2"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>The state can even be a container such as a tuple, so you can aggregate multiple things at once:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_15122" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defn count_to_ten_twice() do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">while {i = 0, j = 0}, i &lt; 10, do: {i + 1, j + 1}</code></div><div class="line number3 index2 alt2"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>

<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_447437" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">iex&gt; count_to_ten_twice()</code></div><div class="line number2 index1 alt1"><code class="plain plain">{#Nx.Tensor&lt;</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;</code><code class="plain plain">s64</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;</code><code class="plain plain">10</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;</code><code class="plain plain">&gt;,</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;</code><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;</code><code class="plain plain">s64</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;</code><code class="plain plain">10</code></div><div class="line number9 index8 alt2"><code class="plain spaces">&nbsp;</code><code class="plain plain">&gt;}</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>It’s important to understand that the shape of the body of the while loop must match the shape of the initial condition. For example, if you want to use a while-loop to iteratively build a tensor by adding new-values to some axis, you need to know the final shape of the tensor ahead of time:</font></p>



<p> </p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_904265" class="syntaxhighlighter  erlang"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="erlang plain">defn build_a_vector() do</code></div><div class="line number2 index1 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain"># </code><code class="erlang constants">Create</code> <code class="erlang plain">a </code><code class="erlang string">"filler"</code> <code class="erlang plain">tensor</code></div><div class="line number3 index2 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">initial_tensor = </code><code class="erlang constants">Nx</code><code class="erlang plain">.broadcast(0.0, {12})</code></div><div class="line number4 index3 alt1"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">{_, final_tensor} =</code></div><div class="line number5 index4 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">while {i = 0, initial_tensor}, i &lt; 12 do</code></div><div class="line number6 index5 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">val = </code><code class="erlang constants">Nx</code><code class="erlang plain">.random_uniform({1})</code></div><div class="line number7 index6 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain"># </code><code class="erlang constants">Update</code> <code class="erlang plain">filler tensor </code><code class="erlang string">"in-place"</code></div><div class="line number8 index7 alt1"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang plain">{i + 1, </code><code class="erlang constants">Nx</code><code class="erlang plain">.put_slice(initial_tensor, [i], val)}</code></div><div class="line number9 index8 alt2"><code class="erlang spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="erlang keyword">end</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="erlang spaces">&nbsp;&nbsp;</code><code class="erlang plain">final_tensor</code></div><div class="line number12 index11 alt1"><code class="erlang keyword">end</code></div></div></td></tr></tbody></table></div></div></div>

<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_791705" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">iex&gt; build_a_vector()</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;</code><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;</code><code class="plain plain">f32[12]</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[0.9620421528816223, 0.37593021988868713, 0.5158101916313171, 0.39656928181648254, 0.6919131875038147, 0.1678706705570221, 0.9522126913070679, 0.5573846101760864, 0.37262946367263794, 0.40950807929039, 0.9263219237327576, 0.45467808842658997]</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;</code><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>The native </font><code>defn</code><font> loops you implement will be much more efficient than pure Elixir loops performing the same operations, but they’ll still be slow relative to other computations. Because they can be difficult for JIT compilers like XLA to optimize, you might </font><em>actually</em><font> see some benefit from applying optimizations yourself. For example, you might benefit from unrolling the body of the loop:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_711078" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defn unrolled_count_to_ten() do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">while i = 0, i &lt; 10 do</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain"># Once</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">i = i + 1</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain"># Do the body again</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">i = i + 1</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">i</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">end</code></div><div class="line number9 index8 alt2"><code class="plain plain">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Just remember that you might need to perform an additional condition check inside the body of the loop if you are manually unrolling.</font></p>



<p><font>If you know your loop is guaranteed to run only a few times, you can also “inline” the loop into your computation using a </font><code>transform</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_939306" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defn inlined_loop() do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">i = 0</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">transform(i, fn i -&gt;</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">for _ &lt;- 0..9, reduce: i do</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">x -&gt;</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">Nx.add(x, 1)</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">end</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">end)</code></div><div class="line number9 index8 alt2"><code class="plain plain">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>This will repeat the expression in the loop body a fixed number of times inside the actual computation. Inlining will only work well if the loop runs a relatively small number of times, or if you know at runtime how many times the loop is supposed to run.</font></p>



<p><font>Until next time!</font></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-372" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2022/01/31/nx-tip-of-the-week-11-while-loops/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-372" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2022/01/31/nx-tip-of-the-week-11-while-loops/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded" id="like-post-wrapper-175065622-372-643009c0a39da" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=372&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-372-643009c0a39da&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-372-643009c0a39da" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="349" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2022/01/17/nx-tip-of-the-week-9-window-operations/" title="Nx Tip of the Week #9 &amp;#8211; Window&amp;nbsp;Functions" data-origin="372" data-position="0">Nx Tip of the Week #9 – Window&nbsp;Functions</a></span><time class="jp-relatedposts-post-date" datetime="January 17, 2022" style="display: block;">January 17, 2022</time><span class="jp-relatedposts-post-context">In "elixir"</span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="421" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/" title="JIT/GPU accelerated deep learning for Elixir with Axon&amp;nbsp;v0.1" data-origin="372" data-position="1">JIT/GPU accelerated deep learning for Elixir with Axon&nbsp;v0.1</a></span><time class="jp-relatedposts-post-date" datetime="June 16, 2022" style="display: block;">June 16, 2022</time><span class="jp-relatedposts-post-context">In "axon"</span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="285" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/" title="Axon: Deep Learning in&amp;nbsp;Elixir" data-origin="372" data-position="2">Axon: Deep Learning in&nbsp;Elixir</a></span><time class="jp-relatedposts-post-date" datetime="April 8, 2021" style="display: block;">April 8, 2021</time><span class="jp-relatedposts-post-context">In "projects"</span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
			</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published" datetime="2022-01-31T07:00:00-05:00">January 31, 2022</time><time class="updated" datetime="2022-01-24T15:02:48-05:00">January 24, 2022</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2022/01/24/nx-tip-of-the-week-10-using-nx-select/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Nx Tip of the Week #10 – Using&nbsp;Nx.select</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2022/02/07/nx-tip-of-the-week-12-nx-to_heatmap/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Nx Tip of the Week #12 –&nbsp;Nx.to_heatmap</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2022/01/31/nx-tip-of-the-week-11-while-loops/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2022/01/31/nx-tip-of-the-week-11-while-loops/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-0" originals="25" scale="1.5">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-1" originals="25" scale="1.5">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-2" originals="25" scale="1.5">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="372" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="3a3c4e0ea1"></p>
<input type="hidden" name="genseq" value="1680869824">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869823856"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2022/02/07/nx-tip-of-the-week-12-nx-to_heatmap/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-386" class="post-386 post type-post status-publish format-standard hentry category-uncategorized">
			<header class="entry-header">
			<h1 class="entry-title"><font>Nx Tip of the Week #12 –&nbsp;Nx.to_heatmap</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published" datetime="2022-02-07T07:00:00-05:00">February 7, 2022</time><time class="updated" datetime="2022-02-05T18:04:47-05:00">February 5, 2022</time>			</span>

			<span class="word-count">1 Minute</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><font>Sometimes you want to quickly visualize the contents of a tensor. For example, when working with the MNIST dataset, you might want to make sure you’ve sliced it up correctly. A quick way to visualize images across a single color channel is with </font><code>Nx.to_heatmap</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_732179" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Nx.to_heatmap(img)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>When inspecting the result of </font><code>Nx.to_heatmap</code><font>, you’ll get a nice console representation of a heatmap printed out. This is especially useful when you’re quickly debugging and don’t want to bring in any additional dependencies such as VegaLite. As a neat little trick, you can use </font><code>Nx.to_heatmap</code><font> to visualize intermediate activations in a convolutional neural network in Axon:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_544273" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div><div class="line number9 index8 alt2"><font>9</font></div><div class="line number10 index9 alt1"><font>10</font></div><div class="line number11 index10 alt2"><font>11</font></div><div class="line number12 index11 alt1"><font>12</font></div><div class="line number13 index12 alt2"><font>13</font></div><div class="line number14 index13 alt1"><font>14</font></div><div class="line number15 index14 alt2"><font>15</font></div><div class="line number16 index15 alt1"><font>16</font></div><div class="line number17 index16 alt2"><font>17</font></div><div class="line number18 index17 alt1"><font>18</font></div><div class="line number19 index18 alt2"><font>19</font></div><div class="line number20 index19 alt1"><font>20</font></div><div class="line number21 index20 alt2"><font>21</font></div><div class="line number22 index21 alt1"><font>22</font></div><div class="line number23 index22 alt2"><font>23</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">def visualize_conv_activations(input_to_visualize, conv_layer) do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">fn state -&gt;</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain"># Get the activation for some input and convert to grayscale</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">activations = Axon.predict(conv_layer, state.model_state, input_to_visualize) |&gt; Nx.reduce_max(axes: [1])</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain"># Convert to heatmap and inspect</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">IO.inspect Nx.to_heatmap(activations)</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">{:continue, state}</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">end</code></div><div class="line number9 index8 alt2"><code class="plain plain">end</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="plain plain">conv_base =</code></div><div class="line number12 index11 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">Axon.input({nil, 1, 28, 28})</code></div><div class="line number13 index12 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">|&gt; Axon.conv(32, kernel_size: {3, 3})</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="plain plain">model =</code></div><div class="line number16 index15 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">conv_base</code></div><div class="line number17 index16 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">|&gt; Axon.flatten()</code></div><div class="line number18 index17 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">|&gt; Axon.dense(10, activation: :softmax)</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="plain plain">model</code></div><div class="line number21 index20 alt2"><code class="plain plain">|&gt; Axon.Loop.trainer(:categorical_cross_entropy, :adam)</code></div><div class="line number22 index21 alt1"><code class="plain plain">|&gt; Axon.Loop.handle(:epoch_completed, visualize_conv_activations(input_stream, conv_layer))</code></div><div class="line number23 index22 alt2"><code class="plain plain">|&gt; Axon.Loop.run(data, epochs: 10)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>If you look at some of the </font><a href="https://github.com/elixir-nx/axon/tree/main/examples">Axon examples</a><font>, you’ll see </font><code>Nx.to_heatmap</code><font> is used all over the place. It’s very useful for quick visualizations of images, activations, and more.</font></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-386" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2022/02/07/nx-tip-of-the-week-12-nx-to_heatmap/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-386" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2022/02/07/nx-tip-of-the-week-12-nx-to_heatmap/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-175065622-386-643009d266fa0" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=386&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-386-643009d266fa0&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-386-643009d266fa0" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px; display: none;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-175065622-386-643009d266fa0" src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=386&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-386-643009d266fa0&amp;domain=seanmoriarity.com" height="55px" width="100%" frameborder="0" scrolling="no" title="Like or Reblog"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
</div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
			</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published" datetime="2022-02-07T07:00:00-05:00">February 7, 2022</time><time class="updated" datetime="2022-02-05T18:04:47-05:00">February 5, 2022</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2022/01/31/nx-tip-of-the-week-11-while-loops/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Nx Tip of the Week #11 – While&nbsp;Loops</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2022/02/14/nx-tip-of-the-week-13-hooks/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Nx Tip of the Week #13 –&nbsp;Hooks</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2022/02/07/nx-tip-of-the-week-12-nx-to_heatmap/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2022/02/07/nx-tip-of-the-week-12-nx-to_heatmap/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=41&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" originals="25" src-orig="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-0">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-1">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="386" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="18d78d19ab"></p>
<input type="hidden" name="genseq" value="1680869842">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869841611"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2022/02/14/nx-tip-of-the-week-13-hooks/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-394" class="post-394 post type-post status-publish format-standard hentry category-uncategorized">
			<header class="entry-header">
			<h1 class="entry-title"><font>Nx Tip of the Week #13 –&nbsp;Hooks</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published" datetime="2022-02-14T07:00:00-05:00">February 14, 2022</time><time class="updated" datetime="2022-02-05T18:27:30-05:00">February 5, 2022</time>			</span>

			<span class="word-count">1 Minute</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><font>Part of the restrictiveness of </font><code>defn</code><font> is the inability to debug in the same way you would debug a normal Elixir function. I’m personally a big fan of plain old </font><code>IO.inspect</code><font> debugging. Because of how </font><code>defn</code><font> works, it’s not possible to inspect intermediate tensor values in the same way you would inspect intermediate values in a regular Elixir function. For example, this code:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_395794" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defn my_function(x) do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">transform(x, fn x -&gt;</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">x |&gt; Nx.exp() |&gt; IO.inspect</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">end)</code></div><div class="line number5 index4 alt2"><code class="plain plain">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Would actually just inspect the </font><code>defn</code><font> expression and print that to the console. If you don’t have a solid understanding of </font><code>defn</code><font> and </font><code>defn</code><font> expressions, that’s okay, just understand that because of how </font><code>defn</code><font> works, simply calling </font><code>IO.inspect</code><font> will not yield the value you’re looking for.</font></p>



<p><font>Instead, you need to make use of the built-in hook </font><code>inspect_value</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_529570" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defn my_function(x) do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">x |&gt; Nx.exp() |&gt; inspect_value()</code></div><div class="line number3 index2 alt2"><code class="plain plain">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Like </font><code>IO.inspect</code><font>, </font><code>inspect_value</code><font> will return the value it’s passed and inspect the input contents to the console. </font><code>inspect_value</code><font> is actually built on top of </font><code>Nx.Defn.Kernel.hook</code><font>, which allows you to perform side-effecting operations within </font><code>defn</code><font>. For example, you can use hooks to log values:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_656548" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defn my_hooked_function(x) do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">x |&gt; Nx.exp() |&gt; hook(&amp;Logger.info/1)</code></div><div class="line number3 index2 alt2"><code class="plain plain">end</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Hooks will yield the intermediate value passed at execution time and execute the given hook function at runtime. If you wanted to pass runtime values to external processes, you can accomplish that with hooks. You can also override hooks at JIT time:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_94484" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">defn my_hooked_function(x) do</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">x |&gt; Nx.exp() |&gt; hook(:my_hook)</code></div><div class="line number3 index2 alt2"><code class="plain plain">end</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="plain plain">hooks = %{my_hook: &amp;IO.inspect/1)</code></div><div class="line number6 index5 alt1"><code class="plain plain">Nx.Defn.jit(&amp;my_hooked_function/1, [value], hooks: hooks)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Hooked values </font><strong>must</strong><font> be used by a value returned by </font><code>defn</code><font>, otherwise the hook will never execute.</font></p>



<p><font>Hooks are implemented on top of the </font><code>Nx.Stream</code><font> API. We’ll cover </font><code>Nx.Stream</code><font> briefly in a later tip.</font></p>



<p><font>Until next time!</font></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-394" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2022/02/14/nx-tip-of-the-week-13-hooks/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-394" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2022/02/14/nx-tip-of-the-week-13-hooks/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-175065622-394-643009ed7fc45" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=394&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-394-643009ed7fc45&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-394-643009ed7fc45" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px; display: none;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-175065622-394-643009ed7fc45" src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=394&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-394-643009ed7fc45&amp;domain=seanmoriarity.com" height="55px" width="100%" frameborder="0" scrolling="no" title="Like or Reblog"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="319" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/04/15/nx-tip-of-the-week-7-using-nx-defn-jit/" title="Nx Tip of the Week #7 &amp;#8211; Using&amp;nbsp;Nx.Defn.jit" data-origin="394" data-position="0">Nx Tip of the Week #7 – Using&nbsp;Nx.Defn.jit</a></span><time class="jp-relatedposts-post-date" datetime="April 15, 2021" style="display: block;">April 15, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="165" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/02/16/nx-tip-of-the-week-1-using-transforms/" title="Nx Tip of the Week #1 &amp;#8211; Using&amp;nbsp;transforms" data-origin="394" data-position="1">Nx Tip of the Week #1 – Using&nbsp;transforms</a></span><time class="jp-relatedposts-post-date" datetime="February 16, 2021" style="display: block;">February 16, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="279" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/03/25/nx-tip-of-the-week-6-compiler-or-backend/" title="Nx Tip of the Week #6 &amp;#8211; Compiler or&amp;nbsp;Backend?" data-origin="394" data-position="2">Nx Tip of the Week #6 – Compiler or&nbsp;Backend?</a></span><time class="jp-relatedposts-post-date" datetime="March 25, 2021" style="display: block;">March 25, 2021</time><span class="jp-relatedposts-post-context">In "nx totw"</span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
			</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published" datetime="2022-02-14T07:00:00-05:00">February 14, 2022</time><time class="updated" datetime="2022-02-05T18:27:30-05:00">February 5, 2022</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2022/02/07/nx-tip-of-the-week-12-nx-to_heatmap/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Nx Tip of the Week #12 –&nbsp;Nx.to_heatmap</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2022/02/21/nx-tip-of-the-week-14-slicing-and-indexing/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Nx Tip of the Week #14 – Slicing and&nbsp;Indexing</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2022/02/14/nx-tip-of-the-week-13-hooks/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2022/02/14/nx-tip-of-the-week-13-hooks/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=41&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" originals="25" src-orig="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-0">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-1">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="394" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="b1fe6d40e8"></p>
<input type="hidden" name="genseq" value="1680869869">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869868705"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div id="page" class="hfeed site" path="/2022/02/21/nx-tip-of-the-week-14-slicing-and-indexing/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-404" class="post-404 post type-post status-publish format-standard hentry category-uncategorized tag-elixir tag-nx tag-nx-totw">
			<header class="entry-header">
			<h1 class="entry-title"><font>Nx Tip of the Week #14 – Slicing and&nbsp;Indexing</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/uncategorized/" rel="category tag">Uncategorized</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published updated" datetime="2022-02-21T07:59:03-05:00">February 21, 2022</time>			</span>

			<span class="word-count">2 Minutes</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><font>Often times you want to slice and index into specific parts of a tensor. Nx offers a few different slicing and indexing routines which allow you to accomplish most of what you would want to do. Slicing can be a bit tricky given static shape requirements, but you usually can work around limitations.</font></p>



<p><font>First, you can perform generic slices using </font><code>Nx.slice/4</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_146759" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">a = Nx.tensor([[1, 2, 3], [4, 5, 6]])</code></div><div class="line number2 index1 alt1"><code class="plain plain">Nx.slice(a, [0, 1], [1, 2])</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Returns:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_386767" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">s64[1][2]</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">[</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[2, 3]</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">]</code></div><div class="line number6 index5 alt1"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>The first list in </font><code>Nx.slice/4</code><font> is a list of start indices. You may specify dynamic or tensor values for the start index – as long as they have a scalar shape:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_509652" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Nx.slice(a, [Nx.tensor(0), Nx.tensor(1)], [1, 2])</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>The second list is the length of each slice. Each value must be known or static at compile-time. This is because the length dictates the final shape of the sliced tensor:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_668571" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Nx.slice(a, [1, 2], [2, 3])</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Returns:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_153085" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">s64[2][3]</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">[</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[1, 2, 3],</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[4, 5, 6]</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">]</code></div><div class="line number7 index6 alt2"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>This might surprise you! You might have expected an out-of-bounds error or something similar, considering that you are requesting slices from both axes past the original bounds of the tensor. In reality, Nx will force the slice in bounds to match the length requested from the slice in each dimension.</font></p>



<p><font>You can also make use of the </font><code>Access</code><font> syntax which builds on top of normal slice operations. For example:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_141705" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">a = Nx.tensor([[1, 2, 3], [4, 5, 6]])</code></div><div class="line number2 index1 alt1"><code class="plain plain">a[[1, 0..1]]</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Returns:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_306785" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">s64[2]</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">[4, 5]</code></div><div class="line number4 index3 alt1"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Because you’re accessing the first index from the first dimension and the zero to first indices from the second dimension. In newer versions of Elixir, you can slice an entire axis with </font><code>..</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_517807" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">a[[.., 2]]</code></div></div></td></tr></tbody></table></div></div></div>

<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_922139" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">s64[2]</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">[3, 6]</code></div><div class="line number4 index3 alt1"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>If </font><code>Nx.slice/4</code><font> and the </font><code>Access</code><font> syntax is not flexible enough for you, you can try one of </font><code>Nx.take/3</code><font>, </font><code>Nx.gather/3</code><font>, and </font><code>Nx.take_along_axis/</code><font>3. For example, a common operation in deep learning is computing a vector representation from sparse values. Given a sequence of integer tokens between </font><code>0</code><font> and </font><code>127</code><font>, you can convert each token to a vector representation using </font><code>Nx.take/3</code><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_163921" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">tokens = Nx.tensor([127, 32, 0, 1, 5, 6])</code></div><div class="line number2 index1 alt1"><code class="plain plain">weights = Nx.random_uniform({128, 32})</code></div><div class="line number3 index2 alt2"><code class="plain plain">Nx.take(weights, tokens)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Returns:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_221220" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div><div class="line number8 index7 alt1"><font>8</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">f32[6][32]</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">[</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[0.39863643050193787, 0.33112287521362305, 0.531199038028717, 0.3594178259372711, 0.8754940629005432, 0.30342867970466614, 0.9188190698623657, 0.29185304045677185, 0.543312668800354, 0.5064964294433594, 0.7225326299667358, 0.06837604194879532, 0.5449554920196533, 0.2207975834608078, 0.0635833740234375, 0.3370073139667511, 0.6428131461143494, 0.8821378946304321, 0.9932462573051453, 0.8975431323051453, 0.7079696655273438, 0.023084526881575584, 0.4048435091972351, 0.12792034447193146, 0.4222281277179718, 0.21171192824840546, 0.7248737812042236, 0.5454342365264893, 0.2521210312843323, 0.2614332437515259, 0.3105127811431885, 0.03566299006342888],</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[0.3035010099411011, 0.07670660316944122, 0.07924123853445053, 0.161861851811409, 0.14367112517356873, 0.06336789578199387, 0.9437791109085083, 0.5998468399047852, 0.4222017228603363, 0.14000535011291504, 0.12471750378608704, 0.31671205163002014, 0.6216381192207336, 0.4062456488609314, 0.1768452525138855, 0.2160402536392212, 0.9336262345314026, 0.289279043674469, ...],</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">...</code></div><div class="line number7 index6 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">]</code></div><div class="line number8 index7 alt1"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><code>Nx.take/3</code><font> takes and concatenates slices from indices in a given tensor. In this example, each value in </font><code>tokens</code><font> represents an index in the first dimension of the weights tensor. What you end up with is a sequence of dense vectors from an original sparse representation. Another option is </font><code>Nx.take_along_axis/3</code><font> which can be used to take indices along an axis of a given tensor. For example, you can combine </font><code>Nx.take_along_axis/3</code><font> with </font><code>Nx.argsort/2</code><font> to sort values along an axis:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_553927" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">a = Nx.tensor([[2, 3, 0, 1, 4, 8], [5, 1, 2, 3, 6, 9]])</code></div><div class="line number2 index1 alt1"><code class="plain plain">indices = Nx.argsort(a, axis: 1)</code></div><div class="line number3 index2 alt2"><code class="plain plain">Nx.take_along_axis(a, indices, axis: 1)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Returns:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_354922" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div><div class="line number5 index4 alt2"><font>5</font></div><div class="line number6 index5 alt1"><font>6</font></div><div class="line number7 index6 alt2"><font>7</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">s64[2][6]</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">[</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[0, 1, 2, 3, 4, 8],</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">[1, 2, 3, 5, 6, 9]</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">]</code></div><div class="line number7 index6 alt2"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>The last indexing operation Nx offers is </font><code>Nx.gather/3</code><font>. </font><code>Nx.gather/3</code><font> contains a tensor of indices, where the last axes in the indices tensor represents a single value in the source tensor:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_980701" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">t = Nx.tensor([[1, 2], [3, 4]])</code></div><div class="line number2 index1 alt1"><code class="plain plain">Nx.gather(t, Nx.tensor([[1, 1], [0, 1], [1, 0]]))</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Returns:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_368625" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2"><font>1</font></div><div class="line number2 index1 alt1"><font>2</font></div><div class="line number3 index2 alt2"><font>3</font></div><div class="line number4 index3 alt1"><font>4</font></div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">#Nx.Tensor&lt;</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">s64[3]</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;</code><code class="plain plain">[4, 2, 3]</code></div><div class="line number4 index3 alt1"><code class="plain plain">&gt;</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Notice how the last dimension in the indices tensor has a size of 2 which matches the rank of the input tensor. The last dimension represents indexes in the source tensor: </font><code>[1, 1]</code><font>, </font><code>[0, 1]</code><font>, and </font><code>[1, 0]</code><font>. The output shape of a gather operation will be equal to the leading dimensions in the indices tensor minus the last dimension.</font></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-404" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2022/02/21/nx-tip-of-the-week-14-slicing-and-indexing/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-404" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2022/02/21/nx-tip-of-the-week-14-slicing-and-indexing/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-175065622-404-64300a04ef367" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=404&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-404-64300a04ef367&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-404-64300a04ef367" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-175065622-404-64300a04ef367" src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=404&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-404-64300a04ef367&amp;domain=seanmoriarity.com" height="55px" width="100%" frameborder="0" scrolling="no" title="Like or Reblog"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
</div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
		<ul class="post-tags light-text"><li><font>Tagged</font></li><li><a href="https://seanmoriarity.com/tag/elixir/" rel="tag">elixir</a></li><li><a href="https://seanmoriarity.com/tag/nx/" rel="tag">nx</a></li><li><a href="https://seanmoriarity.com/tag/nx-totw/" rel="tag">nx totw</a></li></ul><!-- .post-tags -->	</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published updated" datetime="2022-02-21T07:59:03-05:00">February 21, 2022</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://seanmoriarity.com/2022/02/14/nx-tip-of-the-week-13-hooks/" rel="prev"><span class="meta-nav screen-reader-text">Previous Post</span> Nx Tip of the Week #13 –&nbsp;Hooks</a></div><div class="nav-next"><a href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> JIT/GPU accelerated deep learning for Elixir with Axon&nbsp;v0.1</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2022/02/21/nx-tip-of-the-week-14-slicing-and-indexing/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2022/02/21/nx-tip-of-the-week-14-slicing-and-indexing/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=41&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" originals="25" src-orig="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-0">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-1">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" originals="25" scale="1.5" id="grav-ad516503a11cd5ca435acc9bb6523536-2">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="404" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="26ba8a8735"></p>
<input type="hidden" name="genseq" value="1680869892">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869892169"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div><div><hr></div><div id="page" class="hfeed site" path="/2020/10/18/continual-learning-with-ewc/">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<div id="hero-header" class="site-hero-section">
		<header id="masthead" class="site-header" role="banner">
			<div class="inner">
				<div class="site-branding">
					
												<p class="site-title"><a href="https://seanmoriarity.com/" rel="home">Sean Moriarity</a></p>
													<p class="site-description"><font>AI, Math, Programming</font></p>
									</div><!-- .site-branding -->

				
									<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false" id="primary-menu-button">
						Menu					</button><!-- .menu-toggle -->
				
			</div><!-- .inner -->
		</header><!-- #masthead -->
	</div>

				<nav id="site-navigation" class="main-navigation" role="navigation">
			<div class="menu-primary-container"><ul id="primary-menu" class="menu nav-menu" aria-expanded="false"><li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a href="https://seanmoriarity.com/about/"><font>About</font></a></li>
</ul></div>		</nav><!-- .main-navigation -->
	
	
	
	<div id="content-wrapper" class="content-wrapper">
		<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-75" class="post-75 post type-post status-publish format-standard hentry category-paper tag-continual-learning tag-deep-learning tag-python tag-tensorflow tag-tensorflow-2-2">
			<header class="entry-header">
			<h1 class="entry-title"><font>Continual Learning with Elastic Weight Consolidation in TensorFlow&nbsp;2</font></h1>		</header><!-- .entry-header -->		<div class="entry-meta">
			<span class="byline">
				<a href="https://seanmoriarity.com/author/seanmoriarity/" title="Posts by seanmoriarity" rel="author">seanmoriarity</a>			</span>
							<span class="cat-links">
					<a href="https://seanmoriarity.com/category/paper/" rel="category tag">Paper</a>				</span><!-- .cat-links -->
			
			
			<span class="published-on">
				<time class="entry-date published" datetime="2020-10-18T15:35:37-04:00">October 18, 2020</time><time class="updated" datetime="2020-10-20T15:11:46-04:00">October 20, 2020</time>			</span>

			<span class="word-count">15 Minutes</span>		</div><!-- .entry-meta -->
	
	<div class="entry-content">
		
<p><em>Based on <a href="https://arxiv.org/pdf/1612.00796.pdf">Overcoming catastrophic forgetting in neural networks</a>.</em> </p>



<p><em>You can view the accompanying Jupyter Notebook <a href="https://github.com/seanmor5/blog/blob/main/notebooks/EWC.ipynb">here</a></em><font>.</font></p>



<p><font>The mammalian brain allows for the learning of tasks in a sequential order. That is, we are capable of learning new tasks without forgetting how to perform old ones. Research suggests that retention of task-specific skills relies primarily on </font><em>task-specific synaptic consolidation</em><font> which protects previously acquired knowledge by strengthening a proportion of synapses relevant to a specific task. In effect, these synapses remain resistant to change, even when learning new tasks.</font></p>



<p><font>In the context neural networks, the task of continual learning presents a unique set of challenges. Consider a simple classification problem. Given a dataset </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{D}" class="latex"><font> generated from the true data-generating distribution </font><img src="https://s0.wp.com/latex.php?latex=P_%7Bdata%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=P_%7Bdata%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=P_%7Bdata%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="P_{data}" class="latex"><font> which consists of a number of examples </font><img src="https://s0.wp.com/latex.php?latex=%5C%7Bx_1%2C+x_2%2C...x_N%5C%7D+%5Cin+%5Cmathbf%7BR%7D%5En&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5C%7Bx_1%2C+x_2%2C...x_N%5C%7D+%5Cin+%5Cmathbf%7BR%7D%5En&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7Bx_1%2C+x_2%2C...x_N%5C%7D+%5Cin+%5Cmathbf%7BR%7D%5En&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\{x_1, x_2,...x_N\} \in \mathbf{R}^n" class="latex"><font> with corresponding discrete label </font><img src="https://s0.wp.com/latex.php?latex=%5C%7BL_1%2C+L_2%2C..L_N%5C%7D+%5Cin+%5C%7B1%2C+2%2C...K%5C%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5C%7BL_1%2C+L_2%2C..L_N%5C%7D+%5Cin+%5C%7B1%2C+2%2C...K%5C%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7BL_1%2C+L_2%2C..L_N%5C%7D+%5Cin+%5C%7B1%2C+2%2C...K%5C%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\{L_1, L_2,..L_N\} \in \{1, 2,...K\}" class="latex"><font> , the goal is to learn a function </font><img src="https://s0.wp.com/latex.php?latex=f%3A+%5Cmathbf%7BR%7D%5En+%5Crightarrow+%5C%7B1%2C+2%2C...K%5C%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=f%3A+%5Cmathbf%7BR%7D%5En+%5Crightarrow+%5C%7B1%2C+2%2C...K%5C%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A+%5Cmathbf%7BR%7D%5En+%5Crightarrow+%5C%7B1%2C+2%2C...K%5C%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="f: \mathbf{R}^n \rightarrow \{1, 2,...K\}" class="latex"><font> which accurately assigns a label </font><img src="https://s0.wp.com/latex.php?latex=L&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=L&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=L&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="L" class="latex"><font> given an example </font><img src="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="x" class="latex"><font>. Typically, neural networks parameterize </font><img src="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="f" class="latex"><font> with </font><img src="https://s0.wp.com/latex.php?latex=%5Ctheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Ctheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\theta" class="latex"><font> and optimize a </font><em>loss function</em><font> using </font><em>gradient descent</em><font>. The final parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta^*" class="latex"><font> to the classification problem lies on a manifold in the parameter space that yields good performance on the classification task.</font></p>



<p><font>Now, considering two independent classification tasks </font><em><strong>A</strong></em><font> and </font><em><strong>B</strong></em><font> with corresponding datasets, </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{D}_A" class="latex"><font> and </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_B&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_B&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_B&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{D}_B" class="latex"><font>. The goal is to first learn a parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_A%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_A%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_A%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_A^*" class="latex"><font> that yields acceptable performance on task </font><em><strong>A</strong></em><font> followed by learning a parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_%7BAB%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_%7BAB%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_%7BAB%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_{AB}^*" class="latex"><font> that yields acceptable performance on task </font><em><strong>B</strong></em><font> without losing a significant amount of performance on task </font><strong><em>A</em></strong><font>. Immediately following training on task </font><em><strong>A</strong></em><font>, the parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_A%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_A%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_A%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_A^*" class="latex"><font> lies on a manifold that yields good performance on task </font><em><strong>A</strong></em><font>. With a gradient-based learning method, the parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta" class="latex"><font> will quickly move from the manifold yielding good performance on task </font><em><strong>A</strong></em><font> towards the manifold yielding good performance on task </font><em><strong>B</strong></em><font>. By the end of training, the parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta" class="latex"><font> lies exclusively on the manifold yielding good performance on task </font><em><strong>B</strong></em><font>. This means the neural network has lost all of it’s previous knowledge of task </font><em><strong>A</strong></em><font> – a phenomenon known as </font><em>catastrophic forgetting</em><font>.</font></p>



<p><font>Given the two tasks </font><em><strong>A </strong></em><font>and </font><em><strong>B</strong></em><font>, there exists two manifolds </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{M}_A" class="latex"><font> and </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_B&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_B&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_B&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{M}_B" class="latex"><font> in the parameter space which yield good performance on task </font><em><strong>A</strong></em><font> and task </font><em><strong>B</strong></em><font> respectively. Depending on the problem, there is also likely a certain amount of overlap between the manifolds such that there is a third manifold </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{M}_{AB}" class="latex"><font> which yields good performance on both task </font><em><strong>A </strong></em><font>and task </font><em><strong>B</strong></em><font> at the same time. In a </font><em><a href="https://ruder.io/multi-task/">multi-task learning</a></em><font> context, you learn task </font><em><strong>A</strong></em><font> and task </font><em><strong>B</strong></em><font> simultaneously such that you are attempting to find a parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta^*" class="latex"><font> that lies on the manifold </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{M}_{AB}" class="latex"><font>. In a continuous learning problem, your goal is to first find a parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_A%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_A%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_A%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_A^*" class="latex"><font> which lies on manifold </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{M}_A" class="latex"><font> and then navigate within </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{M}_A" class="latex"><font> towards the manifold </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_B&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_B&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_B&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{M}_B" class="latex"><font> such that you sequentially learn </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BM%7D_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{M}_{AB}" class="latex"><font>. </font></p>



<p><font>In a more practical sense, consider a basic neural network that learns to classify digits in MNIST; however, rather than learning to classify the digits </font><img src="https://s0.wp.com/latex.php?latex=%5B0+-+9%5D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5B0+-+9%5D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5B0+-+9%5D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="[0 - 9]" class="latex"><font> simultaneously, you train the classifier to map the first 5 odd numbers to a label </font><img src="https://s0.wp.com/latex.php?latex=%5B0+-+4%5D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5B0+-+4%5D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5B0+-+4%5D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="[0 - 4]" class="latex"><font> and the first 5 even numbers to a label </font><img src="https://s0.wp.com/latex.php?latex=%5B0+-+4%5D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5B0+-+4%5D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5B0+-+4%5D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="[0 - 4]" class="latex"><font>.  Mathematically, each digit </font><img src="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="x" class="latex"><font> is assigned a label </font><img src="https://s0.wp.com/latex.php?latex=y&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=y&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="y" class="latex"><font> such that </font><img src="https://s0.wp.com/latex.php?latex=y+%3D+floor%28x+%2F+2%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=y+%3D+floor%28x+%2F+2%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=y+%3D+floor%28x+%2F+2%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="y = floor(x / 2)" class="latex"><font>.</font></p>



<p><font>Given the significant (duh) overlap between these two tasks, solving this problem in the context of multi-task learning isn’t particularly difficult. To demonstrate this, create a new Jupyter Notebook and load up your prerequisites:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_871066" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">import</code> <code class="python plain">tensorflow as tf</code></div><div class="line number2 index1 alt1"><code class="python keyword">import</code> <code class="python plain">tensorflow_datasets as tfds</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="python comments"># Load MNIST using TFDS</code></div><div class="line number5 index4 alt2"><code class="python plain">(mnist_train, mnist_test), mnist_info </code><code class="python keyword">=</code> <code class="python plain">tfds.load(</code><code class="python string">'mnist'</code><code class="python plain">, split</code><code class="python keyword">=</code><code class="python plain">[</code><code class="python string">'train'</code><code class="python plain">, </code><code class="python string">'test'</code><code class="python plain">], as_supervised</code><code class="python keyword">=</code><code class="python color1">True</code><code class="python plain">, with_info</code><code class="python keyword">=</code><code class="python color1">True</code><code class="python plain">)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Next, you’ll need to do some simple preprocessing that normalizes the images and transforms the labels according to the new labeling scheme:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_661001" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">normalize_img(image, label):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python plain">tf.cast(image, tf.float32) </code><code class="python keyword">/</code> <code class="python value">255.</code><code class="python plain">, label</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="python keyword">def</code> <code class="python plain">transform_labels(image, label):</code></div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python plain">image, tf.math.floor(label </code><code class="python keyword">/</code> <code class="python value">2</code><code class="python plain">)</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="python keyword">def</code> <code class="python plain">prepare(ds, batch_size</code><code class="python keyword">=</code><code class="python value">128</code><code class="python plain">):</code></div><div class="line number8 index7 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">ds </code><code class="python keyword">=</code> <code class="python plain">ds.</code><code class="python functions">map</code><code class="python plain">(normalize_img, num_parallel_calls</code><code class="python keyword">=</code><code class="python plain">tf.data.experimental.AUTOTUNE)</code></div><div class="line number9 index8 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">ds </code><code class="python keyword">=</code> <code class="python plain">ds.</code><code class="python functions">map</code><code class="python plain">(transform_labels, num_parallel_calls</code><code class="python keyword">=</code><code class="python plain">tf.data.experimental.AUTOTUNE)</code></div><div class="line number10 index9 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">ds </code><code class="python keyword">=</code> <code class="python plain">ds.shuffle(ds_info.splits[</code><code class="python string">'train'</code><code class="python plain">].num_examples)</code></div><div class="line number11 index10 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">ds </code><code class="python keyword">=</code> <code class="python plain">ds.cache()</code></div><div class="line number12 index11 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">ds </code><code class="python keyword">=</code> <code class="python plain">ds.batch(batch_size)</code></div><div class="line number13 index12 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">ds </code><code class="python keyword">=</code> <code class="python plain">ds.prefetch(tf.data.experimental.AUTOTUNE)</code></div><div class="line number14 index13 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python plain">ds</code></div></div></td></tr></tbody></table></div></div></div>


<p><code>prepare</code><font> accepts a TensorFlow Dataset object and maps </font><code>normalize_img</code><font> and </font><code>transform_labels</code><font> over every item in the dataset. The function then goes through a number of standard steps to prepare the dataset for training.</font></p>



<p><font>You’ll now want to split the MNIST dataset into 3: a multi-task training dataset which contains interleaved examples from both labeling tasks (both odd and even numbers), a dataset with only odd examples, and a dataset with only even examples.</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_372874" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">split_tasks(ds, predicate):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python plain">ds.</code><code class="python functions">filter</code><code class="python plain">(predicate), ds.</code><code class="python functions">filter</code><code class="python plain">(</code><code class="python keyword">lambda</code> <code class="python plain">img, label: </code><code class="python keyword">not</code> <code class="python plain">predicate(img, label))</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="python plain">multi_task_train, multi_task_test </code><code class="python keyword">=</code> <code class="python plain">prepare(mnist_train), prepare(mnist_test)</code></div><div class="line number5 index4 alt2"><code class="python plain">task_A_train, task_B_train </code><code class="python keyword">=</code> <code class="python plain">split_tasks(mnist_train, </code><code class="python keyword">lambda</code> <code class="python plain">img, label: label </code><code class="python keyword">%</code> <code class="python value">2</code> <code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">0</code><code class="python plain">)</code></div><div class="line number6 index5 alt1"><code class="python plain">task_A_train, task_B_train </code><code class="python keyword">=</code> <code class="python plain">prepare(task_A_train), prepare(task_B_train)</code></div><div class="line number7 index6 alt2"><code class="python plain">task_A_test, task_B_test </code><code class="python keyword">=</code> <code class="python plain">split_tasks(mnist_test, </code><code class="python keyword">lambda</code> <code class="python plain">img, label: label </code><code class="python keyword">%</code> <code class="python value">2</code> <code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">0</code><code class="python plain">)</code></div><div class="line number8 index7 alt1"><code class="python plain">task_A_test, task_B_test </code><code class="python keyword">=</code> <code class="python plain">prepare(task_A_test), prepare(task_B_test)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Now create a simple function to evaluate a model on a task:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_449223" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">evaluate(model, test_set):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">acc </code><code class="python keyword">=</code> <code class="python plain">tf.keras.metrics.SparseCategoricalAccuracy(name</code><code class="python keyword">=</code><code class="python string">'accuracy'</code><code class="python plain">)</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">for</code> <code class="python plain">i, (imgs, labels) </code><code class="python keyword">in</code> <code class="python functions">enumerate</code><code class="python plain">(test_set):</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">preds </code><code class="python keyword">=</code> <code class="python plain">model.predict_on_batch(imgs)</code></div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">acc.update_state(labels, preds)</code></div><div class="line number6 index5 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python plain">acc.result().numpy()</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You’ll train your first model on the multi-task dataset and test it independently on both task </font><em><strong>A</strong></em><font> and task </font><em><strong>B</strong></em><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_597057" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python plain">multi_task_model </code><code class="python keyword">=</code> <code class="python plain">tf.keras.Sequential([</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;</code><code class="python plain">tf.keras.layers.Flatten(input_shape</code><code class="python keyword">=</code><code class="python plain">(</code><code class="python value">28</code><code class="python plain">, </code><code class="python value">28</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">)),</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;</code><code class="python plain">tf.keras.layers.Dense(</code><code class="python value">128</code><code class="python plain">, activation</code><code class="python keyword">=</code><code class="python string">'relu'</code><code class="python plain">)</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;</code><code class="python plain">tf.keras.layers.Dense(</code><code class="python value">5</code><code class="python plain">)</code></div><div class="line number5 index4 alt2"><code class="python plain">])</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="python plain">multi_task_model.</code><code class="python functions">compile</code><code class="python plain">(optimizer</code><code class="python keyword">=</code><code class="python string">'adam'</code><code class="python plain">, loss</code><code class="python keyword">=</code><code class="python plain">tf.keras.losses.SparseCategoricalCrossEntropy(from_logits</code><code class="python keyword">=</code><code class="python color1">True</code><code class="python plain">), metrics</code><code class="python keyword">=</code><code class="python string">'accuracy'</code><code class="python plain">)</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="python plain">multi_task_model.fit(multi_task_train, epochs</code><code class="python keyword">=</code><code class="python value">6</code><code class="python plain">)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Notice how quickly the model converges on a successful parameterization. Evaluate your model on both task </font><em><strong>A</strong></em><font> and task </font><em><strong>B</strong></em><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_152942" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Task A accuracy after training on Multi-Task Problem: {}"</code><code class="python plain">.</code><code class="python functions">format</code><code class="python plain">(evaluate(multi_task_model, task_A_test)))</code></div><div class="line number2 index1 alt1"><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Task B accuracy after training on Multi-Task Problem: {}"</code><code class="python plain">.</code><code class="python functions">format</code><code class="python plain">(evaluate(multi_task_model, task_B_test)))</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>And you get the following output:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_626715" class="syntaxhighlighter nogutter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Task A accuracy after only training on Multi-Task Problem: 0.9723913669586182</code></div><div class="line number2 index1 alt1"><code class="plain plain">Task B accuracy after only training on Multi-Task Problem: 0.97418212890625</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>The model performs well on both task </font><em><strong>A</strong></em><font> and task </font><em><strong>B</strong></em><font> after training on the multi-task dataset. Now, to demonstrate the difficulties of continual learning, create a new model and train it on task </font><em><strong>A</strong></em><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_112226" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python plain">basic_cl_model </code><code class="python keyword">=</code> <code class="python plain">tf.keras.Sequential([</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">tf.keras.layers.Flatten(input_shape</code><code class="python keyword">=</code><code class="python plain">(</code><code class="python value">28</code><code class="python plain">, </code><code class="python value">28</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">)),</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">tf.keras.layers.Dense(</code><code class="python value">128</code><code class="python plain">, activation</code><code class="python keyword">=</code><code class="python string">'relu'</code><code class="python plain">),</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">tf.keras.layers.Dense(</code><code class="python value">5</code><code class="python plain">)</code></div><div class="line number5 index4 alt2"><code class="python plain">])</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="python plain">basic_cl_model.</code><code class="python functions">compile</code><code class="python plain">(optimizer</code><code class="python keyword">=</code><code class="python string">'adam'</code><code class="python plain">, loss</code><code class="python keyword">=</code><code class="python plain">tf.keras.losses.SparseCategoricalCrossentropy(from_logits</code><code class="python keyword">=</code><code class="python color1">True</code><code class="python plain">), metrics</code><code class="python keyword">=</code><code class="python string">'accuracy'</code><code class="python plain">)</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="python plain">basic_cl_model.fit(task_A_train, epochs</code><code class="python keyword">=</code><code class="python value">6</code><code class="python plain">)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Next, evaluate the model on task </font><em><strong>A</strong></em><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_361308" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Task A accuracy after training model on only Task A: {}"</code><code class="python plain">.</code><code class="python functions">format</code><code class="python plain">(evaluate(basic_cl_model, task_A_test)))</code></div></div></td></tr></tbody></table></div></div></div>

<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_193896" class="syntaxhighlighter nogutter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Task A accuracy after training model on only Task A: 0.984977662563324</code></div></div></td></tr></tbody></table></div></div></div>


<p><font> Now, train the same model on task </font><em><strong>B</strong></em><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_18782" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python plain">basic_cl_model.fit(task_B_train, epochs</code><code class="python keyword">=</code><code class="python value">6</code><code class="python plain">)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>And evaluate it on both task </font><em><strong>A</strong></em><font> and task </font><em><strong>B</strong></em><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_777821" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Task B accuracy after training trained model on Task B: {}"</code><code class="python plain">.</code><code class="python functions">format</code><code class="python plain">(evaluate(basic_cl_model, task_B_test)))</code></div><div class="line number2 index1 alt1"><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Task A accuracy after training trained model on Task B: {}"</code><code class="python plain">.</code><code class="python functions">format</code><code class="python plain">(evaluate(basic_cl_model, task_A_test)))</code></div></div></td></tr></tbody></table></div></div></div>

<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_804110" class="syntaxhighlighter nogutter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Task B accuracy after training trained model on Task B: 0.9830508232116699</code></div><div class="line number2 index1 alt1"><code class="plain plain">Task A accuracy after training trained model on Task B: 0.2663418650627136</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Notice how the model easily solves task </font><em><strong>B</strong></em><font>; however, it loses nearly all of it’s knowledge about task </font><em><strong>A</strong></em><font>. The model still performs slightly better on task </font><strong>A</strong><em> </em><font>than randomly guessing labels </font><img src="https://s0.wp.com/latex.php?latex=%5B0+-+4%5D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5B0+-+4%5D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5B0+-+4%5D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="[0 - 4]" class="latex"><font>, but there’s certainly room for improvement. So, how can we learn task </font><em><strong>B </strong></em><font>without forgetting knowledge from task </font><em><strong>A</strong></em><font>?</font></p>



<p><font>Remember, all knowledge of task </font><em><strong>A</strong></em><font> is encoded in the parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_{A}^*" class="latex"><font> which lies on the manifold </font><img src="https://s0.wp.com/latex.php?latex=M_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=M_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=M_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="M_A" class="latex"><font>. One approach is to ensure the new parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_{AB}" class="latex"><font> never drifts too far from the original parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_{A}^*" class="latex"><font>.  The </font><img src="https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="L^2" class="latex"><font> norm of a vector measures the length of the vector in Euclidean space. It represents the distance of a vector from the origin. When used as a regularization term, the </font><img src="https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="L^2" class="latex"><font> norm forces the parameters of a neural network to remain centered around the origin. Applied to continual learning, you can force </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_{AB}" class="latex"><font> to remain close to </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_{A}^*" class="latex"><font> by adding the </font><img src="https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="L^2" class="latex"><font> norm of </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_%7BAB%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_{AB}" class="latex"><font> centered around </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_{A}^*" class="latex"><font> as a regularization term during training.</font></p>



<p><font>Let’s see how this works in practice. You’ll need to create a function that calculates the </font><img src="https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="L^2" class="latex"><font> penalty of each parameter in the model as well as a custom training loop to apply this penalty at each update:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_193027" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">l2_penalty(model, theta_A):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">penalty </code><code class="python keyword">=</code> <code class="python value">0</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">for</code> <code class="python plain">i, theta_i </code><code class="python keyword">in</code> <code class="python functions">enumerate</code><code class="python plain">(model.trainable_variables):</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">_penalty </code><code class="python keyword">=</code> <code class="python plain">tf.norm(theta_i </code><code class="python keyword">-</code> <code class="python plain">theta_A[i])</code></div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">penalty </code><code class="python keyword">+</code><code class="python keyword">=</code> <code class="python plain">_penalty</code></div><div class="line number6 index5 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python value">0.5</code><code class="python keyword">*</code><code class="python plain">penalty</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="python keyword">def</code> <code class="python plain">train_with_l2(model, task_A_train, task_B_train, task_A_test, task_B_test, epochs</code><code class="python keyword">=</code><code class="python value">6</code><code class="python plain">):</code></div><div class="line number9 index8 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python comments"># First we're going to fit to task A and retain a copy of parameters trained on Task A</code></div><div class="line number10 index9 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">model.fit(task_A_train, epochs</code><code class="python keyword">=</code><code class="python plain">epochs)</code></div><div class="line number11 index10 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">theta_A </code><code class="python keyword">=</code> <code class="python plain">{n: p.value() </code><code class="python keyword">for</code> <code class="python plain">n, p </code><code class="python keyword">in</code> <code class="python functions">enumerate</code><code class="python plain">(model.trainable_variables.copy())}</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Task A accuracy after training on Task A: {}"</code><code class="python plain">.</code><code class="python functions">format</code><code class="python plain">(evaluate(model, task_A_test)))</code></div><div class="line number14 index13 alt1"><code class="python spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number15 index14 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python comments"># Metrics for the custom training loop</code></div><div class="line number16 index15 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">accuracy </code><code class="python keyword">=</code> <code class="python plain">tf.keras.metrics.SparseCategoricalAccuracy(</code><code class="python string">'accuracy'</code><code class="python plain">)</code></div><div class="line number17 index16 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">loss </code><code class="python keyword">=</code> <code class="python plain">tf.keras.metrics.SparseCategoricalCrossentropy(</code><code class="python string">'loss'</code><code class="python plain">)</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">for</code> <code class="python plain">epoch </code><code class="python keyword">in</code> <code class="python functions">range</code><code class="python plain">(epochs):</code></div><div class="line number20 index19 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">accuracy.reset_states()</code></div><div class="line number21 index20 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">loss.reset_states()</code></div><div class="line number22 index21 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">for</code> <code class="python plain">batch, (imgs, labels) </code><code class="python keyword">in</code> <code class="python functions">enumerate</code><code class="python plain">(task_B_train):</code></div><div class="line number23 index22 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">with tf.GradientTape() as tape:</code></div><div class="line number24 index23 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">preds </code><code class="python keyword">=</code> <code class="python plain">model(imgs)</code></div><div class="line number25 index24 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># Loss is crossentropy loss with regularization term for each parameter</code></div><div class="line number26 index25 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">total_loss </code><code class="python keyword">=</code> <code class="python plain">model.loss(labels, preds) </code><code class="python keyword">+</code> <code class="python plain">l2_penalty(model, theta_A)</code></div><div class="line number27 index26 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">grads </code><code class="python keyword">=</code> <code class="python plain">tape.gradient(total_loss, model.trainable_variables)</code></div><div class="line number28 index27 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">model.optimizer.apply_gradients(</code><code class="python functions">zip</code><code class="python plain">(grads, model.trainable_variables))</code></div><div class="line number29 index28 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number30 index29 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">accuracy.update_state(labels, preds)</code></div><div class="line number31 index30 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">loss.update_state(labels, preds)</code></div><div class="line number32 index31 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"\rEpoch: {}, Batch: {}, Loss: {:.3f}, Accuracy: {:.3f}"</code><code class="python plain">.</code><code class="python functions">format</code><code class="python plain">(</code></div><div class="line number33 index32 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">epoch</code><code class="python keyword">+</code><code class="python value">1</code><code class="python plain">, batch</code><code class="python keyword">+</code><code class="python value">1</code><code class="python plain">, loss.result().numpy(), accuracy.result().numpy()), flush</code><code class="python keyword">=</code><code class="python color1">True</code><code class="python plain">, end</code><code class="python keyword">=</code><code class="python plain">''</code></div><div class="line number34 index33 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">)</code></div><div class="line number35 index34 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">("")</code></div><div class="line number36 index35 alt1"><code class="python spaces">&nbsp;&nbsp;</code>&nbsp;</div><div class="line number37 index36 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Task B accuracy after training trained model on Task B: {}"</code><code class="python plain">.</code><code class="python functions">format</code><code class="python plain">(evaluate(model, task_B_test)))</code></div><div class="line number38 index37 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Task A accuracy after training trained model on Task B: {}"</code><code class="python plain">.</code><code class="python functions">format</code><code class="python plain">(evaluate(model, task_A_test)))</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>And then run the training loop with a new model:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_464434" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python plain">l2_model </code><code class="python keyword">=</code> <code class="python plain">tf.keras.Sequential([</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">tf.keras.layers.Flatten(input_shape</code><code class="python keyword">=</code><code class="python plain">(</code><code class="python value">28</code><code class="python plain">, </code><code class="python value">28</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">)),</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">tf.keras.layers.Dense(</code><code class="python value">128</code><code class="python plain">, activation</code><code class="python keyword">=</code><code class="python string">'relu'</code><code class="python plain">),</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">tf.keras.layers.Dense(</code><code class="python value">5</code><code class="python plain">)</code></div><div class="line number5 index4 alt2"><code class="python plain">])</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="python plain">l2_model.</code><code class="python functions">compile</code><code class="python plain">(optimizer</code><code class="python keyword">=</code><code class="python string">'adam'</code><code class="python plain">, loss</code><code class="python keyword">=</code><code class="python plain">tf.keras.losses.SparseCategoricalCrossentropy(from_logits</code><code class="python keyword">=</code><code class="python color1">True</code><code class="python plain">), metrics</code><code class="python keyword">=</code><code class="python string">'accuracy'</code><code class="python plain">)</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="python plain">train_with_l2(l2_model, task_A_train, task_B_train, task_A_test, task_B_test)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>You’ll notice the model plateaus very early when training on task </font><em><strong>B</strong></em><font>, finishing with the following results:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_540904" class="syntaxhighlighter nogutter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Task B accuracy after training trained model on Task B: 0.5977532267570496</code></div><div class="line number2 index1 alt1"><code class="plain plain">Task A accuracy after training trained model on Task B: 0.9037758708000183</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>These results aren’t bad, but they show some of the limitations of using an </font><img src="https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="L^2" class="latex"><font> penalty. While the </font><img src="https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="L^2" class="latex"><font> penalty ensures the new model parameterization retains knowledge of task </font><em><strong>A</strong></em><font>, it’s too severe for successfully learning task </font><em><strong>B</strong></em><font>. The regularization term forces every parameter in the model to remain close to the parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_{A}^*" class="latex"><font>, even those which are unimportant to task </font><em><strong>A</strong></em><font>. Rather than constrain every parameter to remain close to </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_{A}^*" class="latex"><font>, we should focus only on those parameters which are important to task </font><em><strong>A</strong></em><font>. This process most closely relates to how the mammalian brain protects information.</font></p>



<p><font>Consider the following objective formulation of the continual learning problem on task </font><em><strong>A</strong></em><font> and task </font><em><strong>B</strong></em><font>:</font></p>



<p><img src="https://s0.wp.com/latex.php?latex=%5Clog++p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Clog+p%28%5Cmathcal%7BD%7D_B+%7C+%5CTheta%29+%2B+%5Clog+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29+-+log+p%28%5Cmathcal%7BD%7D_B%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Clog++p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Clog+p%28%5Cmathcal%7BD%7D_B+%7C+%5CTheta%29+%2B+%5Clog+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29+-+log+p%28%5Cmathcal%7BD%7D_B%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clog++p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Clog+p%28%5Cmathcal%7BD%7D_B+%7C+%5CTheta%29+%2B+%5Clog+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29+-+log+p%28%5Cmathcal%7BD%7D_B%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\log  p(\Theta | \mathcal{D}) = \log p(\mathcal{D}_B | \Theta) + \log p(\Theta | \mathcal{D}_A) - log p(\mathcal{D}_B)" class="latex"></p>



<p><font>You can derive this formulation by starting with the idea that the learning problem given a dataset </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{D}" class="latex"><font> is to find the most likely parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta" class="latex"><font> given </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{D}" class="latex"><font> which is represented as </font><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}" class="latex"><font>. It follows from Bayes’ Theorem that:</font></p>



<p><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Cfrac%7Bp%28%5Cmathcal%7BD%7D+%7C+%5CTheta%29+%5Ccdot+p%28%5CTheta%29%7D%7Bp%28%5Cmathcal%7BD%7D%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Cfrac%7Bp%28%5Cmathcal%7BD%7D+%7C+%5CTheta%29+%5Ccdot+p%28%5CTheta%29%7D%7Bp%28%5Cmathcal%7BD%7D%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Cfrac%7Bp%28%5Cmathcal%7BD%7D+%7C+%5CTheta%29+%5Ccdot+p%28%5CTheta%29%7D%7Bp%28%5Cmathcal%7BD%7D%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}) = \frac{p(\mathcal{D} | \Theta) \cdot p(\Theta)}{p(\mathcal{D})}" class="latex"></p>



<p><font>Taking the </font><img src="https://s0.wp.com/latex.php?latex=%5Clog&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Clog&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clog&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\log" class="latex"><font> of both sides and rearranging using logarithmic identities yields:</font></p>



<p><img src="https://s0.wp.com/latex.php?latex=%5Clog+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Clog+p%28%5Cmathcal%7BD%7D+%7C+%5CTheta%29+%2B+%5Clog+p%28%5CTheta%29+-+%5Clog+p+%28%5Cmathcal%7BD%7D%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Clog+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Clog+p%28%5Cmathcal%7BD%7D+%7C+%5CTheta%29+%2B+%5Clog+p%28%5CTheta%29+-+%5Clog+p+%28%5Cmathcal%7BD%7D%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clog+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Clog+p%28%5Cmathcal%7BD%7D+%7C+%5CTheta%29+%2B+%5Clog+p%28%5CTheta%29+-+%5Clog+p+%28%5Cmathcal%7BD%7D%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\log p(\Theta | \mathcal{D}) = \log p(\mathcal{D} | \Theta) + \log p(\Theta) - \log p (\mathcal{D})" class="latex"></p>



<p><font>In the context of continual learning, the overall goal is still to learn </font><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D})" class="latex"><font>; however, this is done by assuming the dataset is split into </font><em>independent</em><font> parts </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{D}_A" class="latex"><font> and </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_B&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_B&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_B&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{D}_B" class="latex"><font>. The objective is first to learn </font><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}_A)" class="latex"><font>, then to learn </font><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}" class="latex"><font> from the posterior </font><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}_A)" class="latex"><font> trained on </font><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_B%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_B%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_B%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}_B)" class="latex"><font>. Algebraically this means your goal is:</font></p>



<p><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+p%28p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29+%7C+%5Cmathcal%7BD%7D_B%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+p%28p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29+%7C+%5Cmathcal%7BD%7D_B%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+p%28p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29+%7C+%5Cmathcal%7BD%7D_B%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}) = p(p(\Theta | \mathcal{D}_A) | \mathcal{D}_B)" class="latex"></p>



<p><font>then, from Bayes’ Theorem:</font></p>



<p><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Cfrac%7Bp%28%5Cmathcal%7BD%7D_B+%7C+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29%29+%5Ccdot+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29%7D%7Bp%28%5Cmathcal%7BD%7D_B%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Cfrac%7Bp%28%5Cmathcal%7BD%7D_B+%7C+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29%29+%5Ccdot+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29%7D%7Bp%28%5Cmathcal%7BD%7D_B%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Cfrac%7Bp%28%5Cmathcal%7BD%7D_B+%7C+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29%29+%5Ccdot+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29%7D%7Bp%28%5Cmathcal%7BD%7D_B%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}) = \frac{p(\mathcal{D}_B | p(\Theta | \mathcal{D}_A)) \cdot p(\Theta | \mathcal{D}_A)}{p(\mathcal{D}_B}" class="latex"></p>



<p><font>Notice the term </font><img src="https://s0.wp.com/latex.php?latex=p%28%5Cmathcal%7BD%7D_B+%7C+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5Cmathcal%7BD%7D_B+%7C+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5Cmathcal%7BD%7D_B+%7C+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\mathcal{D}_B | p(\Theta | \mathcal{D}_A))" class="latex"><font>. Assuming we start from a model trained on </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{D}_A" class="latex"><font>, then the parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta" class="latex"><font> estimates the posterior </font><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}_A)" class="latex"><font>, which means we can rewrite the formula as:</font></p>



<p><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Cfrac%7Bp%28%5Cmathcal%7BD%7D_B+%7C+%5CTheta%29+%5Ccdot+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29%7D%7Bp%28%5Cmathcal%7BD%7D_B%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Cfrac%7Bp%28%5Cmathcal%7BD%7D_B+%7C+%5CTheta%29+%5Ccdot+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29%7D%7Bp%28%5Cmathcal%7BD%7D_B%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Cfrac%7Bp%28%5Cmathcal%7BD%7D_B+%7C+%5CTheta%29+%5Ccdot+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29%7D%7Bp%28%5Cmathcal%7BD%7D_B%29%7D&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}) = \frac{p(\mathcal{D}_B | \Theta) \cdot p(\Theta | \mathcal{D}_A)}{p(\mathcal{D}_B)}" class="latex"></p>



<p><font>Taking the </font><img src="https://s0.wp.com/latex.php?latex=%5Clog&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Clog&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clog&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\log" class="latex"><font> of both sides and rearranging yields:</font></p>



<p><img src="https://s0.wp.com/latex.php?latex=%5Clog+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Clog+p%28%5Cmathcal%7BD%7D_B+%7C+%5CTheta%29+%2B+%5Clog+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29+-+%5Clog+p%28%5Cmathcal%7BD%7D_B%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Clog+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Clog+p%28%5Cmathcal%7BD%7D_B+%7C+%5CTheta%29+%2B+%5Clog+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29+-+%5Clog+p%28%5Cmathcal%7BD%7D_B%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clog+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D%29+%3D+%5Clog+p%28%5Cmathcal%7BD%7D_B+%7C+%5CTheta%29+%2B+%5Clog+p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29+-+%5Clog+p%28%5Cmathcal%7BD%7D_B%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\log p(\Theta | \mathcal{D}) = \log p(\mathcal{D}_B | \Theta) + \log p(\Theta | \mathcal{D}_A) - \log p(\mathcal{D}_B)" class="latex"></p>



<p><font>It follows from the problem formulation that all knowledge of task </font><em><strong>A</strong></em><font> is absorbed in the posterior </font><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}_A)" class="latex"><font> which means </font><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}_A)" class="latex"><font> contains information about which parameters are most important to task </font><em><strong>A</strong></em><font>. Given the true posterior, </font><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}_A)" class="latex"><font>, you could calculate the </font><em><a href="https://andrewliao11.github.io/blog/fisher-info-matrix/">Fisher Information Matrix </a></em><img src="https://s0.wp.com/latex.php?latex=F_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=F_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=F_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="F_i" class="latex"><font> of each parameter </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_i" class="latex"><font> in </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta" class="latex"><font> with respect to </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{D}_A" class="latex"><font> which estimates the amount of information </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_i" class="latex"><font> contains about the true posterior </font><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}_A)" class="latex"><font>. From </font><img src="https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="F" class="latex"><font>, we could determine the relative importance of each parameter and constrain the model to bound parameters relative to their importance to task </font><em><strong>A</strong></em><font> when training on task </font><em><strong>B</strong></em><font>. Unfortunately, recovering </font><img src="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28%5CTheta+%7C+%5Cmathcal%7BD%7D_A%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="p(\Theta | \mathcal{D}_A)" class="latex"><font> is intractable, so we have to approximate </font><img src="https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="F" class="latex"><font>.</font></p>



<p><img src="https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="F" class="latex"><font> closely relates to the concept of the spring constant $k$ which is a measure of the stiffness of a given spring. Higher $k$ indicates a stiffer spring. The potential energy of a spring is represented as:</font></p>



<p><img src="https://s0.wp.com/latex.php?latex=PE+%3D+%5Cfrac%7B1%7D%7B2%7Dk%28x+-+x_0%29%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=PE+%3D+%5Cfrac%7B1%7D%7B2%7Dk%28x+-+x_0%29%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=PE+%3D+%5Cfrac%7B1%7D%7B2%7Dk%28x+-+x_0%29%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="PE = \frac{1}{2}k(x - x_0)^2" class="latex"></p>



<p><font>Where </font><img src="https://s0.wp.com/latex.php?latex=x+-+x_0&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=x+-+x_0&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=x+-+x_0&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="x - x_0" class="latex"><font> measures the deviation of the spring from it’s initial position. The further the spring deviates from it’s initial position, the more potential energy is required. Additionally, the stiffer the spring, the more potential energy is required relative to the total displacement of the spring. If we consider the parameterization </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta" class="latex"><font> as a spring, we want to ensure that parameters </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_i" class="latex"><font> are only able to deviate from </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_{A}^*" class="latex"><font> relative to their importance on task </font><em><strong>A</strong></em><font>. Less important parameters have lower relative importance measured by </font><img src="https://s0.wp.com/latex.php?latex=F_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=F_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=F_i&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="F_i" class="latex"><font> and are thus said to be more </font><em>elastic</em><font>. Using this formulation, we get the following regularization term:</font></p>



<p><img src="https://s0.wp.com/latex.php?latex=%5COmega%28%5CTheta%29+%3D+%5Csum%5Cnolimits_i+%5Cfrac%7B1%7D%7B2%7DF_i%28%5CTheta_i+-+%5CTheta_%7BAi%7D%5E%2A%29%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5COmega%28%5CTheta%29+%3D+%5Csum%5Cnolimits_i+%5Cfrac%7B1%7D%7B2%7DF_i%28%5CTheta_i+-+%5CTheta_%7BAi%7D%5E%2A%29%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5COmega%28%5CTheta%29+%3D+%5Csum%5Cnolimits_i+%5Cfrac%7B1%7D%7B2%7DF_i%28%5CTheta_i+-+%5CTheta_%7BAi%7D%5E%2A%29%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Omega(\Theta) = \sum\nolimits_i \frac{1}{2}F_i(\Theta_i - \Theta_{Ai}^*)^2" class="latex"></p>



<p><font>The regularization term is the </font><em>elastic potential energy</em><font> of each parameter in </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta" class="latex"><font> centered around </font><img src="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CTheta_%7BA%7D%5E%2A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Theta_{A}^*" class="latex"><font>. In practice, you want to add an additional term, </font><img src="https://s0.wp.com/latex.php?latex=%5Clambda&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Clambda&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clambda&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\lambda" class="latex"><font>, which represents the relative importance of the regularization term. Adding this term to the objective function yields:</font></p>



<p><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BL%7D%28%5CTheta%29+%3D+%5Cmathcal%7BL%7D_B%28%5CTheta%29+%2B+%5Csum%5Cnolimits_i+%5Cfrac%7B%5Clambda%7D%7B2%7DF_i%28%5CTheta_i+-+%5CTheta_%7BAi%7D%5E%2A%29%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BL%7D%28%5CTheta%29+%3D+%5Cmathcal%7BL%7D_B%28%5CTheta%29+%2B+%5Csum%5Cnolimits_i+%5Cfrac%7B%5Clambda%7D%7B2%7DF_i%28%5CTheta_i+-+%5CTheta_%7BAi%7D%5E%2A%29%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BL%7D%28%5CTheta%29+%3D+%5Cmathcal%7BL%7D_B%28%5CTheta%29+%2B+%5Csum%5Cnolimits_i+%5Cfrac%7B%5Clambda%7D%7B2%7DF_i%28%5CTheta_i+-+%5CTheta_%7BAi%7D%5E%2A%29%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{L}(\Theta) = \mathcal{L}_B(\Theta) + \sum\nolimits_i \frac{\lambda}{2}F_i(\Theta_i - \Theta_{Ai}^*)^2" class="latex"></p>



<p><font>where </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BL%7D_B%28%5CTheta%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BL%7D_B%28%5CTheta%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BL%7D_B%28%5CTheta%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{L}_B(\Theta)" class="latex"><font> is the total loss on task </font><em><strong>B</strong></em><font>. Using this objective during training is known as </font><em>elastic weight consolidation</em><font> or EWC.</font></p>



<p><img src="https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="F" class="latex"><font> is approximated according to the following formula:</font></p>



<p><img src="https://s0.wp.com/latex.php?latex=F+%3D+%5Cfrac%7B1%7D%7BN%7D+%5Csum%5Climits_%7Bi%3D1%7D%5EN+%5Cnabla_%5CTheta+%5Clog+p%28x_%7BA%2Ci%7D+%7C+%5CTheta_%7BA%7D%5E%2A%29+%5Cnabla_%5CTheta+%5Clog+p%28x_%7BA%2Ci%7D+%7C+%5CTheta_%7BA%7D%5E%2A%29%5ET&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=F+%3D+%5Cfrac%7B1%7D%7BN%7D+%5Csum%5Climits_%7Bi%3D1%7D%5EN+%5Cnabla_%5CTheta+%5Clog+p%28x_%7BA%2Ci%7D+%7C+%5CTheta_%7BA%7D%5E%2A%29+%5Cnabla_%5CTheta+%5Clog+p%28x_%7BA%2Ci%7D+%7C+%5CTheta_%7BA%7D%5E%2A%29%5ET&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=F+%3D+%5Cfrac%7B1%7D%7BN%7D+%5Csum%5Climits_%7Bi%3D1%7D%5EN+%5Cnabla_%5CTheta+%5Clog+p%28x_%7BA%2Ci%7D+%7C+%5CTheta_%7BA%7D%5E%2A%29+%5Cnabla_%5CTheta+%5Clog+p%28x_%7BA%2Ci%7D+%7C+%5CTheta_%7BA%7D%5E%2A%29%5ET&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="F = \frac{1}{N} \sum\limits_{i=1}^N \nabla_\Theta \log p(x_{A,i} | \Theta_{A}^*) \nabla_\Theta \log p(x_{A,i} | \Theta_{A}^*)^T" class="latex"></p>



<p><img src="https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="F" class="latex"><font> is approximated as the mean of the gradients of the log-likelihood of </font><img src="https://s0.wp.com/latex.php?latex=N&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=N&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=N&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="N" class="latex"><font> examples sampled from </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{D}_A" class="latex"><font> squared. So, how is this implemented in practice?</font></p>



<p><font>You’ll want to start with a function that approximates </font><img src="https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=F&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="F" class="latex"><font> given a model and </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{D}_A" class="latex"><font>. The function samples a number of batches from </font><img src="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathcal%7BD%7D_A&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\mathcal{D}_A" class="latex"><font>, and calculates the gradient of the log-likelihood with respect to the model’s parameters, and then calculates the mean of the gradients squared:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_79460" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">compute_precision_matrices(model, task_set, num_batches</code><code class="python keyword">=</code><code class="python value">1</code><code class="python plain">, batch_size</code><code class="python keyword">=</code><code class="python value">32</code><code class="python plain">):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">task_set </code><code class="python keyword">=</code> <code class="python plain">task_set.repeat()</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">precision_matrices </code><code class="python keyword">=</code> <code class="python plain">{n: tf.zeros_like(p.value()) </code><code class="python keyword">for</code> <code class="python plain">n, p </code><code class="python keyword">in</code> <code class="python functions">enumerate</code><code class="python plain">(model.trainable_variables)}</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">for</code> <code class="python plain">i, (imgs, labels) </code><code class="python keyword">in</code> <code class="python functions">enumerate</code><code class="python plain">(task_set.take(num_batches)):</code></div><div class="line number6 index5 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># We need gradients of model params</code></div><div class="line number7 index6 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">with tf.GradientTape() as tape:</code></div><div class="line number8 index7 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># Get model predictions for each image</code></div><div class="line number9 index8 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">preds </code><code class="python keyword">=</code> <code class="python plain">model(imgs)</code></div><div class="line number10 index9 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># Get the log likelihoods of the predictions</code></div><div class="line number11 index10 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">ll </code><code class="python keyword">=</code> <code class="python plain">tf.nn.log_softmax(preds)</code></div><div class="line number12 index11 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># Attach gradients of ll to ll_grads</code></div><div class="line number13 index12 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">ll_grads </code><code class="python keyword">=</code> <code class="python plain">tape.gradient(ll, model.trainable_variables)</code></div><div class="line number14 index13 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># Compute F_i as mean of gradients squared</code></div><div class="line number15 index14 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">for</code> <code class="python plain">i, g </code><code class="python keyword">in</code> <code class="python functions">enumerate</code><code class="python plain">(ll_grads):</code></div><div class="line number16 index15 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">precision_matrices[i] </code><code class="python keyword">+</code><code class="python keyword">=</code> <code class="python plain">tf.math.reduce_mean(g </code><code class="python keyword">*</code><code class="python keyword">*</code> <code class="python value">2</code><code class="python plain">, axis</code><code class="python keyword">=</code><code class="python value">0</code><code class="python plain">) </code><code class="python keyword">/</code> <code class="python plain">num_batches</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python plain">precision_matrices</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Next, you’ll need to compute the regularization term </font><img src="https://s0.wp.com/latex.php?latex=%5COmega%28%5CTheta%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=%5COmega%28%5CTheta%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5COmega%28%5CTheta%29&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="\Omega(\Theta)" class="latex"><font>:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_113005" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">compute_elastic_penalty(F, theta, theta_A, alpha</code><code class="python keyword">=</code><code class="python value">25</code><code class="python plain">):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">penalty </code><code class="python keyword">=</code> <code class="python value">0</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">for</code> <code class="python plain">i, theta_i </code><code class="python keyword">in</code> <code class="python functions">enumerate</code><code class="python plain">(theta):</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">_penalty </code><code class="python keyword">=</code> <code class="python plain">tf.math.reduce_sum(F[i] </code><code class="python keyword">*</code> <code class="python plain">(theta_i </code><code class="python keyword">-</code> <code class="python plain">theta_A[i]) </code><code class="python keyword">*</code><code class="python keyword">*</code> <code class="python value">2</code><code class="python plain">)</code></div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">penalty </code><code class="python keyword">+</code><code class="python keyword">=</code> <code class="python plain">_penalty</code></div><div class="line number6 index5 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python value">0.5</code><code class="python keyword">*</code><code class="python plain">alpha</code><code class="python keyword">*</code><code class="python plain">penalty</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Implement a loss function which uses the regularization term:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_921445" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">ewc_loss(labels, preds, model, F, theta_A):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">loss_b </code><code class="python keyword">=</code> <code class="python plain">model.loss(labels, preds)</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">penalty </code><code class="python keyword">=</code> <code class="python plain">compute_elastic_penalty(F, model.trainable_variables, theta_A)</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">return</code> <code class="python plain">loss_b </code><code class="python keyword">+</code> <code class="python plain">penalty</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>And a custom training loop which ties everything together:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_759950" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">def</code> <code class="python plain">train_with_ewc(model, task_A_set, task_B_set, task_A_test, task_B_test, epochs</code><code class="python keyword">=</code><code class="python value">3</code><code class="python plain">):</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python comments"># First we're going to fit to task A and retain a copy of parameters trained on Task A</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">model.fit(task_A_set, epochs</code><code class="python keyword">=</code><code class="python plain">epochs)</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">theta_A </code><code class="python keyword">=</code> <code class="python plain">{n: p.value() </code><code class="python keyword">for</code> <code class="python plain">n, p </code><code class="python keyword">in</code> <code class="python functions">enumerate</code><code class="python plain">(model.trainable_variables.copy())}</code></div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python comments"># We'll only compute Fisher once, you can do it whenever</code></div><div class="line number6 index5 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">F </code><code class="python keyword">=</code> <code class="python plain">compute_precision_matrices(model, task_A_set, num_batches</code><code class="python keyword">=</code><code class="python value">1000</code><code class="python plain">)</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Task A accuracy after training on Task A: {}"</code><code class="python plain">.</code><code class="python functions">format</code><code class="python plain">(evaluate(model, task_A_test)))</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python comments"># Now we set up the training loop for task B with EWC</code></div><div class="line number11 index10 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">accuracy </code><code class="python keyword">=</code> <code class="python plain">tf.keras.metrics.SparseCategoricalAccuracy(</code><code class="python string">'accuracy'</code><code class="python plain">)</code></div><div class="line number12 index11 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">loss </code><code class="python keyword">=</code> <code class="python plain">tf.keras.metrics.SparseCategoricalCrossentropy(</code><code class="python string">'loss'</code><code class="python plain">)</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python keyword">for</code> <code class="python plain">epoch </code><code class="python keyword">in</code> <code class="python functions">range</code><code class="python plain">(epochs</code><code class="python keyword">*</code><code class="python value">3</code><code class="python plain">):</code></div><div class="line number15 index14 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">accuracy.reset_states()</code></div><div class="line number16 index15 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">loss.reset_states()</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python keyword">for</code> <code class="python plain">batch, (imgs, labels) </code><code class="python keyword">in</code> <code class="python functions">enumerate</code><code class="python plain">(task_B_set):</code></div><div class="line number19 index18 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">with tf.GradientTape() as tape:</code></div><div class="line number20 index19 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># Make the predictions</code></div><div class="line number21 index20 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">preds </code><code class="python keyword">=</code> <code class="python plain">model(imgs)</code></div><div class="line number22 index21 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># Compute EWC loss</code></div><div class="line number23 index22 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">total_loss </code><code class="python keyword">=</code> <code class="python plain">ewc_loss(labels, preds, model, F, theta_A)</code></div><div class="line number24 index23 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># Compute the gradients of model's trainable parameters wrt total loss</code></div><div class="line number25 index24 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">grads </code><code class="python keyword">=</code> <code class="python plain">tape.gradient(total_loss, model.trainable_variables)</code></div><div class="line number26 index25 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># Update the model with gradients</code></div><div class="line number27 index26 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">model.optimizer.apply_gradients(</code><code class="python functions">zip</code><code class="python plain">(grads, model.trainable_variables))</code></div><div class="line number28 index27 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python comments"># Report updated loss and accuracy</code></div><div class="line number29 index28 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">accuracy.update_state(labels, preds)</code></div><div class="line number30 index29 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">loss.update_state(labels, preds)</code></div><div class="line number31 index30 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"\rEpoch: {}, Batch: {}, Loss: {:.3f}, Accuracy: {:.3f}"</code><code class="python plain">.</code><code class="python functions">format</code><code class="python plain">(</code></div><div class="line number32 index31 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">epoch</code><code class="python keyword">+</code><code class="python value">1</code><code class="python plain">, batch</code><code class="python keyword">+</code><code class="python value">1</code><code class="python plain">, loss.result().numpy(), accuracy.result().numpy()), flush</code><code class="python keyword">=</code><code class="python color1">True</code><code class="python plain">, end</code><code class="python keyword">=</code><code class="python plain">''</code></div><div class="line number33 index32 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python plain">)</code></div><div class="line number34 index33 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">("")</code></div><div class="line number35 index34 alt2">&nbsp;</div><div class="line number36 index35 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Task B accuracy after training trained model on Task B: {}"</code><code class="python plain">.</code><code class="python functions">format</code><code class="python plain">(evaluate(model, task_B_test)))</code></div><div class="line number37 index36 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python functions">print</code><code class="python plain">(</code><code class="python string">"Task A accuracy after training trained model on Task B: {}"</code><code class="python plain">.</code><code class="python functions">format</code><code class="python plain">(evaluate(model, task_A_test)))</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>Finally, create a new model and train it using EWC:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_540210" class="syntaxhighlighter nogutter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python plain">ewc_model </code><code class="python keyword">=</code> <code class="python plain">tf.keras.Sequential([</code></div><div class="line number2 index1 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">tf.keras.layers.Flatten(input_shape</code><code class="python keyword">=</code><code class="python plain">(</code><code class="python value">28</code><code class="python plain">, </code><code class="python value">28</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">)),</code></div><div class="line number3 index2 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">tf.keras.layers.Dense(</code><code class="python value">128</code><code class="python plain">, activation</code><code class="python keyword">=</code><code class="python string">'relu'</code><code class="python plain">),</code></div><div class="line number4 index3 alt1"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">tf.keras.layers.Dropout(</code><code class="python value">0.5</code><code class="python plain">),</code></div><div class="line number5 index4 alt2"><code class="python spaces">&nbsp;&nbsp;</code><code class="python plain">tf.keras.layers.Dense(</code><code class="python value">5</code><code class="python plain">)</code></div><div class="line number6 index5 alt1"><code class="python plain">])</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="python plain">ewc_model.</code><code class="python functions">compile</code><code class="python plain">(optimizer</code><code class="python keyword">=</code><code class="python string">'adam'</code><code class="python plain">, loss</code><code class="python keyword">=</code><code class="python plain">tf.keras.losses.SparseCategoricalCrossentropy(from_logits</code><code class="python keyword">=</code><code class="python color1">True</code><code class="python plain">), metrics</code><code class="python keyword">=</code><code class="python string">'accuracy'</code><code class="python plain">)</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="python plain">train_with_ewc(ewc_model, task_A_train, task_B_train, task_A_test, task_B_test)</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>With the following results after training:</font></p>


<div class="wp-block-syntaxhighlighter-code "><div><div id="highlighter_109395" class="syntaxhighlighter nogutter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">Task B accuracy after training trained model on Task B: 0.7087110877037048</code></div><div class="line number2 index1 alt1"><code class="plain plain">Task A accuracy after training trained model on Task B: 0.7677628993988037</code></div></div></td></tr></tbody></table></div></div></div>


<p><font>The model performs acceptably on both task </font><em><strong>A</strong></em><font> and task </font><em><strong>B</strong></em><font>; however, it’s not all that impressive. I’ll expand on this below.</font></p>



<p><font>You should have noticed a few peculiarities about this model and the training process. First, I added dropout to the model as a form of regularization. I found during training that dropout was important when using EWC to ensure the model doesn’t significantly overfit to task </font><em><strong>A</strong></em><font> when training on task </font><em><strong>B</strong></em><font>. Without dropout, the model struggles to make any progress on task </font><em><strong>B</strong></em><font> after training on task </font><em><strong>A</strong></em><font>. Additionally, you’ll notice the model is trained 3 times longer on task </font><em><strong>B</strong></em><font> than on task </font><em><strong>A</strong></em><font>. I found progress on task </font><em><strong>B</strong></em><font> was much slower than on task </font><em><strong>A</strong></em><font>.</font></p>



<p><font>You may find that training with EWC is particularly sensitive to hyperparameters such as the importance of the elastic penalty. Most of my trials produced worse results using EWC than using an </font><img src="https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002" srcset="https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002 1x, https://s0.wp.com/latex.php?latex=L%5E2&amp;bg=ffffff&amp;fg=000000&amp;s=0&amp;c=20201002&amp;zoom=4.5 4x" alt="L^2" class="latex"><font> penalty. I’m assuming EWC is sensitive to the final parameterization of the model after training on task </font><em><strong>A</strong></em><font>. If the parameterization lies in a difficult region of the parameter space after training on task </font><em><strong>A</strong></em><font>, then the model will struggle to optimize on task </font><em><strong>B</strong></em><font>.</font></p>



<p><font>In theory, EWC is incredibly cool. In practice, it seems overly sensitive and sometimes difficult to train.</font></p>



<p><em>If you find any bugs in my implementation or problems with my explanation, feel free to comment and I will correct them!</em></p>
<div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title"><font>Share this:</font></h3><div class="sd-content"><ul data-sharing-events-added="true"><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-75" class="share-twitter sd-button share-icon" href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/?share=twitter&amp;nb=1" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-75" class="share-facebook sd-button share-icon" href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/?share=facebook&amp;nb=1" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-loaded" id="like-post-wrapper-175065622-75-64300a504eb1d" data-src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=75&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-75-64300a504eb1d&amp;domain=seanmoriarity.com" data-name="like-post-frame-175065622-75-64300a504eb1d" data-title="Like or Reblog"><h3 class="sd-title"><font>Like this:</font></h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><iframe class="post-likes-widget jetpack-likes-widget" name="like-post-frame-175065622-75-64300a504eb1d" src="//widgets.wp.com/likes/index.html?ver=20230309#blog_id=175065622&amp;post_id=75&amp;origin=seanmoriaritycom.wordpress.com&amp;obj_id=175065622-75-64300a504eb1d&amp;domain=seanmoriarity.com" height="55px" width="100%" frameborder="0" scrolling="no" title="Like or Reblog"></iframe><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div id="jp-relatedposts" class="jp-relatedposts" style="display: block;">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
<div class="jp-relatedposts-items jp-relatedposts-items-minimal jp-relatedposts-grid "><p class="jp-relatedposts-post jp-relatedposts-post0" data-post-id="421" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2022/06/16/jit-gpu-accelerated-deep-learning-for-elixir-with-axon-v0-1/" title="JIT/GPU accelerated deep learning for Elixir with Axon&amp;nbsp;v0.1" data-origin="75" data-position="0">JIT/GPU accelerated deep learning for Elixir with Axon&nbsp;v0.1</a></span><time class="jp-relatedposts-post-date" datetime="June 16, 2022" style="display: block;">June 16, 2022</time><span class="jp-relatedposts-post-context">In "axon"</span></p><p class="jp-relatedposts-post jp-relatedposts-post1" data-post-id="285" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2021/04/08/axon-deep-learning-in-elixir/" title="Axon: Deep Learning in&amp;nbsp;Elixir" data-origin="75" data-position="1">Axon: Deep Learning in&nbsp;Elixir</a></span><time class="jp-relatedposts-post-date" datetime="April 8, 2021" style="display: block;">April 8, 2021</time><span class="jp-relatedposts-post-context">In "projects"</span></p><p class="jp-relatedposts-post jp-relatedposts-post2" data-post-id="349" data-post-format="false"><span class="jp-relatedposts-post-title"><a class="jp-relatedposts-post-a" href="https://seanmoriarity.com/2022/01/17/nx-tip-of-the-week-9-window-operations/" title="Nx Tip of the Week #9 &amp;#8211; Window&amp;nbsp;Functions" data-origin="75" data-position="2">Nx Tip of the Week #9 – Window&nbsp;Functions</a></span><time class="jp-relatedposts-post-date" datetime="January 17, 2022" style="display: block;">January 17, 2022</time><span class="jp-relatedposts-post-context">In "elixir"</span></p></div></div></div>	</div><!-- .entry-content -->

	<div class="entry-footer">
		<ul class="post-tags light-text"><li><font>Tagged</font></li><li><a href="https://seanmoriarity.com/tag/continual-learning/" rel="tag">continual learning</a></li><li><a href="https://seanmoriarity.com/tag/deep-learning/" rel="tag">deep learning</a></li><li><a href="https://seanmoriarity.com/tag/python/" rel="tag">python</a></li><li><a href="https://seanmoriarity.com/tag/tensorflow/" rel="tag">tensorflow</a></li><li><a href="https://seanmoriarity.com/tag/tensorflow-2-2/" rel="tag">tensorflow 2</a></li></ul><!-- .post-tags -->	</div><!-- .entry-footer -->

	<div class="entry-author-wrapper">
				<div class="site-posted-on">
			<strong>Published</strong>
			<time class="entry-date published" datetime="2020-10-18T15:35:37-04:00">October 18, 2020</time><time class="updated" datetime="2020-10-20T15:11:46-04:00">October 20, 2020</time>		</div><!-- .site-posted-on -->
	</div>
</article><!-- #post-## -->

			
	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-next"><a href="https://seanmoriarity.com/2021/02/16/nx-tip-of-the-week-1-using-transforms/" rel="next"><span class="meta-nav screen-reader-text">Next Post</span> Nx Tip of the Week #1 – Using&nbsp;transforms</a></div></div>
	</nav>
			
<div id="comments" class="comments-area">

	
			<h2 class="comments-title"><font>
			6 thoughts on “</font><span>Continual Learning with Elastic Weight Consolidation in TensorFlow&nbsp;2</span><font>”		</font></h2><!-- .comments-title -->

		
		<ol class="comment-list">
					<li id="comment-9" class="comment even thread-even depth-1 parent highlander-comment">
			<article id="div-comment-9" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="https://0.gravatar.com/avatar/f31b3010d9a1d99e43d375f1e2cadd37?s=72&amp;d=identicon&amp;r=G" class="avatar avatar-48 grav-hashed grav-hijack" height="48" width="48" id="grav-f31b3010d9a1d99e43d375f1e2cadd37-0" originals="48" src-orig="https://0.gravatar.com/avatar/f31b3010d9a1d99e43d375f1e2cadd37?s=48&amp;d=identicon&amp;r=G" scale="1.5">						<b class="fn">giacomo</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/#comment-9"><time datetime="2021-03-19T06:12:01-04:00">March 19, 2021 at 6:12 am</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p><font>Very nice work! How do you think the Fisher Information Matrix of the parameters should be updated in order to train a new task C? (Assuming that the training data of task A are no longer available)</font></p>
<p id="comment-like-9" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/?like_comment=9&amp;_wpnonce=65126c20d8" class="comment-like-link needs-login" rel="nofollow" data-blog="175065622"><span>Like</span></a><span id="comment-like-count-9" class="comment-like-feedback"><font>Like</font></span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/?replytocom=9#respond" data-commentid="9" data-postid="75" data-belowelement="div-comment-9" data-respondelement="respond" data-replyto="Reply to giacomo" aria-label="Reply to giacomo">Reply</a></div>			</article><!-- .comment-body -->
		<ol class="children">
		<li id="comment-10" class="comment byuser comment-author-seanmoriarity bypostauthor odd alt depth-2 highlander-comment">
			<article id="div-comment-10" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="https://1.gravatar.com/avatar/14d50099144bff80d0634fbd4cafb248?s=72&amp;d=identicon&amp;r=G" class="avatar avatar-48 grav-hashed grav-hijack" height="48" width="48" id="grav-14d50099144bff80d0634fbd4cafb248-0" originals="48" src-orig="https://1.gravatar.com/avatar/14d50099144bff80d0634fbd4cafb248?s=48&amp;d=identicon&amp;r=G" scale="1.5">						<b class="fn">seanmoriarity</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/#comment-10"><time datetime="2021-03-19T08:35:01-04:00">March 19, 2021 at 8:35 am</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p><font>Good question! Given your parameters at this point are a composite of both tasks, I think it’d be difficult to retain information about task A if that training data was no longer available. You could use data from task B, but I believe you’d very quickly lose information about task A – however, given that the current parameterization is theoretically good for task A and B, it’s possible that only using task B is good enough because those parameters important to task B are also important for task A. </font></p>
<p id="comment-like-10" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/?like_comment=10&amp;_wpnonce=8ee49c40a0" class="comment-like-link needs-login" rel="nofollow" data-blog="175065622"><span>Like</span></a><span id="comment-like-count-10" class="comment-like-feedback"><font>Like</font></span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/?replytocom=10#respond" data-commentid="10" data-postid="75" data-belowelement="div-comment-10" data-respondelement="respond" data-replyto="Reply to seanmoriarity" aria-label="Reply to seanmoriarity">Reply</a></div>			</article><!-- .comment-body -->
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li id="comment-54" class="comment byuser comment-author-stijani even thread-odd thread-alt depth-1 parent highlander-comment">
			<article id="div-comment-54" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="https://2.gravatar.com/avatar/bbebb3118077871a1f48dc5481c72a46?s=72&amp;d=identicon&amp;r=G" class="avatar avatar-48 grav-hashed grav-hijack" height="48" width="48" id="grav-bbebb3118077871a1f48dc5481c72a46-0" originals="48" src-orig="https://2.gravatar.com/avatar/bbebb3118077871a1f48dc5481c72a46?s=48&amp;d=identicon&amp;r=G" scale="1.5">						<b class="fn"><a href="http://stijani.wordpress.com" class="url" rel="ugc external nofollow">stijani</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/#comment-54"><time datetime="2021-08-04T22:33:46-04:00">August 4, 2021 at 10:33 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p><font>Great work! This is the best article I have read on this subject – believe me, I have read a lot of them. I love how you explained the key concept, relating it to the potential energy of an extended spring. The implementation code was also straight to the point and easy to follow. I particularly found how you concluded the article intriguing – depending on the final parameterization region of the prior task, applying L2 penalty could lead to a better result than EWC.</font></p>
<p id="comment-like-54" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/?like_comment=54&amp;_wpnonce=f95700631b" class="comment-like-link needs-login" rel="nofollow" data-blog="175065622"><span>Like</span></a><span id="comment-like-count-54" class="comment-like-feedback"><font>Like</font></span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/?replytocom=54#respond" data-commentid="54" data-postid="75" data-belowelement="div-comment-54" data-respondelement="respond" data-replyto="Reply to stijani" aria-label="Reply to stijani">Reply</a></div>			</article><!-- .comment-body -->
		<ol class="children">
		<li id="comment-55" class="comment byuser comment-author-seanmoriarity bypostauthor odd alt depth-2 highlander-comment">
			<article id="div-comment-55" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="https://1.gravatar.com/avatar/14d50099144bff80d0634fbd4cafb248?s=72&amp;d=identicon&amp;r=G" class="avatar avatar-48 grav-hashed grav-hijack" height="48" width="48" id="grav-14d50099144bff80d0634fbd4cafb248-1" originals="48" src-orig="https://1.gravatar.com/avatar/14d50099144bff80d0634fbd4cafb248?s=48&amp;d=identicon&amp;r=G" scale="1.5">						<b class="fn">seanmoriarity</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/#comment-55"><time datetime="2021-08-04T23:00:02-04:00">August 4, 2021 at 11:00 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p><font>Thank you for your kind words! I’m glad you enjoyed it, I spent a lot of time attempting to get results that were worth showing and the trial and error lead me to some of those guesses. EWC itself though is definitely still very cool, but I am aware of some more recent SOTA work on continual learning that I have been meaning to write about for awhile now (specifically: </font><a href="https://arxiv.org/abs/2004.00070" rel="nofollow ugc">https://arxiv.org/abs/2004.00070</a><font>)</font></p>
<p id="comment-like-55" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/?like_comment=55&amp;_wpnonce=228e9b4356" class="comment-like-link needs-login" rel="nofollow" data-blog="175065622"><span>Like</span></a><span id="comment-like-count-55" class="comment-like-feedback"><font>Like</font></span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/?replytocom=55#respond" data-commentid="55" data-postid="75" data-belowelement="div-comment-55" data-respondelement="respond" data-replyto="Reply to seanmoriarity" aria-label="Reply to seanmoriarity">Reply</a></div>			</article><!-- .comment-body -->
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li id="comment-56" class="comment byuser comment-author-stijani even thread-even depth-1 highlander-comment">
			<article id="div-comment-56" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="https://2.gravatar.com/avatar/bbebb3118077871a1f48dc5481c72a46?s=72&amp;d=identicon&amp;r=G" class="avatar avatar-48 grav-hashed grav-hijack" height="48" width="48" id="grav-bbebb3118077871a1f48dc5481c72a46-1" originals="48" src-orig="https://2.gravatar.com/avatar/bbebb3118077871a1f48dc5481c72a46?s=48&amp;d=identicon&amp;r=G" scale="1.5">						<b class="fn"><a href="http://stijani.wordpress.com" class="url" rel="ugc external nofollow">stijani</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/#comment-56"><time datetime="2021-08-04T23:36:25-04:00">August 4, 2021 at 11:36 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p><font>Thanks for the swift response and sharing, I will read through the paper. I was wondering if we could connect. I’m currently experimenting with the idea of extending EWC or a similar technique to distributed optimization with heterogeneous data. It will be nice to share ideas. I look through LinkedIn to see if I could find you with no luck.</font></p>
<p id="comment-like-56" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/?like_comment=56&amp;_wpnonce=5a86a89e94" class="comment-like-link needs-login" rel="nofollow" data-blog="175065622"><span>Like</span></a><span id="comment-like-count-56" class="comment-like-feedback"><font>Like</font></span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/?replytocom=56#respond" data-commentid="56" data-postid="75" data-belowelement="div-comment-56" data-respondelement="respond" data-replyto="Reply to stijani" aria-label="Reply to stijani">Reply</a></div>			</article><!-- .comment-body -->
		</li><!-- #comment-## -->
		<li id="comment-65" class="comment byuser comment-author-stijani odd alt thread-odd thread-alt depth-1 highlander-comment">
			<article id="div-comment-65" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt="" src="https://2.gravatar.com/avatar/bbebb3118077871a1f48dc5481c72a46?s=72&amp;d=identicon&amp;r=G" class="avatar avatar-48 grav-hashed grav-hijack" height="48" width="48" id="grav-bbebb3118077871a1f48dc5481c72a46-2" originals="48" src-orig="https://2.gravatar.com/avatar/bbebb3118077871a1f48dc5481c72a46?s=48&amp;d=identicon&amp;r=G" scale="1.5">						<b class="fn"><a href="http://stijani.wordpress.com" class="url" rel="ugc external nofollow">stijani</a></b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/#comment-65"><time datetime="2021-08-09T17:56:09-04:00">August 9, 2021 at 5:56 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p><font>Hey @seanmoriarity, I did a tf2 implementation of this technique. It worked quite impressively, I didn’t need to apply dropout when training task B. Little to no hyperparameter tunning was required – I used the Adam optimizer, set the learning rate at 0.001 and the penalty weight at 0.1. Task A and B were MNIST and its permuted version respectively. Here this the code and some results on Github: </font><a href="https://github.com/stijani/elastic-weight-consolidation-tf2" rel="nofollow ugc">https://github.com/stijani/elastic-weight-consolidation-tf2</a></p>
<p id="comment-like-65" data-liked="comment-not-liked" class="comment-likes comment-not-liked"><a href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/?like_comment=65&amp;_wpnonce=e818d54ec5" class="comment-like-link needs-login" rel="nofollow" data-blog="175065622"><span>Like</span></a><span id="comment-like-count-65" class="comment-like-feedback"><font>Like</font></span></p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://seanmoriarity.com/2020/10/18/continual-learning-with-ewc/?replytocom=65#respond" data-commentid="65" data-postid="75" data-belowelement="div-comment-65" data-respondelement="respond" data-replyto="Reply to stijani" aria-label="Reply to stijani">Reply</a></div>			</article><!-- .comment-body -->
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		
	
	
		<div id="respond" class="comment-respond js">
		<h3 id="reply-title" class="comment-reply-title"><font>Leave a Reply </font><small><a rel="nofollow" id="cancel-comment-reply-link" href="/2020/10/18/continual-learning-with-ewc/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://seanmoriarity.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate=""><input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="1e21926ad8"><input type="hidden" name="_wp_http_referer" value="/2020/10/18/continual-learning-with-ewc/">
<input type="hidden" name="hc_post_as" id="hc_post_as" value="guest">

<div class="comment-form-field comment-textarea">
	
	<div id="comment-form-comment"><textarea id="comment" name="comment" title="Enter your comment here..." placeholder="Enter your comment here..." style="overflow: hidden; overflow-wrap: break-word; resize: none; height: 38px;"></textarea></div>
</div>

<div id="comment-form-identity" style="display: none;">
	<div id="comment-form-nascar">
		<p>Fill in your details below or click an icon to log in:</p>
		<ul>
			<li class="selected" style="display:none;">
				<a href="#comment-form-guest" id="postas-guest" class="nascar-signin-link" title="Login via Guest">
									</a>
			</li>
			<li>
				<a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" class="nascar-signin-link" title="Login via WordPress.com">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Twitter" id="postas-twitter" class="nascar-signin-link" title="Login via Twitter">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg>				</a>
			</li>
			<li>
				<a href="#comment-form-load-service:Facebook" id="postas-facebook" class="nascar-signin-link" title="Login via Facebook">
					<svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg>				</a>
			</li>
		</ul>
	</div>

	<div id="comment-form-guest" class="comment-form-service selected">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
<a href="https://gravatar.com/site/signup/" target="_blank">				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-0" originals="25" scale="1.5">
</a>			</div>

				<div class="comment-form-fields">
				<div class="comment-form-field comment-form-email">
					<label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label>
					<div class="comment-form-input"><input id="email" name="email" type="email" value=""></div>
				</div>
				<div class="comment-form-field comment-form-author">
					<label for="author">Name <span class="required">(required)</span></label>
					<div class="comment-form-input"><input id="author" name="author" type="text" value=""></div>
				</div>
				<div class="comment-form-field comment-form-url">
					<label for="url">Website</label>
					<div class="comment-form-input"><input id="url" name="url" type="url" value=""></div>
				</div>
			</div>
			
		</div>
	</div>

	<div id="comment-form-wordpress" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-1" originals="25" scale="1.5">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value="">
				<input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value="">
						<p class="comment-form-posting-as pa-wordpress">
			<strong></strong>
			You are commenting using your WordPress.com account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#0087be" d="M12.158 12.786l-2.698 7.84c.806.236 1.657.365 2.54.365 1.047 0 2.05-.18 2.986-.51-.024-.037-.046-.078-.065-.123l-2.762-7.57zM3.008 12c0 3.56 2.07 6.634 5.068 8.092L3.788 8.342c-.5 1.117-.78 2.354-.78 3.658zm15.06-.454c0-1.112-.398-1.88-.74-2.48-.456-.74-.883-1.368-.883-2.11 0-.825.627-1.595 1.51-1.595.04 0 .078.006.116.008-1.598-1.464-3.73-2.36-6.07-2.36-3.14 0-5.904 1.613-7.512 4.053.21.008.41.012.58.012.94 0 2.395-.114 2.395-.114.484-.028.54.684.057.74 0 0-.487.058-1.03.086l3.275 9.74 1.968-5.902-1.4-3.838c-.485-.028-.944-.085-.944-.085-.486-.03-.43-.77.056-.742 0 0 1.484.114 2.368.114.94 0 2.397-.114 2.397-.114.486-.028.543.684.058.74 0 0-.488.058-1.03.086l3.25 9.665.897-2.997c.456-1.17.684-2.137.684-2.907zm1.82-3.86c.04.286.06.593.06.924 0 .912-.17 1.938-.683 3.22l-2.746 7.94c2.672-1.558 4.47-4.454 4.47-7.77 0-1.564-.4-3.033-1.1-4.314zM12 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-twitter" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=identicon&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav grav-hashed grav-hijack" id="grav-ad516503a11cd5ca435acc9bb6523536-2" originals="25" scale="1.5">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value="">
				<input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value="">
						<p class="comment-form-posting-as pa-twitter">
			<strong></strong>
			You are commenting using your Twitter account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#1DA1F2" d="M22.23 5.924c-.736.326-1.527.547-2.357.646.847-.508 1.498-1.312 1.804-2.27-.793.47-1.67.812-2.606.996C18.325 4.498 17.258 4 16.078 4c-2.266 0-4.103 1.837-4.103 4.103 0 .322.036.635.106.935-3.41-.17-6.433-1.804-8.457-4.287-.353.607-.556 1.312-.556 2.064 0 1.424.724 2.68 1.825 3.415-.673-.022-1.305-.207-1.86-.514v.052c0 1.988 1.415 3.647 3.293 4.023-.344.095-.707.145-1.08.145-.265 0-.522-.026-.773-.074.522 1.63 2.038 2.817 3.833 2.85-1.404 1.1-3.174 1.757-5.096 1.757-.332 0-.66-.02-.98-.057 1.816 1.164 3.973 1.843 6.29 1.843 7.547 0 11.675-6.252 11.675-11.675 0-.178-.004-.355-.012-.53.802-.578 1.497-1.3 2.047-2.124z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>

	<div id="comment-form-facebook" class="comment-form-service">
		<div class="comment-form-padder">
			<div class="comment-form-avatar">
				<img src="" alt="Facebook photo" width="25" class="no-grav">
			</div>

				<div class="comment-form-fields">
				<input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value="">
				<input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value="">
						<p class="comment-form-posting-as pa-facebook">
			<strong></strong>
			You are commenting using your Facebook account.			<span class="comment-form-log-out">
				(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;
				<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)
			</span>
			<span class="pa-icon"><svg xmlns="http://www.w3.org/2000/svg" role="presentation" viewBox="0 0 24 24"><rect x="0" fill="none" width="24" height="24"></rect><g><path fill="#3B5998" d="M20.007 3H3.993C3.445 3 3 3.445 3 3.993v16.013c0 .55.445.994.993.994h8.62v-6.97H10.27V11.31h2.346V9.31c0-2.325 1.42-3.59 3.494-3.59.993 0 1.847.073 2.096.106v2.43h-1.438c-1.128 0-1.346.537-1.346 1.324v1.734h2.69l-.35 2.717h-2.34V21h4.587c.548 0 .993-.445.993-.993V3.993c0-.548-.445-.993-.993-.993z"></path></g></svg></span>
		</p>
					</div>
	
		</div>
	</div>


	<div id="comment-form-load-service" class="comment-form-service">
		<div class="comment-form-posting-as-cancel"><a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a></div>
		<p>Connecting to %s</p>
	</div>

</div>

<script type="text/javascript">
var highlander_expando_javascript = function () {

	function hide( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.setProperty( 'display', 'none' );
		}
	}

	function show( sel ) {
		var el = document.querySelector( sel );
		if ( el ) {
			el.style.removeProperty( 'display' );
		}
	}

	var input = document.createElement( 'input' );
	var comment = document.querySelector( '#comment' );

	if ( input && comment && 'placeholder' in input ) {
		var label = document.querySelector( '.comment-textarea label' );
		if ( label ) {
			var text = label.textContent;
			label.parentNode.removeChild( label );
			comment.setAttribute( 'placeholder', text );
		}
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	hide( '#comment-form-identity' );
	hide( '#comment-form-subscribe' );
	hide( '#commentform .form-submit' );

	if ( comment ) {
		comment.style.height = '10px';

		var handler = function () {
			comment.style.height = HighlanderComments.initialHeight + 'px';
			show( '#comment-form-identity' );
			show( '#comment-form-subscribe' );
			show( '#commentform .form-submit' );
			HighlanderComments.resizeCallback();

			comment.removeEventListener( 'focus', handler );
		};

		comment.addEventListener( 'focus', handler );
	}
}

if ( document.readyState !== 'loading' ) {
	highlander_expando_javascript();
} else {
	document.addEventListener( 'DOMContentLoaded', highlander_expando_javascript );
}

</script>

<div id="comment-form-subscribe" style="display: none;">
	<p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p><p class="post-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog" style="display: inline;">Notify me of new posts via email.</label></p></div>





<p class="form-submit" style="display: none;"><input name="submit" type="submit" id="comment-submit" class="submit button" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="75" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="78b0c01471"></p>
<input type="hidden" name="genseq" value="1680869968">
<p style="display: none !important;"><label>Δ<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="1680869967555"><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
	<div style="clear: both"></div>
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->

		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
						<div class="site-info">
				<a href="https://wordpress.com/?ref=footer_blog" rel="nofollow">Blog at WordPress.com.</a>
				
							</div><!-- .site-info -->
		</footer><!-- #colophon -->
	</div><!-- #content-wrapper -->
</div></div>
