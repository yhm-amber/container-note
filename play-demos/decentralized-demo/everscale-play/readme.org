
这个东西的开发者 (组织) ，
以前叫 TonLabs ，现在叫 EverX.。

原先的产品也改名了，比如：

- [[https://tonlabs.io/products][Ton OS]] 改为 [[https://everos.dev][Ever OS]] 
- [[https://ton.surf][Ton Surf]] 改为 [[https://ever.surf][Ever Surf]]

这是一些应用：

[[https://mitja.gitbook.io/papers/v/everscale-white-paper/readme/chapter-three-ever-operating-system/about-ever-os][About Ever OS | Mitja's web page]]

#+BEGIN_QUOTE
Ever Operating System is an
 intermediary between a user
 and a blockchain — a distributed
 verifiable computing engine.

A modern blockchain like Everscale
 is not just an immutable ledger.
 Bitcoin and other earlier blockchains
 were mostly ledgers, yet even Bitcoin
 supports a non-Turing complete script
 that provides some transaction
 execution instructions.

Most blockchains after Ethereum are,
 in large part, distributed computing
 engines that execute and verify
 Turing-complete programs called smart
 contracts. In simpler words they are a
 special breed of network processors
 working in orchestration (called
 "consensus") to perform common operations
 and in that way verify the correctness
 of their execution.

In Everscale this paradigm is taken to
 the extreme. The immutable ledger is
 quite a small part of Everscale.
 Of course it is an immutable ledger and
 a chain of blocks — that is how the data
 is written and transmitted from one
 network processor to another — yet there
 are at least two aspects which make
 Everscale uniquely more so a computing
 engine than a simple ledger.

Almost everything in Everscale is smart
 contracts. Every account in Everscale
 must be associated with a smart contract
 code (or initialized) in order for a user
 to be able to perform any operation with it.
 Smart contracts are Everscale Assembly
 programs executed in the Everscale
 Virtual machine much like any
 assembly code is executed by hardware
 or by a virtual processor
 in a regular computer.

Between a regular computer and a user
 (which may be a developer who would
 like to write programs for that
 computer or a regular user who
 would like to execute and interact
 with these programs) there is something
 called an operating system.

That is how GNU defines an
 operating system:

Linux is an operating system: a series
 of programs that let you interact with
 your computer and run other programs.

An operating system consists of various
 fundamental programs which are needed
 by your computer so that it can
 communicate and receive instructions
 from users; read and write data
 to hard disks, tapes, and printers;
 control the use of memory;
 and run other software.

It is quite obvious why computers
 need an operating system.
 Before operating systems existed,
 interaction with computers looked
 horribly unpleasant to the end user.
 Something resembling today’s
 interaction between a user
 and a blockchain.

Any way you look at it,
 blockchain is quite a good candidate
 to be called a decentralized computer.
 At least some of the blockchains are.
 Everscale most definitely is.

And just as with any computer,
 a blockchain needs an intermediate layer
 (or layers) that manages its resources
 and provides services to the programs
 the user runs or interacts with.
 Of course blockchain, in terms of
 architecture, cannot perhaps be compared
 directly 1:1 with a regular PC.
 But in logical terms, whenever we
 think about a software stack
 needed to enable interaction
 with a user — to call it an
 operating system is quite compelling.

Let's run some arguments.
 For reasons of practicality we will not
 talk only about the Everscale blockchain,
 but most of the arguments could be applied
 to some other modern blockchains as well.

A classical operating system is
 expected to provide:
 Memory Management, Processor Managing,
 Device Managing, File handling,
 Security Handling and so on.
 In this chapter we will discuss
 how all that is implemented on the
 blockchain for the first time.

Ever Operating System 是用户和
区块链之间的中介——一个分布式可验证计算引擎。

像 Everscale 这样的现代区块链不仅仅是
一个不可变的分类账。比特币和其他早期的区块链
大多是账本，但即使是比特币也支持提供一些
交易执行指令的非图灵完备脚本。

以太坊之后的大多数区块链在很大程度上是
分布式计算引擎，它们执行和验证称为智能合约的
图灵完备程序。简而言之，它们是一种特殊的网络处理器，
在编排 (称为“共识”) 中工作以执行常见操作
并以这种方式验证其执行的正确性。

在 Everscale 中，这种范式被发挥到了极致。
不可变的账本只是 Everscale 的一小部分。
当然，它是一个不可变的账本和区块链
——这就是数据从一个网络处理器
写入和传输到另一个网络处理器的方式
——但至少有两个方面使 Everscale 更像是
一个计算引擎，而不是一个简单的账本。

Everscale 中几乎所有东西都是智能合约。
 Everscale 中的每个账户都必须与
智能合约代码相关联 (或初始化) ，
以便用户能够使用它执行任何操作。
智能合约是在 Everscale 虚拟机中
执行的 Everscale 汇编程序，
就像任何汇编代码由硬件或普通计算机中的
虚拟处理器执行一样。

在普通计算机和用户 (可能是想为该计算机编写程序
的开发人员或想执行这些程序并与之交互
的普通用户) 之间存在称为操作系统的东西。

这就是 GNU 定义操作系统的方式：

Linux 是一个操作系统：一系列可让您
与计算机交互并运行其他程序的程序。

操作系统由您的计算机需要的
各种基本程序组成，以便
它可以与用户进行通信和接收指令；
读写数据到硬盘、磁带和打印机；
控制内存的使用；并运行其他软件。

很明显为什么计算机需要操作系统。
在操作系统出现之前，与计算机的交互对最终用户来说
看起来非常不愉快。类似于今天用户和区块链之间的交互。

无论你怎么看，区块链都非常适合称为去中心化计算机。
至少一些区块链是。 Everscale 绝对是。

就像任何计算机一样，区块链需要一个 (或多个) 中间层
来管理其资源并为用户运行或与之交互的程序提供服务。
当然，就架构而言，区块链或许不能
与普通 PC 直接 1:1 地比较。但从逻辑上讲，
每当我们考虑实现与用户交互所需的软件堆栈时
——将其称为操作系统是非常有说服力的。

让我们进行一些论证。出于实用性的原因，
我们不会只谈论 Everscale 区块链，
但大多数论点也可以应用于其他一些现代区块链。

一个经典的操作系统应该提供：
内存管理、处理器管理、设备管理、
文件处理、安全处理等。
在本章中，我们将首次讨论
如何在区块链上实现所有这些。

#+END_QUOTE


